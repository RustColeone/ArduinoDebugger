
ArduinoDebug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012c  00800100  00004500  00004594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004500  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000301  0080022c  0080022c  000046c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000046c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000046f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c10  00000000  00000000  00004730  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001c4a0  00000000  00000000  00005340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005e54  00000000  00000000  000217e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f47  00000000  00000000  00027634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020e0  00000000  00000000  0002e57c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f22  00000000  00000000  0003065c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009e2e  00000000  00000000  0003557e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c10  00000000  00000000  0003f3ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__dtors_end>
       4:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__vector_1>
       8:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__vector_2>
       c:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__vector_3>
      10:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__vector_4>
      14:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      18:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      1c:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__vector_7>
      20:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      24:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__vector_9>
      28:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__vector_10>
      2c:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__vector_11>
      30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      34:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      40:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      48:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      4c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      50:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      54:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      5c:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__vector_23>
      60:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      64:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      68:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      6c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      70:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      74:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      78:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      7c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      80:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__vector_32>
      84:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      88:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      8c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      90:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__vector_36>
      94:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      98:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      9c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a0:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      ac:	21 19       	sub	r18, r1
      ae:	26 19       	sub	r18, r6
      b0:	2b 19       	sub	r18, r11
      b2:	35 19       	sub	r19, r5
      b4:	3f 19       	sub	r19, r15
      b6:	89 19       	sub	r24, r9
      b8:	89 19       	sub	r24, r9
      ba:	89 19       	sub	r24, r9
      bc:	49 19       	sub	r20, r9
      be:	53 19       	sub	r21, r3
      c0:	5d 19       	sub	r21, r13
      c2:	67 19       	sub	r22, r7
      c4:	74 19       	sub	r23, r4
      c6:	89 19       	sub	r24, r9
      c8:	7c 19       	sub	r23, r12
      ca:	aa 19       	sub	r26, r10
      cc:	ad 19       	sub	r26, r13
      ce:	9c 19       	sub	r25, r12
      d0:	a0 19       	sub	r26, r0
      d2:	a6 19       	sub	r26, r6
      d4:	ce 19       	sub	r28, r14
      d6:	ce 19       	sub	r28, r14
      d8:	ce 19       	sub	r28, r14
      da:	b1 19       	sub	r27, r1
      dc:	b5 19       	sub	r27, r5
      de:	b9 19       	sub	r27, r9
      e0:	bf 19       	sub	r27, r15
      e2:	c3 19       	sub	r28, r3
      e4:	ce 19       	sub	r28, r14
      e6:	c9 19       	sub	r28, r9

000000e8 <__trampolines_end>:
      e8:	08 0b       	sbc	r16, r24
      ea:	00 02       	muls	r16, r16
      ec:	02 02       	muls	r16, r18
      ee:	01 00       	.word	0x0001	; ????
      f0:	09 04       	cpc	r0, r9
      f2:	00 00       	nop
      f4:	01 02       	muls	r16, r17
      f6:	02 00       	.word	0x0002	; ????
      f8:	00 05       	cpc	r16, r0
      fa:	24 00       	.word	0x0024	; ????
      fc:	10 01       	movw	r2, r0
      fe:	05 24       	eor	r0, r5
     100:	01 01       	movw	r0, r2
     102:	01 04       	cpc	r0, r1
     104:	24 02       	muls	r18, r20
     106:	06 05       	cpc	r16, r6
     108:	24 06       	cpc	r2, r20
     10a:	00 01       	movw	r0, r0
     10c:	07 05       	cpc	r16, r7
     10e:	81 03       	fmuls	r16, r17
     110:	10 00       	.word	0x0010	; ????
     112:	40 09       	sbc	r20, r0
     114:	04 01       	movw	r0, r8
     116:	00 02       	muls	r16, r16
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	07 05       	cpc	r16, r7
     11e:	02 02       	muls	r16, r18
     120:	40 00       	.word	0x0040	; ????
     122:	00 07       	cpc	r16, r16
     124:	05 83       	std	Z+5, r16	; 0x05
     126:	02 40       	sbci	r16, 0x02	; 2
	...

0000012a <_ZL21tone_pin_to_timer_PGM>:
     12a:	03                                                  .

0000012b <USB_DeviceDescriptorIAD>:
     12b:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
     13b:	03 01                                               ..

0000013d <STRING_MANUFACTURER>:
     13d:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

00000149 <STRING_PRODUCT>:
     149:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

0000015a <STRING_LANGUAGE>:
     15a:	04 03 09 04                                         ....

0000015e <analog_pin_to_channel_PGM>:
     15e:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

0000016a <digital_pin_to_timer_PGM>:
     16a:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000189 <digital_pin_to_bit_mask_PGM>:
     189:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     199:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

000001a8 <digital_pin_to_port_PGM>:
     1a8:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     1b8:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

000001c7 <port_to_input_PGM>:
     1c7:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

000001d5 <port_to_output_PGM>:
     1d5:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

000001e3 <port_to_mode_PGM>:
     1e3:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00 00        ....$.'.*.-.0..

000001f2 <__ctors_start>:
     1f2:	a9 04       	cpc	r10, r9
     1f4:	e5 0b       	sbc	r30, r21
     1f6:	de 0c       	add	r13, r14

000001f8 <__ctors_end>:
     1f8:	b0 04       	cpc	r11, r0

000001fa <__dtors_end>:
     1fa:	11 24       	eor	r1, r1
     1fc:	1f be       	out	0x3f, r1	; 63
     1fe:	cf ef       	ldi	r28, 0xFF	; 255
     200:	da e0       	ldi	r29, 0x0A	; 10
     202:	de bf       	out	0x3e, r29	; 62
     204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_copy_data>:
     206:	12 e0       	ldi	r17, 0x02	; 2
     208:	a0 e0       	ldi	r26, 0x00	; 0
     20a:	b1 e0       	ldi	r27, 0x01	; 1
     20c:	e0 e0       	ldi	r30, 0x00	; 0
     20e:	f5 e4       	ldi	r31, 0x45	; 69
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x10>
     212:	05 90       	lpm	r0, Z+
     214:	0d 92       	st	X+, r0
     216:	ac 32       	cpi	r26, 0x2C	; 44
     218:	b1 07       	cpc	r27, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0xc>

0000021c <__do_clear_bss>:
     21c:	25 e0       	ldi	r18, 0x05	; 5
     21e:	ac e2       	ldi	r26, 0x2C	; 44
     220:	b2 e0       	ldi	r27, 0x02	; 2
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
     226:	ad 32       	cpi	r26, 0x2D	; 45
     228:	b2 07       	cpc	r27, r18
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>

0000022c <__do_global_ctors>:
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	cc ef       	ldi	r28, 0xFC	; 252
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	04 c0       	rjmp	.+8      	; 0x23c <__do_global_ctors+0x10>
     234:	21 97       	sbiw	r28, 0x01	; 1
     236:	fe 01       	movw	r30, r28
     238:	0e 94 7f 21 	call	0x42fe	; 0x42fe <__tablejump2__>
     23c:	c9 3f       	cpi	r28, 0xF9	; 249
     23e:	d1 07       	cpc	r29, r17
     240:	c9 f7       	brne	.-14     	; 0x234 <__do_global_ctors+0x8>
     242:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <main>
     246:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <__do_global_dtors>

0000024a <__bad_interrupt>:
     24a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024e <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     24e:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     250:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     252:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     254:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     256:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     258:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     25a:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
     25c:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     25e:	05 c0       	rjmp	.+10     	; 0x26a <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     260:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     262:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     264:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     266:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
     268:	61 f1       	breq	.+88     	; 0x2c2 <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     26a:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     26c:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     26e:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
     270:	b9 f3       	breq	.-18     	; 0x260 <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
     272:	05 c0       	rjmp	.+10     	; 0x27e <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     274:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     276:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     278:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     27a:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
     27c:	11 f1       	breq	.+68     	; 0x2c2 <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     27e:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     280:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     282:	94 13       	cpse	r25, r20
    rjmp .L7   ;
     284:	f7 cf       	rjmp	.-18     	; 0x274 <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     286:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
     288:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
     28a:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
     28c:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
     28e:	0a c0       	rjmp	.+20     	; 0x2a4 <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     290:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
     292:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
     294:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
     296:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
     298:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     29a:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
     29c:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
     29e:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
     2a0:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
     2a2:	79 f0       	breq	.+30     	; 0x2c2 <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     2a4:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     2a6:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     2a8:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
     2aa:	91 f3       	breq	.-28     	; 0x290 <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     2ac:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     2ae:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     2b0:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     2b2:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     2b4:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
     2b6:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
     2b8:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
     2ba:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
     2bc:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
     2be:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
     2c0:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     2c2:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     2c4:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     2c6:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     2c8:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     2ca:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
     2cc:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
     2ce:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
     2d0:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
     2d2:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
     2d4:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
     2d6:	08 95       	ret

000002d8 <_Z7_noTonev>:

typedef void(*reset_t)(void);

void _noTone(void)
{
	noTone(IN_UBYTE2);
     2d8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <FPCEXcode+0x2>
     2dc:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <_Z6noToneh>

000002e0 <_Z9_shiftOutv>:
Serial.write(&TPCEXcode.ByteData[0],8);
}

void _shiftOut(void)
{
shiftOut(IN_UBYTE2,IN_UBYTE6,IN_UBYTE7,IN_UBYTE3);
     2e0:	e8 e3       	ldi	r30, 0x38	; 56
     2e2:	f2 e0       	ldi	r31, 0x02	; 2
     2e4:	23 81       	ldd	r18, Z+3	; 0x03
     2e6:	47 81       	ldd	r20, Z+7	; 0x07
     2e8:	66 81       	ldd	r22, Z+6	; 0x06
     2ea:	82 81       	ldd	r24, Z+2	; 0x02
     2ec:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <shiftOut>

000002f0 <_Z5_tonev>:
}

void _tone(void)
{	
	tone(IN_UBYTE2,IN_UINT1);
     2f0:	e8 e3       	ldi	r30, 0x38	; 56
     2f2:	f2 e0       	ldi	r31, 0x02	; 2
     2f4:	64 81       	ldd	r22, Z+4	; 0x04
     2f6:	75 81       	ldd	r23, Z+5	; 0x05
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	a9 01       	movw	r20, r18
     2fe:	82 81       	ldd	r24, Z+2	; 0x02
     300:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <_Z4tonehjm>

00000304 <_Z6_tone1v>:
}

void _tone1(void)
{
	tone(IN_UBYTE2,IN_DUE_INT1,IN_ULONG);
     304:	e8 e3       	ldi	r30, 0x38	; 56
     306:	f2 e0       	ldi	r31, 0x02	; 2
     308:	24 81       	ldd	r18, Z+4	; 0x04
     30a:	35 81       	ldd	r19, Z+5	; 0x05
     30c:	46 81       	ldd	r20, Z+6	; 0x06
     30e:	57 81       	ldd	r21, Z+7	; 0x07
     310:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <DUEdata>
     314:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <DUEdata+0x1>
     318:	82 81       	ldd	r24, Z+2	; 0x02
     31a:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <_Z4tonehjm>

0000031e <_Z8_pulseInv>:
{
	noTone(IN_UBYTE2);
}
void _pulseIn(void)
{
	OUT_ULONG=pulseIn(IN_UBYTE2,IN_UBYTE3,IN_ULONG);//value is high low	
     31e:	e8 e3       	ldi	r30, 0x38	; 56
     320:	f2 e0       	ldi	r31, 0x02	; 2
     322:	24 81       	ldd	r18, Z+4	; 0x04
     324:	35 81       	ldd	r19, Z+5	; 0x05
     326:	46 81       	ldd	r20, Z+6	; 0x06
     328:	57 81       	ldd	r21, Z+7	; 0x07
     32a:	63 81       	ldd	r22, Z+3	; 0x03
     32c:	82 81       	ldd	r24, Z+2	; 0x02
     32e:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <pulseIn>
     332:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <TPCEXcode+0x4>
     336:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <TPCEXcode+0x5>
     33a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <TPCEXcode+0x6>
     33e:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <TPCEXcode+0x7>
	Serial.write(&TPCEXcode.ByteData[0],8);
     342:	48 e0       	ldi	r20, 0x08	; 8
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e4       	ldi	r22, 0x40	; 64
     348:	72 e0       	ldi	r23, 0x02	; 2
     34a:	8d e5       	ldi	r24, 0x5D	; 93
     34c:	94 e0       	ldi	r25, 0x04	; 4
     34e:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000352 <_Z12_pulseInLongv>:
}


void _pulseInLong(void)
{
	if(IN_ULONG>0)
     352:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <FPCEXcode+0x4>
     356:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <FPCEXcode+0x5>
     35a:	40 91 3e 02 	lds	r20, 0x023E	; 0x80023e <FPCEXcode+0x6>
     35e:	50 91 3f 02 	lds	r21, 0x023F	; 0x80023f <FPCEXcode+0x7>
     362:	21 15       	cp	r18, r1
     364:	31 05       	cpc	r19, r1
     366:	41 05       	cpc	r20, r1
     368:	51 05       	cpc	r21, r1
     36a:	21 f4       	brne	.+8      	; 0x374 <_Z12_pulseInLongv+0x22>
	OUT_ULONG=pulseInLong(IN_UBYTE2,IN_UBYTE3,IN_ULONG);
	else
	OUT_ULONG=pulseInLong(IN_UBYTE2,IN_UBYTE3);
     36c:	20 e4       	ldi	r18, 0x40	; 64
     36e:	32 e4       	ldi	r19, 0x42	; 66
     370:	4f e0       	ldi	r20, 0x0F	; 15
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <FPCEXcode+0x3>
     378:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <FPCEXcode+0x2>
     37c:	0e 94 95 1a 	call	0x352a	; 0x352a <pulseInLong>
     380:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <TPCEXcode+0x4>
     384:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <TPCEXcode+0x5>
     388:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <TPCEXcode+0x6>
     38c:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <TPCEXcode+0x7>
	Serial.write(&TPCEXcode.ByteData[0],8);
     390:	48 e0       	ldi	r20, 0x08	; 8
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	60 e4       	ldi	r22, 0x40	; 64
     396:	72 e0       	ldi	r23, 0x02	; 2
     398:	8d e5       	ldi	r24, 0x5D	; 93
     39a:	94 e0       	ldi	r25, 0x04	; 4
     39c:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

000003a0 <_Z8_shiftInv>:
}

void _shiftIn(void)
{
OUT_UBYTE4=shiftIn(IN_UBYTE2,IN_UBYTE6,IN_UBYTE7);
     3a0:	e8 e3       	ldi	r30, 0x38	; 56
     3a2:	f2 e0       	ldi	r31, 0x02	; 2
     3a4:	47 81       	ldd	r20, Z+7	; 0x07
     3a6:	66 81       	ldd	r22, Z+6	; 0x06
     3a8:	82 81       	ldd	r24, Z+2	; 0x02
     3aa:	0e 94 1a 1b 	call	0x3634	; 0x3634 <shiftIn>
     3ae:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
Serial.write(&TPCEXcode.ByteData[0],8);
     3b2:	48 e0       	ldi	r20, 0x08	; 8
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	60 e4       	ldi	r22, 0x40	; 64
     3b8:	72 e0       	ldi	r23, 0x02	; 2
     3ba:	8d e5       	ldi	r24, 0x5D	; 93
     3bc:	94 e0       	ldi	r25, 0x04	; 4
     3be:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

000003c2 <_Z7Versionv>:



void Version(void)
{
	OUT_ULONG=123;
     3c2:	8b e7       	ldi	r24, 0x7B	; 123
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	a0 e0       	ldi	r26, 0x00	; 0
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
     3ce:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <TPCEXcode+0x5>
     3d2:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <TPCEXcode+0x6>
     3d6:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <TPCEXcode+0x7>
	Serial.write(&TPCEXcode.ByteData[0],8);
     3da:	48 e0       	ldi	r20, 0x08	; 8
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	60 e4       	ldi	r22, 0x40	; 64
     3e0:	72 e0       	ldi	r23, 0x02	; 2
     3e2:	8d e5       	ldi	r24, 0x5D	; 93
     3e4:	94 e0       	ldi	r25, 0x04	; 4
     3e6:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

000003ea <_Z11SendingDatav>:
EXDuedata	DUEdata;
Typecombine ESPTYPE;

void SendingData()
{//OUT_INTPT_Status=InterruptStatus;
Serial.write(&TPCEXcode.ByteData[0],8);
     3ea:	48 e0       	ldi	r20, 0x08	; 8
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	60 e4       	ldi	r22, 0x40	; 64
     3f0:	72 e0       	ldi	r23, 0x02	; 2
     3f2:	8d e5       	ldi	r24, 0x5D	; 93
     3f4:	94 e0       	ldi	r25, 0x04	; 4
     3f6:	0e 94 35 0c 	call	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>
OUT_INTPT_Status=0;
     3fa:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <TPCEXcode+0x1>
     3fe:	08 95       	ret

00000400 <_Z12SendingArrayh>:
	}
	return 0;
}
*/
byte SendingArray(byte page)
{int count;
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
	int loop;
	int readoffset=0;	
	if(page>0)
     40c:	88 23       	and	r24, r24
     40e:	b1 f0       	breq	.+44     	; 0x43c <_Z12SendingArrayh+0x3c>
     410:	08 ec       	ldi	r16, 0xC8	; 200
     412:	12 e0       	ldi	r17, 0x02	; 2
     414:	e1 2c       	mov	r14, r1
     416:	f1 2c       	mov	r15, r1
	{
		for(count=0;count<page;count++)
     418:	c8 2f       	mov	r28, r24
     41a:	d0 e0       	ldi	r29, 0x00	; 0
     41c:	ec 16       	cp	r14, r28
     41e:	fd 06       	cpc	r15, r29
     420:	6c f4       	brge	.+26     	; 0x43c <_Z12SendingArrayh+0x3c>
		{
			Serial.write(&OUTdataArray[readoffset],8);
     422:	48 e0       	ldi	r20, 0x08	; 8
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	b8 01       	movw	r22, r16
     428:	8d e5       	ldi	r24, 0x5D	; 93
     42a:	94 e0       	ldi	r25, 0x04	; 4
     42c:	0e 94 35 0c 	call	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>
{int count;
	int loop;
	int readoffset=0;	
	if(page>0)
	{
		for(count=0;count<page;count++)
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	e8 1a       	sub	r14, r24
     434:	f8 0a       	sbc	r15, r24
     436:	08 5f       	subi	r16, 0xF8	; 248
     438:	1f 4f       	sbci	r17, 0xFF	; 255
     43a:	f0 cf       	rjmp	.-32     	; 0x41c <_Z12SendingArrayh+0x1c>
			Serial.write(&OUTdataArray[readoffset],8);
			readoffset=readoffset+8;
		}
	}
	return 0;
}
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	08 95       	ret

0000044c <_Z13ReceivingDatav>:



byte ReceivingData(void)
{
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
	int readoffset=0;
	int loop=0;
	int page;
	byte ca=Serial.available();
     45c:	8d e5       	ldi	r24, 0x5D	; 93
     45e:	94 e0       	ldi	r25, 0x04	; 4
     460:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN7Serial_9availableEv>
     464:	ec 01       	movw	r28, r24
     466:	dd 27       	eor	r29, r29
	int recode=ca;
	if(ca>0)
     468:	88 23       	and	r24, r24
     46a:	09 f4       	brne	.+2      	; 0x46e <_Z13ReceivingDatav+0x22>
     46c:	56 c0       	rjmp	.+172    	; 0x51a <_Z13ReceivingDatav+0xce>

  float parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR);
  // float version of parseInt

  size_t readBytes( char *buffer, size_t length); // read chars from stream into buffer
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }
     46e:	48 e0       	ldi	r20, 0x08	; 8
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	68 e3       	ldi	r22, 0x38	; 56
     474:	72 e0       	ldi	r23, 0x02	; 2
     476:	8d e5       	ldi	r24, 0x5D	; 93
     478:	94 e0       	ldi	r25, 0x04	; 4
     47a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6Stream9readBytesEPcj>
	{Serial.readBytes(FPCEXcode.ByteData,8);	//must do it
		loop = FPCEXcode.ST.FunctionGroup>>4;
     47e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <FPCEXcode>
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	24 e0       	ldi	r18, 0x04	; 4
     486:	95 95       	asr	r25
     488:	87 95       	ror	r24
     48a:	2a 95       	dec	r18
     48c:	e1 f7       	brne	.-8      	; 0x486 <_Z13ReceivingDatav+0x3a>
		loop = loop & 0x7;
     48e:	87 70       	andi	r24, 0x07	; 7
     490:	99 27       	eor	r25, r25
		if(loop==2)
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	91 05       	cpc	r25, r1
     496:	89 f4       	brne	.+34     	; 0x4ba <_Z13ReceivingDatav+0x6e>
		{do	{ca=Serial.available();
     498:	8d e5       	ldi	r24, 0x5D	; 93
     49a:	94 e0       	ldi	r25, 0x04	; 4
     49c:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN7Serial_9availableEv>
			if(ca>0)
     4a0:	88 23       	and	r24, r24
     4a2:	d1 f3       	breq	.-12     	; 0x498 <_Z13ReceivingDatav+0x4c>
			{recode=recode+ca;
     4a4:	c8 0f       	add	r28, r24
     4a6:	d1 1d       	adc	r29, r1
     4a8:	48 e0       	ldi	r20, 0x08	; 8
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	60 e3       	ldi	r22, 0x30	; 48
     4ae:	72 e0       	ldi	r23, 0x02	; 2
     4b0:	8d e5       	ldi	r24, 0x5D	; 93
     4b2:	94 e0       	ldi	r25, 0x04	; 4
     4b4:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6Stream9readBytesEPcj>
     4b8:	2b c0       	rjmp	.+86     	; 0x510 <_Z13ReceivingDatav+0xc4>
				Serial.readBytes(DUEdata.ByteData,8);
				break;
			}
		}while(ca<=0);
	}
	if(loop>=4)
     4ba:	04 97       	sbiw	r24, 0x04	; 4
     4bc:	4c f1       	brlt	.+82     	; 0x510 <_Z13ReceivingDatav+0xc4>
	{page=IN_UBYTE7;
     4be:	00 91 3f 02 	lds	r16, 0x023F	; 0x80023f <FPCEXcode+0x7>
     4c2:	10 e0       	ldi	r17, 0x00	; 0
		do	{ca=Serial.available();
     4c4:	8d e5       	ldi	r24, 0x5D	; 93
     4c6:	94 e0       	ldi	r25, 0x04	; 4
     4c8:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN7Serial_9availableEv>
			if(page==0) break;
     4cc:	01 15       	cp	r16, r1
     4ce:	11 05       	cpc	r17, r1
     4d0:	59 f0       	breq	.+22     	; 0x4e8 <_Z13ReceivingDatav+0x9c>
		}while(ca<=0);
     4d2:	88 23       	and	r24, r24
     4d4:	b9 f3       	breq	.-18     	; 0x4c4 <_Z13ReceivingDatav+0x78>
		if(ca>0)
		{recode=recode+ca;
     4d6:	c8 0f       	add	r28, r24
     4d8:	d1 1d       	adc	r29, r1
     4da:	88 e4       	ldi	r24, 0x48	; 72
     4dc:	e8 2e       	mov	r14, r24
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	f8 2e       	mov	r15, r24
			for(int count=0;count<page;count++)
     4e2:	c1 2c       	mov	r12, r1
     4e4:	d1 2c       	mov	r13, r1
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <_Z13ReceivingDatav+0xa2>
	if(loop>=4)
	{page=IN_UBYTE7;
		do	{ca=Serial.available();
			if(page==0) break;
		}while(ca<=0);
		if(ca>0)
     4e8:	88 23       	and	r24, r24
     4ea:	91 f0       	breq	.+36     	; 0x510 <_Z13ReceivingDatav+0xc4>
     4ec:	f4 cf       	rjmp	.-24     	; 0x4d6 <_Z13ReceivingDatav+0x8a>
		{recode=recode+ca;
			for(int count=0;count<page;count++)
     4ee:	c0 16       	cp	r12, r16
     4f0:	d1 06       	cpc	r13, r17
     4f2:	74 f4       	brge	.+28     	; 0x510 <_Z13ReceivingDatav+0xc4>
     4f4:	48 e0       	ldi	r20, 0x08	; 8
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	b7 01       	movw	r22, r14
     4fa:	8d e5       	ldi	r24, 0x5D	; 93
     4fc:	94 e0       	ldi	r25, 0x04	; 4
     4fe:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6Stream9readBytesEPcj>
     502:	8f ef       	ldi	r24, 0xFF	; 255
     504:	c8 1a       	sub	r12, r24
     506:	d8 0a       	sbc	r13, r24
     508:	88 e0       	ldi	r24, 0x08	; 8
     50a:	e8 0e       	add	r14, r24
     50c:	f1 1c       	adc	r15, r1
     50e:	ef cf       	rjmp	.-34     	; 0x4ee <_Z13ReceivingDatav+0xa2>
			{Serial.readBytes(&INdataArray[readoffset],8);
				readoffset=readoffset+8;
			}
		}
	}
	if((FPCEXcode.ST.FunctionGroup & 0x80)!=0)
     510:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <FPCEXcode>
     514:	87 fd       	sbrc	r24, 7
	SendingData();
     516:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z11SendingDatav>
}
return recode;
}
     51a:	8c 2f       	mov	r24, r28
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	df 90       	pop	r13
     52a:	cf 90       	pop	r12
     52c:	08 95       	ret

0000052e <_ZN8SPIClass8transferEh>:
extern EXdata	FPCEXcode;
extern EXDuedata DUEdata;
extern Typecombine ESPTYPE; 
 char outbuffer[40]; 
 char intbuffer[40];
ESPCOM::ESPCOM(){};
     52e:	8e bd       	out	0x2e, r24	; 46
     530:	00 00       	nop
     532:	0d b4       	in	r0, 0x2d	; 45
     534:	07 fe       	sbrs	r0, 7
     536:	fd cf       	rjmp	.-6      	; 0x532 <_ZN8SPIClass8transferEh+0x4>
     538:	8e b5       	in	r24, 0x2e	; 46
     53a:	08 95       	ret

0000053c <_ZN6ESPCOM9BEGIN8266Ev>:
void ESPCOM::BEGIN8266()	
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	ec 01       	movw	r28, r24
	pinMode(IN_UBYTE4, OUTPUT);
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <FPCEXcode+0x4>
     548:	0e 94 cf 19 	call	0x339e	; 0x339e <pinMode>
	pin=IN_UBYTE4;
     54c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <FPCEXcode+0x4>
     550:	88 83       	st	Y, r24

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
     552:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <_ZN8SPIClass13interruptModeE>
     556:	88 23       	and	r24, r24
     558:	99 f0       	breq	.+38     	; 0x580 <_ZN6ESPCOM9BEGIN8266Ev+0x44>
      uint8_t sreg = SREG;
     55a:	2f b7       	in	r18, 0x3f	; 63
      noInterrupts();
     55c:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     55e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <_ZN8SPIClass13interruptModeE>
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	59 f4       	brne	.+22     	; 0x57c <_ZN6ESPCOM9BEGIN8266Ev+0x40>
        interruptSave = SPI_AVR_EIMSK;
     566:	8d b3       	in	r24, 0x1d	; 29
     568:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
     56c:	9d b3       	in	r25, 0x1d	; 29
     56e:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <_ZN8SPIClass13interruptMaskE>
     572:	80 95       	com	r24
     574:	89 23       	and	r24, r25
     576:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
     578:	2f bf       	out	0x3f, r18	; 63
     57a:	02 c0       	rjmp	.+4      	; 0x580 <_ZN6ESPCOM9BEGIN8266Ev+0x44>
      } else
      #endif
      {
        interruptSave = sreg;
     57c:	20 93 95 03 	sts	0x0395, r18	; 0x800395 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     580:	81 e5       	ldi	r24, 0x51	; 81
     582:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
     584:	1d bc       	out	0x2d, r1	; 45
	SPI.beginTransaction(SPISettings(1400000, MSBFIRST, SPI_MODE0));
	SPI.begin();
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
void ESPCOM::BEGIN8266()	
{
	pinMode(IN_UBYTE4, OUTPUT);
	pin=IN_UBYTE4;
	SPI.beginTransaction(SPISettings(1400000, MSBFIRST, SPI_MODE0));
	SPI.begin();
     58a:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <_ZN8SPIClass5beginEv>

0000058e <_ZN6ESPCOM10WRITE4BYTEEv>:
}

	
void ESPCOM::WRITE4BYTE()	 
{
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	8c 01       	movw	r16, r24
	digitalWrite(pin, LOW);	
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	fc 01       	movw	r30, r24
     59c:	80 81       	ld	r24, Z
     59e:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
	SPI.transfer(0x1);		//Send status
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
	SPI.transfer(IN_UBYTE4);		
     5a8:	c8 e3       	ldi	r28, 0x38	; 56
     5aa:	d2 e0       	ldi	r29, 0x02	; 2
     5ac:	8c 81       	ldd	r24, Y+4	; 0x04
     5ae:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
	SPI.transfer(IN_UBYTE5);
     5b2:	8d 81       	ldd	r24, Y+5	; 0x05
     5b4:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
	SPI.transfer(IN_UBYTE6);
     5b8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ba:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
	SPI.transfer(IN_UBYTE7);			 			
     5be:	8f 81       	ldd	r24, Y+7	; 0x07
     5c0:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
	digitalWrite(pin, HIGH);
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	f8 01       	movw	r30, r16
     5c8:	80 81       	ld	r24, Z
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
	SPI.transfer(0x1);		//Send status
	SPI.transfer(IN_UBYTE4);		
	SPI.transfer(IN_UBYTE5);
	SPI.transfer(IN_UBYTE6);
	SPI.transfer(IN_UBYTE7);			 			
	digitalWrite(pin, HIGH);
     5d2:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <digitalWrite>

000005d6 <_ZN6ESPCOM9READ4BYTEEv>:
}

void ESPCOM::READ4BYTE()
{
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	8c 01       	movw	r16, r24
	digitalWrite(pin, LOW);
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	fc 01       	movw	r30, r24
     5e4:	80 81       	ld	r24, Z
     5e6:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
	SPI.transfer(0x04);
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
	OUT_UBYTE4 = SPI.transfer(0);
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
     5f6:	c0 e4       	ldi	r28, 0x40	; 64
     5f8:	d2 e0       	ldi	r29, 0x02	; 2
     5fa:	8c 83       	std	Y+4, r24	; 0x04
	OUT_UBYTE5 = SPI.transfer(0);
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
     602:	8d 83       	std	Y+5, r24	; 0x05
	OUT_UBYTE6 = SPI.transfer(0);
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
     60a:	8e 83       	std	Y+6, r24	; 0x06
	OUT_UBYTE7 = SPI.transfer(0);	
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
     612:	8f 83       	std	Y+7, r24	; 0x07
	digitalWrite(pin, HIGH);
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	f8 01       	movw	r30, r16
     618:	80 81       	ld	r24, Z
     61a:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
	SendingData();
}
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
	OUT_UBYTE4 = SPI.transfer(0);
	OUT_UBYTE5 = SPI.transfer(0);
	OUT_UBYTE6 = SPI.transfer(0);
	OUT_UBYTE7 = SPI.transfer(0);	
	digitalWrite(pin, HIGH);
	SendingData();
     626:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_Z11SendingDatav>

0000062a <_Z9Read4bytev>:

ESPCOM esp8266com;

void Read4byte()
{
	esp8266com.READ4BYTE();
     62a:	88 e4       	ldi	r24, 0x48	; 72
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <_ZN6ESPCOM9READ4BYTEEv>

00000632 <_Z10Write4bytev>:
}

void Write4byte()
{
	esp8266com.WRITE4BYTE();
     632:	88 e4       	ldi	r24, 0x48	; 72
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	0c 94 c7 02 	jmp	0x58e	; 0x58e <_ZN6ESPCOM10WRITE4BYTEEv>

0000063a <_Z9Begin8266v>:
	esp8266com.WRITE32BYTE();
}

void Begin8266()
{
	esp8266com.BEGIN8266();
     63a:	88 e4       	ldi	r24, 0x48	; 72
     63c:	93 e0       	ldi	r25, 0x03	; 3
     63e:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_ZN6ESPCOM9BEGIN8266Ev>

00000642 <_ZN6ESPCOM11WRITE32BYTEEv>:
	digitalWrite(pin, HIGH);
	SendingData();
}

void ESPCOM::WRITE32BYTE()	 
{byte ca;
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	8c 01       	movw	r16, r24
do	{ca=Serial.available();
     64c:	8d e5       	ldi	r24, 0x5D	; 93
     64e:	94 e0       	ldi	r25, 0x04	; 4
     650:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN7Serial_9availableEv>
		if(ca>0)
     654:	88 23       	and	r24, r24
     656:	d1 f3       	breq	.-12     	; 0x64c <_ZN6ESPCOM11WRITE32BYTEEv+0xa>
     658:	40 e2       	ldi	r20, 0x20	; 32
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	68 e4       	ldi	r22, 0x48	; 72
     65e:	72 e0       	ldi	r23, 0x02	; 2
     660:	8d e5       	ldi	r24, 0x5D	; 93
     662:	94 e0       	ldi	r25, 0x04	; 4
     664:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6Stream9readBytesEPcj>
		{Serial.readBytes(INdataArray,32);
		break;
		}
	}while(ca<=0);
	digitalWrite(pin, LOW);
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	f8 01       	movw	r30, r16
     66c:	80 81       	ld	r24, Z
     66e:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
	SPI.transfer(0x02);
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
	SPI.transfer(0x00);	
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
     67e:	c8 e4       	ldi	r28, 0x48	; 72
     680:	d2 e0       	ldi	r29, 0x02	; 2
	for (int g = 0; g < 32; g++)
		{
		SPI.transfer(INdataArray[g]);
     682:	89 91       	ld	r24, Y+
     684:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
		}
	}while(ca<=0);
	digitalWrite(pin, LOW);
	SPI.transfer(0x02);
	SPI.transfer(0x00);	
	for (int g = 0; g < 32; g++)
     688:	f2 e0       	ldi	r31, 0x02	; 2
     68a:	c8 36       	cpi	r28, 0x68	; 104
     68c:	df 07       	cpc	r29, r31
     68e:	c9 f7       	brne	.-14     	; 0x682 <_ZN6ESPCOM11WRITE32BYTEEv+0x40>
		{
		SPI.transfer(INdataArray[g]);
		}
	digitalWrite(pin, HIGH);
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	f8 01       	movw	r30, r16
     694:	80 81       	ld	r24, Z
}	
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
	SPI.transfer(0x00);	
	for (int g = 0; g < 32; g++)
		{
		SPI.transfer(INdataArray[g]);
		}
	digitalWrite(pin, HIGH);
     69e:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <digitalWrite>

000006a2 <_Z11Write32bytev>:
	esp8266com.READ32BYTE();
}

void Write32byte()
{
	esp8266com.WRITE32BYTE();
     6a2:	88 e4       	ldi	r24, 0x48	; 72
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	0c 94 21 03 	jmp	0x642	; 0x642 <_ZN6ESPCOM11WRITE32BYTEEv>

000006aa <_ZN6ESPCOM10READ32BYTEEv>:
		}
	digitalWrite(pin, HIGH);
}	

void ESPCOM::READ32BYTE()
{	
     6aa:	cf 92       	push	r12
     6ac:	df 92       	push	r13
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	8c 01       	movw	r16, r24
	digitalWrite(pin, LOW);
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	fc 01       	movw	r30, r24
     6c0:	80 81       	ld	r24, Z
     6c2:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
	SPI.transfer(0x03);
     6c6:	83 e0       	ldi	r24, 0x03	; 3
     6c8:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
	SPI.transfer(0x00);
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
     6d2:	c9 e4       	ldi	r28, 0x49	; 73
     6d4:	d3 e0       	ldi	r29, 0x03	; 3
	for (int gg = 0; gg < 32; gg++)
		{
		intbuffer[gg] = SPI.transfer(0);
		ESPTYPE.ULONG=10;
     6d6:	8a e0       	ldi	r24, 0x0A	; 10
     6d8:	c8 2e       	mov	r12, r24
     6da:	d1 2c       	mov	r13, r1
     6dc:	e1 2c       	mov	r14, r1
     6de:	f1 2c       	mov	r15, r1
	digitalWrite(pin, LOW);
	SPI.transfer(0x03);
	SPI.transfer(0x00);
	for (int gg = 0; gg < 32; gg++)
		{
		intbuffer[gg] = SPI.transfer(0);
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN8SPIClass8transferEh>
     6e6:	89 93       	st	Y+, r24
		ESPTYPE.ULONG=10;
     6e8:	c0 92 2c 02 	sts	0x022C, r12	; 0x80022c <__data_end>
     6ec:	d0 92 2d 02 	sts	0x022D, r13	; 0x80022d <__data_end+0x1>
     6f0:	e0 92 2e 02 	sts	0x022E, r14	; 0x80022e <__data_end+0x2>
     6f4:	f0 92 2f 02 	sts	0x022F, r15	; 0x80022f <__data_end+0x3>
void ESPCOM::READ32BYTE()
{	
	digitalWrite(pin, LOW);
	SPI.transfer(0x03);
	SPI.transfer(0x00);
	for (int gg = 0; gg < 32; gg++)
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	c9 36       	cpi	r28, 0x69	; 105
     6fc:	df 07       	cpc	r29, r31
     6fe:	81 f7       	brne	.-32     	; 0x6e0 <_ZN6ESPCOM10READ32BYTEEv+0x36>
		{
		intbuffer[gg] = SPI.transfer(0);
		ESPTYPE.ULONG=10;
		}
	digitalWrite(pin, HIGH);
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	f8 01       	movw	r30, r16
     704:	80 81       	ld	r24, Z
     706:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     70a:	40 e2       	ldi	r20, 0x20	; 32
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	69 e4       	ldi	r22, 0x49	; 73
     710:	73 e0       	ldi	r23, 0x03	; 3
     712:	8d e5       	ldi	r24, 0x5D	; 93
     714:	94 e0       	ldi	r25, 0x04	; 4
	Serial.write(intbuffer,32);
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

0000072a <_Z10Read32bytev>:
	esp8266com.WRITE4BYTE();
}

void Read32byte()
{
	esp8266com.READ32BYTE();
     72a:	88 e4       	ldi	r24, 0x48	; 72
     72c:	93 e0       	ldi	r25, 0x03	; 3
     72e:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <_ZN6ESPCOM10READ32BYTEEv>

00000732 <_Z7PinModev>:



void PinMode(void)
{
	pinMode(IN_UBYTE2,IN_UBYTE3);
     732:	e8 e3       	ldi	r30, 0x38	; 56
     734:	f2 e0       	ldi	r31, 0x02	; 2
     736:	63 81       	ldd	r22, Z+3	; 0x03
     738:	82 81       	ldd	r24, Z+2	; 0x02
     73a:	0c 94 cf 19 	jmp	0x339e	; 0x339e <pinMode>

0000073e <_Z6IOReadv>:
}
void IORead(void)
{	
	OUT_UBYTE2 = digitalRead(IN_UBYTE2);	
     73e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <FPCEXcode+0x2>
     742:	0e 94 3a 1a 	call	0x3474	; 0x3474 <digitalRead>
     746:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <TPCEXcode+0x2>
	SendingData();
     74a:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_Z11SendingDatav>

0000074e <_Z7IOWritev>:
}
void IOWrite(void)
{
	digitalWrite(IN_UBYTE4,IN_UBYTE5);
     74e:	e8 e3       	ldi	r30, 0x38	; 56
     750:	f2 e0       	ldi	r31, 0x02	; 2
     752:	65 81       	ldd	r22, Z+5	; 0x05
     754:	84 81       	ldd	r24, Z+4	; 0x04
     756:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <digitalWrite>

0000075a <_Z10AnalogReadv>:
void AnalogRead(void)
{	
#ifdef esp8266
	analogRead(A0);
#else
	OUT_UBYTE2 = analogRead(IN_UBYTE2);
     75a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <FPCEXcode+0x2>
     75e:	0e 94 c9 18 	call	0x3192	; 0x3192 <analogRead>
     762:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <TPCEXcode+0x2>
#endif
	SendingData();
     766:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_Z11SendingDatav>

0000076a <_Z11AnalogWritev>:
}

void AnalogWrite(void)
{
	analogWrite(IN_UBYTE2,IN_UBYTE3);	
     76a:	e8 e3       	ldi	r30, 0x38	; 56
     76c:	f2 e0       	ldi	r31, 0x02	; 2
     76e:	63 81       	ldd	r22, Z+3	; 0x03
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	82 81       	ldd	r24, Z+2	; 0x02
     774:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <analogWrite>

00000778 <_Z6Randomv>:
}

void Random(void)
{
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
	DUEdata.ST.COMB[0].ULONG=random(OUT_DUE_ULONG2,OUT_DUE_ULONG1);	
     77c:	c0 e3       	ldi	r28, 0x30	; 48
     77e:	d2 e0       	ldi	r29, 0x02	; 2
     780:	28 81       	ld	r18, Y
     782:	39 81       	ldd	r19, Y+1	; 0x01
     784:	4a 81       	ldd	r20, Y+2	; 0x02
     786:	5b 81       	ldd	r21, Y+3	; 0x03
     788:	6c 81       	ldd	r22, Y+4	; 0x04
     78a:	7d 81       	ldd	r23, Y+5	; 0x05
     78c:	8e 81       	ldd	r24, Y+6	; 0x06
     78e:	9f 81       	ldd	r25, Y+7	; 0x07
     790:	0e 94 a8 1b 	call	0x3750	; 0x3750 <_Z6randomll>
     794:	68 83       	st	Y, r22
     796:	79 83       	std	Y+1, r23	; 0x01
     798:	8a 83       	std	Y+2, r24	; 0x02
     79a:	9b 83       	std	Y+3, r25	; 0x03
	SendingData();
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
}

void Random(void)
{
	DUEdata.ST.COMB[0].ULONG=random(OUT_DUE_ULONG2,OUT_DUE_ULONG1);	
	SendingData();
     7a0:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_Z11SendingDatav>

000007a4 <_Z11Handshakingv>:
}

void Handshaking(void)
{
	OUT_ULONG=15542933;	
     7a4:	85 e9       	ldi	r24, 0x95	; 149
     7a6:	9a e2       	ldi	r25, 0x2A	; 42
     7a8:	ad ee       	ldi	r26, 0xED	; 237
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
     7b0:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <TPCEXcode+0x5>
     7b4:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <TPCEXcode+0x6>
     7b8:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <TPCEXcode+0x7>
	SendingData();
     7bc:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_Z11SendingDatav>

000007c0 <_Z10Int_Actionv>:
byte		InterruptStatus;
byte		InterruptEnable;

void Int_Action(void)
{
	if(InterruptEnable==1)
     7c0:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <InterruptEnable>
     7c4:	81 30       	cpi	r24, 0x01	; 1
     7c6:	29 f4       	brne	.+10     	; 0x7d2 <_Z10Int_Actionv+0x12>
		OUT_INTPT_Status=OUT_INTPT_Status|1;
     7c8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <TPCEXcode+0x1>
     7cc:	81 60       	ori	r24, 0x01	; 1
     7ce:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <TPCEXcode+0x1>
     7d2:	08 95       	ret

000007d4 <_Z12NoInterruptsv>:
}

void NoInterrupts(void)
{
	OUT_INTPT_Status=0;
     7d4:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <TPCEXcode+0x1>
	InterruptEnable=0;
     7d8:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <InterruptEnable>
	noInterrupts();
     7dc:	f8 94       	cli
     7de:	08 95       	ret

000007e0 <_Z9IntEnablev>:
}

void IntEnable(void)
{
	OUT_INTPT_Status=0;
     7e0:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <TPCEXcode+0x1>
	InterruptEnable=1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <InterruptEnable>
	interrupts();
     7ea:	78 94       	sei
     7ec:	08 95       	ret

000007ee <_Z15AttachInterruptv>:
}

void AttachInterrupt(void)
{
	OUT_INTPT_Status=0;
     7ee:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <TPCEXcode+0x1>
	attachInterrupt(IN_UBYTE2,Int_Action,IN_UBYTE3);
     7f2:	e8 e3       	ldi	r30, 0x38	; 56
     7f4:	f2 e0       	ldi	r31, 0x02	; 2
     7f6:	43 81       	ldd	r20, Z+3	; 0x03
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	60 ee       	ldi	r22, 0xE0	; 224
     7fc:	73 e0       	ldi	r23, 0x03	; 3
     7fe:	82 81       	ldd	r24, Z+2	; 0x02
     800:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <attachInterrupt>

00000804 <_Z11EEPROMWRITEv>:
	Serial.write(&TPCEXcode.ByteData[0],8);
}

void EEPROMWRITE(void)
{
	EEPROM.write(IN_UINT1,IN_UBYTE2);
     804:	e8 e3       	ldi	r30, 0x38	; 56
     806:	f2 e0       	ldi	r31, 0x02	; 2
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     808:	62 81       	ldd	r22, Z+2	; 0x02
     80a:	84 81       	ldd	r24, Z+4	; 0x04
     80c:	95 81       	ldd	r25, Z+5	; 0x05
     80e:	0c 94 5d 22 	jmp	0x44ba	; 0x44ba <eeprom_write_byte>

00000812 <_Z13REGISTERWRITEv>:




void REGISTERWRITE(void)
{	byte aa=IN_UBYTE5;
     812:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <FPCEXcode+0x5>
//DDRB = 0;
//PORTB = 0x55;
	if(aa==0x10)
     816:	80 31       	cpi	r24, 0x10	; 16
     818:	39 f4       	brne	.+14     	; 0x828 <_Z13REGISTERWRITEv+0x16>
		_SFR_IO8(IN_UBYTE4)=IN_UBYTE2;
     81a:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <FPCEXcode+0x4>
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <FPCEXcode+0x2>
     824:	80 a3       	std	Z+32, r24	; 0x20
     826:	08 95       	ret
	if(aa==0x20)
     828:	80 32       	cpi	r24, 0x20	; 32
     82a:	49 f4       	brne	.+18     	; 0x83e <_Z13REGISTERWRITEv+0x2c>
		_SFR_IO16(IN_UBYTE4)=IN_UBYTE2;
     82c:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <FPCEXcode+0x4>
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <FPCEXcode+0x2>
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	91 a3       	std	Z+33, r25	; 0x21
     83a:	80 a3       	std	Z+32, r24	; 0x20
     83c:	08 95       	ret
	if(aa==0x30)
     83e:	80 33       	cpi	r24, 0x30	; 48
     840:	39 f4       	brne	.+14     	; 0x850 <_Z13REGISTERWRITEv+0x3e>
		_SFR_MEM8(IN_UBYTE4)=IN_UBYTE2;
     842:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <FPCEXcode+0x4>
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <FPCEXcode+0x2>
     84c:	80 83       	st	Z, r24
     84e:	08 95       	ret
	if(aa==0x40)
     850:	80 34       	cpi	r24, 0x40	; 64
     852:	41 f4       	brne	.+16     	; 0x864 <_Z13REGISTERWRITEv+0x52>
		_SFR_MEM16(IN_UBYTE4)=IN_UBYTE2;	
     854:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <FPCEXcode+0x4>
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <FPCEXcode+0x2>
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	91 83       	std	Z+1, r25	; 0x01
     862:	80 83       	st	Z, r24
     864:	08 95       	ret

00000866 <_Z10EEPROMREADv>:

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     866:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <FPCEXcode+0x4>
     86a:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <FPCEXcode+0x5>
     86e:	0e 94 55 22 	call	0x44aa	; 0x44aa <eeprom_read_byte>



void EEPROMREAD(void)
{
	OUT_UBYTE2=EEPROM.read(IN_UINT1);
     872:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <TPCEXcode+0x2>
	Serial.write(&TPCEXcode.ByteData[0],8);
     876:	48 e0       	ldi	r20, 0x08	; 8
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	60 e4       	ldi	r22, 0x40	; 64
     87c:	72 e0       	ldi	r23, 0x02	; 2
     87e:	8d e5       	ldi	r24, 0x5D	; 93
     880:	94 e0       	ldi	r25, 0x04	; 4
     882:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000886 <_Z12REGISTERREADv>:
	if(aa==0x40)
		_SFR_MEM16(IN_UBYTE4)=IN_UBYTE2;	
}

void REGISTERREAD(void)
{	byte aa=IN_UBYTE5;
     886:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <FPCEXcode+0x5>
	if(aa==0x10)
     88a:	80 31       	cpi	r24, 0x10	; 16
     88c:	29 f4       	brne	.+10     	; 0x898 <_Z12REGISTERREADv+0x12>
		OUT_UBYTE2=_SFR_IO8(IN_UBYTE4);
     88e:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <FPCEXcode+0x4>
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 a1       	ldd	r24, Z+32	; 0x20
     896:	16 c0       	rjmp	.+44     	; 0x8c4 <_Z12REGISTERREADv+0x3e>
	if(aa==0x20)
     898:	80 32       	cpi	r24, 0x20	; 32
     89a:	31 f4       	brne	.+12     	; 0x8a8 <_Z12REGISTERREADv+0x22>
		OUT_UBYTE2=_SFR_IO16(IN_UBYTE4);
     89c:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <FPCEXcode+0x4>
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 a1       	ldd	r24, Z+32	; 0x20
     8a4:	91 a1       	ldd	r25, Z+33	; 0x21
     8a6:	0e c0       	rjmp	.+28     	; 0x8c4 <_Z12REGISTERREADv+0x3e>
	if(aa==0x30)
     8a8:	80 33       	cpi	r24, 0x30	; 48
     8aa:	29 f4       	brne	.+10     	; 0x8b6 <_Z12REGISTERREADv+0x30>
		OUT_UBYTE2=_SFR_MEM8(IN_UBYTE4);
     8ac:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <FPCEXcode+0x4>
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <_Z12REGISTERREADv+0x3e>
	if(aa==0x40)
     8b6:	80 34       	cpi	r24, 0x40	; 64
     8b8:	39 f4       	brne	.+14     	; 0x8c8 <_Z12REGISTERREADv+0x42>
		OUT_UBYTE2=_SFR_MEM16(IN_UBYTE4);
     8ba:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <FPCEXcode+0x4>
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <TPCEXcode+0x2>
	Serial.write(&TPCEXcode.ByteData[0],8);
     8c8:	48 e0       	ldi	r20, 0x08	; 8
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	60 e4       	ldi	r22, 0x40	; 64
     8ce:	72 e0       	ldi	r23, 0x02	; 2
     8d0:	8d e5       	ldi	r24, 0x5D	; 93
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

000008d8 <_Z7S_BEGINv>:
}


void S_BEGIN(void)
{	
if(IN_UBYTE3 ==1)  DebugSerial.begin(IN_ULONG);
     8d8:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	61 f4       	brne	.+24     	; 0x8f8 <_Z7S_BEGINv+0x20>
     8e0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <FPCEXcode+0x4>
     8e4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <FPCEXcode+0x5>
     8e8:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <FPCEXcode+0x6>
     8ec:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <FPCEXcode+0x7>
     8f0:	84 e7       	ldi	r24, 0x74	; 116
     8f2:	93 e0       	ldi	r25, 0x03	; 3
     8f4:	0c 94 a9 1d 	jmp	0x3b52	; 0x3b52 <_ZN14SoftwareSerial5beginEl>
     8f8:	08 95       	ret

000008fa <_Z5S_ENDv>:
if(IN_UBYTE3 ==0)	DebugSerial.begin(IN_ULONG,(unsigned char)IN_UBYTE4);
#endif
}

void S_END(void)
{DebugSerial.end();
     8fa:	84 e7       	ldi	r24, 0x74	; 116
     8fc:	93 e0       	ldi	r25, 0x03	; 3
     8fe:	0c 94 52 1e 	jmp	0x3ca4	; 0x3ca4 <_ZN14SoftwareSerial3endEv>

00000902 <_Z10S_READBYTEv>:
{
OUT_UBYTE4=DebugSerial.read();
SendingData();
}
void S_READBYTE(void)
{int bytecount;
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <FPCEXcode+0x4>
     90a:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <FPCEXcode+0x5>
     90e:	68 ec       	ldi	r22, 0xC8	; 200
     910:	72 e0       	ldi	r23, 0x02	; 2
     912:	84 e7       	ldi	r24, 0x74	; 116
     914:	93 e0       	ldi	r25, 0x03	; 3
     916:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6Stream9readBytesEPcj>
OUT_UBYTE4 = DebugSerial.readBytes(OUTdataArray,IN_UINT1);
     91a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
bytecount=OUT_UBYTE4;
bytecount=((bytecount-1)/8)+1;
     91e:	99 27       	eor	r25, r25
     920:	9c 01       	movw	r18, r24
     922:	21 50       	subi	r18, 0x01	; 1
     924:	31 09       	sbc	r19, r1
     926:	37 ff       	sbrs	r19, 7
     928:	02 c0       	rjmp	.+4      	; 0x92e <_Z10S_READBYTEv+0x2c>
     92a:	29 5f       	subi	r18, 0xF9	; 249
     92c:	3f 4f       	sbci	r19, 0xFF	; 255
     92e:	83 e0       	ldi	r24, 0x03	; 3
     930:	35 95       	asr	r19
     932:	27 95       	ror	r18
     934:	8a 95       	dec	r24
     936:	e1 f7       	brne	.-8      	; 0x930 <_Z10S_READBYTEv+0x2e>
     938:	e9 01       	movw	r28, r18
     93a:	21 96       	adiw	r28, 0x01	; 1
testbyte=bytecount;
     93c:	d0 93 73 03 	sts	0x0373, r29	; 0x800373 <testbyte+0x1>
     940:	c0 93 72 03 	sts	0x0372, r28	; 0x800372 <testbyte>
SendingData();
     944:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z11SendingDatav>
SendingArray(bytecount);
     948:	8c 2f       	mov	r24, r28
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
OUT_UBYTE4 = DebugSerial.readBytes(OUTdataArray,IN_UINT1);
bytecount=OUT_UBYTE4;
bytecount=((bytecount-1)/8)+1;
testbyte=bytecount;
SendingData();
SendingArray(bytecount);
     94e:	0c 94 00 02 	jmp	0x400	; 0x400 <_Z12SendingArrayh>

00000952 <_GLOBAL__sub_I_MySerial>:
extern EXdata		TPCEXcode;

#ifdef UNO
#include "..\..\..\ArduinoSketch2\ArduinoCore\include\libraries\SoftwareSerial\src\SoftwareSerial.h"
//#include "SoftwareSerial.h"
SoftwareSerial MySerial(2, 3); // RX, TX
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	43 e0       	ldi	r20, 0x03	; 3
     956:	62 e0       	ldi	r22, 0x02	; 2
     958:	84 e7       	ldi	r24, 0x74	; 116
     95a:	93 e0       	ldi	r25, 0x03	; 3
     95c:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <_ZN14SoftwareSerialC1Ehhb>

00000960 <_GLOBAL__sub_D_MySerial>:
     960:	84 e7       	ldi	r24, 0x74	; 116
     962:	93 e0       	ldi	r25, 0x03	; 3
     964:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <_ZN14SoftwareSerialD1Ev>

00000968 <_Z19S_AVAILABLEFORWRITEv>:
	OUT_UBYTE4=DebugSerial.available();	
	DebugSerial.write(&TPCEXcode.ByteData[0],8);
}
void S_AVAILABLEFORWRITE(void)
{
	OUT_UBYTE4=DebugSerial.availableForWrite();	
     968:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <TPCEXcode+0x4>
	DebugSerial.write(&TPCEXcode.ByteData[0],8);
     96c:	48 e0       	ldi	r20, 0x08	; 8
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	60 e4       	ldi	r22, 0x40	; 64
     972:	72 e0       	ldi	r23, 0x02	; 2
     974:	84 e7       	ldi	r24, 0x74	; 116
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_ZN5Print5writeEPKhj>

0000097c <_Z7S_WRITEv>:
SendingArray(bytecount);
}

void S_WRITE(void)
{
OUT_UBYTE4=DebugSerial.write(INdataArray,IN_UINT1);
     97c:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <FPCEXcode+0x4>
     980:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <FPCEXcode+0x5>
     984:	68 e4       	ldi	r22, 0x48	; 72
     986:	72 e0       	ldi	r23, 0x02	; 2
     988:	84 e7       	ldi	r24, 0x74	; 116
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_ZN5Print5writeEPKhj>
     990:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
SendingData();
     994:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_Z11SendingDatav>

00000998 <_Z11S_AVAILABLEv>:
void S_IF(void)
{
}
void S_AVAILABLE(void)
{
	OUT_UBYTE4=DebugSerial.available();	
     998:	84 e7       	ldi	r24, 0x74	; 116
     99a:	93 e0       	ldi	r25, 0x03	; 3
     99c:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <_ZN14SoftwareSerial9availableEv>
     9a0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
	DebugSerial.write(&TPCEXcode.ByteData[0],8);
     9a4:	48 e0       	ldi	r20, 0x08	; 8
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e4       	ldi	r22, 0x40	; 64
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	84 e7       	ldi	r24, 0x74	; 116
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_ZN5Print5writeEPKhj>

000009b4 <_Z7S_FLUSHv>:
}


void S_FLUSH(void)
{
DebugSerial.flush();
     9b4:	84 e7       	ldi	r24, 0x74	; 116
     9b6:	93 e0       	ldi	r25, 0x03	; 3
     9b8:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <_ZN14SoftwareSerial5flushEv>

000009bc <_Z6S_PEEKv>:
}

void S_PEEK(void)
{
OUT_UBYTE4=DebugSerial.peek();
     9bc:	84 e7       	ldi	r24, 0x74	; 116
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN14SoftwareSerial4peekEv>
     9c4:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
SendingData();
     9c8:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_Z11SendingDatav>

000009cc <_Z7S_PRINTv>:
}
void S_PRINT(void)	//println and write
{
byte type=IN_UBYTE3 & 0x1f;
     9cc:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     9d0:	28 2f       	mov	r18, r24
     9d2:	2f 71       	andi	r18, 0x1F	; 31
byte mode=IN_UBYTE3>>5;
     9d4:	82 95       	swap	r24
     9d6:	86 95       	lsr	r24
     9d8:	87 70       	andi	r24, 0x07	; 7
if(mode==1)		OUT_UBYTE4=DebugSerial.print(IN_ULONG,type);
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <_Z7S_PRINTv+0x16>
if(mode==2)		OUT_UBYTE4=DebugSerial.print(IN_ULONG,type);	//printer character
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	71 f4       	brne	.+28     	; 0x9fe <_Z7S_PRINTv+0x32>
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <FPCEXcode+0x4>
     9e8:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <FPCEXcode+0x5>
     9ec:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <FPCEXcode+0x6>
     9f0:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <FPCEXcode+0x7>
     9f4:	84 e7       	ldi	r24, 0x74	; 116
     9f6:	93 e0       	ldi	r25, 0x03	; 3
     9f8:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN5Print5printEmi>
     9fc:	28 c0       	rjmp	.+80     	; 0xa4e <_Z7S_PRINTv+0x82>
if(mode==3)		OUT_UBYTE4=DebugSerial.println(IN_ULONG,type);
     9fe:	83 30       	cpi	r24, 0x03	; 3
     a00:	71 f4       	brne	.+28     	; 0xa1e <_Z7S_PRINTv+0x52>
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <FPCEXcode+0x4>
     a08:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <FPCEXcode+0x5>
     a0c:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <FPCEXcode+0x6>
     a10:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <FPCEXcode+0x7>
     a14:	84 e7       	ldi	r24, 0x74	; 116
     a16:	93 e0       	ldi	r25, 0x03	; 3
     a18:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN5Print7printlnEmi>
     a1c:	18 c0       	rjmp	.+48     	; 0xa4e <_Z7S_PRINTv+0x82>
if(mode==4)		OUT_UBYTE4=DebugSerial.print(IN_FLOAT,type);
     a1e:	84 30       	cpi	r24, 0x04	; 4
     a20:	71 f4       	brne	.+28     	; 0xa3e <_Z7S_PRINTv+0x72>
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <FPCEXcode+0x4>
     a28:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <FPCEXcode+0x5>
     a2c:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <FPCEXcode+0x6>
     a30:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <FPCEXcode+0x7>
     a34:	84 e7       	ldi	r24, 0x74	; 116
     a36:	93 e0       	ldi	r25, 0x03	; 3
     a38:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_ZN5Print5printEdi>
     a3c:	08 c0       	rjmp	.+16     	; 0xa4e <_Z7S_PRINTv+0x82>
//if(mode==5)		OUT_UBYTE1=Serial1.println(IN_ULONG,type);
if(mode==6)		OUT_UBYTE4=DebugSerial.write(IN_UBYTE4);
     a3e:	86 30       	cpi	r24, 0x06	; 6
     a40:	41 f4       	brne	.+16     	; 0xa52 <_Z7S_PRINTv+0x86>
     a42:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <FPCEXcode+0x4>
     a46:	84 e7       	ldi	r24, 0x74	; 116
     a48:	93 e0       	ldi	r25, 0x03	; 3
     a4a:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <_ZN14SoftwareSerial5writeEh>
     a4e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
SendingData();
     a52:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_Z11SendingDatav>

00000a56 <_Z6S_READv>:
}

void S_READ(void)
{
OUT_UBYTE4=DebugSerial.read();
     a56:	84 e7       	ldi	r24, 0x74	; 116
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	0e 94 ca 1b 	call	0x3794	; 0x3794 <_ZN14SoftwareSerial4readEv>
     a5e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
SendingData();
     a62:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_Z11SendingDatav>

00000a66 <setup>:



//int bb,tt;
void setup()
{Serial.begin(BAUD);
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	52 ec       	ldi	r21, 0xC2	; 194
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	8d e5       	ldi	r24, 0x5D	; 93
     a70:	94 e0       	ldi	r25, 0x04	; 4
     a72:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <_ZN7Serial_5beginEm>

00000a76 <loop>:



void loop()
{
byte swcode=ReceivingData();
     a76:	0e 94 26 02 	call	0x44c	; 0x44c <_Z13ReceivingDatav>
//if(InterruptEnable==1)
//NoInterrupts();
//interrupts();
if(swcode>0)//>=8
     a7a:	88 23       	and	r24, r24
     a7c:	99 f0       	breq	.+38     	; 0xaa4 <loop+0x2e>
	{	
	my_fun_pointer[low4Bit(FPCEXcode.ST.FunctionGroup)][FPCEXcode.ST.FunctionNo]();
     a7e:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <FPCEXcode>
     a82:	ef 70       	andi	r30, 0x0F	; 15
     a84:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <FPCEXcode+0x1>
     a88:	9e e0       	ldi	r25, 0x0E	; 14
     a8a:	e9 9f       	mul	r30, r25
     a8c:	f0 01       	movw	r30, r0
     a8e:	11 24       	eor	r1, r1
     a90:	e8 0f       	add	r30, r24
     a92:	f1 1d       	adc	r31, r1
     a94:	ee 0f       	add	r30, r30
     a96:	ff 1f       	adc	r31, r31
     a98:	ec 5f       	subi	r30, 0xFC	; 252
     a9a:	fe 4f       	sbci	r31, 0xFE	; 254
     a9c:	01 90       	ld	r0, Z+
     a9e:	f0 81       	ld	r31, Z
     aa0:	e0 2d       	mov	r30, r0
     aa2:	09 94       	ijmp
     aa4:	08 95       	ret

00000aa6 <_Z18S_beginTransactionv>:


void SlaveTransfer(void)
{
SPDR = IN_UBYTE3;
OUT_UBYTE4 = SPDR;
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	c0 90 3c 02 	lds	r12, 0x023C	; 0x80023c <FPCEXcode+0x4>
     ab2:	d0 90 3d 02 	lds	r13, 0x023D	; 0x80023d <FPCEXcode+0x5>
     ab6:	e0 90 3e 02 	lds	r14, 0x023E	; 0x80023e <FPCEXcode+0x6>
     aba:	f0 90 3f 02 	lds	r15, 0x023F	; 0x80023f <FPCEXcode+0x7>
     abe:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <FPCEXcode+0x3>
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	52 e1       	ldi	r21, 0x12	; 18
     ac6:	6a e7       	ldi	r22, 0x7A	; 122
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	c4 16       	cp	r12, r20
     ace:	d5 06       	cpc	r13, r21
     ad0:	e6 06       	cpc	r14, r22
     ad2:	f7 06       	cpc	r15, r23
     ad4:	40 f4       	brcc	.+16     	; 0xae6 <_Z18S_beginTransactionv+0x40>
     ad6:	76 95       	lsr	r23
     ad8:	67 95       	ror	r22
     ada:	57 95       	ror	r21
     adc:	47 95       	ror	r20
     ade:	9f 5f       	subi	r25, 0xFF	; 255
     ae0:	96 30       	cpi	r25, 0x06	; 6
     ae2:	a1 f7       	brne	.-24     	; 0xacc <_Z18S_beginTransactionv+0x26>
     ae4:	97 e0       	ldi	r25, 0x07	; 7
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	89 27       	eor	r24, r25
     aea:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <FPCEXcode+0x2>
     aee:	99 23       	and	r25, r25
     af0:	11 f0       	breq	.+4      	; 0xaf6 <_Z18S_beginTransactionv+0x50>
     af2:	30 e5       	ldi	r19, 0x50	; 80
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <_Z18S_beginTransactionv+0x52>
     af6:	30 e7       	ldi	r19, 0x70	; 112
     af8:	2c 70       	andi	r18, 0x0C	; 12
     afa:	98 2f       	mov	r25, r24
     afc:	96 95       	lsr	r25
     afe:	92 2b       	or	r25, r18
     b00:	93 2b       	or	r25, r19
     b02:	81 70       	andi	r24, 0x01	; 1
     b04:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <_ZN8SPIClass13interruptModeE>
     b08:	22 23       	and	r18, r18
     b0a:	99 f0       	breq	.+38     	; 0xb32 <__stack+0x33>
     b0c:	4f b7       	in	r20, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <_ZN8SPIClass13interruptModeE>
     b14:	21 30       	cpi	r18, 0x01	; 1
     b16:	59 f4       	brne	.+22     	; 0xb2e <__stack+0x2f>
     b18:	2d b3       	in	r18, 0x1d	; 29
     b1a:	20 93 95 03 	sts	0x0395, r18	; 0x800395 <_ZN8SPIClass13interruptSaveE>
     b1e:	3d b3       	in	r19, 0x1d	; 29
     b20:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <_ZN8SPIClass13interruptMaskE>
     b24:	20 95       	com	r18
     b26:	23 23       	and	r18, r19
     b28:	2d bb       	out	0x1d, r18	; 29
     b2a:	4f bf       	out	0x3f, r20	; 63
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <__stack+0x33>
     b2e:	40 93 95 03 	sts	0x0395, r20	; 0x800395 <_ZN8SPIClass13interruptSaveE>
     b32:	9c bd       	out	0x2c, r25	; 44
     b34:	8d bd       	out	0x2d, r24	; 45
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	08 95       	ret

00000b40 <_Z13S_transferbufv>:
     b40:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <FPCEXcode+0x4>
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	00 97       	sbiw	r24, 0x00	; 0
     b48:	c9 f0       	breq	.+50     	; 0xb7c <_Z13S_transferbufv+0x3c>
     b4a:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <INdataArray>
     b4e:	2e bd       	out	0x2e, r18	; 46
     b50:	e8 e4       	ldi	r30, 0x48	; 72
     b52:	f2 e0       	ldi	r31, 0x02	; 2
     b54:	9c 01       	movw	r18, r24
     b56:	21 50       	subi	r18, 0x01	; 1
     b58:	31 09       	sbc	r19, r1
     b5a:	41 f0       	breq	.+16     	; 0xb6c <_Z13S_transferbufv+0x2c>
     b5c:	51 81       	ldd	r21, Z+1	; 0x01
     b5e:	0d b4       	in	r0, 0x2d	; 45
     b60:	07 fe       	sbrs	r0, 7
     b62:	fd cf       	rjmp	.-6      	; 0xb5e <_Z13S_transferbufv+0x1e>
     b64:	4e b5       	in	r20, 0x2e	; 46
     b66:	5e bd       	out	0x2e, r21	; 46
     b68:	41 93       	st	Z+, r20
     b6a:	f5 cf       	rjmp	.-22     	; 0xb56 <_Z13S_transferbufv+0x16>
     b6c:	fc 01       	movw	r30, r24
     b6e:	e9 5b       	subi	r30, 0xB9	; 185
     b70:	fd 4f       	sbci	r31, 0xFD	; 253
     b72:	0d b4       	in	r0, 0x2d	; 45
     b74:	07 fe       	sbrs	r0, 7
     b76:	fd cf       	rjmp	.-6      	; 0xb72 <_Z13S_transferbufv+0x32>
     b78:	2e b5       	in	r18, 0x2e	; 46
     b7a:	20 83       	st	Z, r18
     b7c:	08 95       	ret

00000b7e <_Z16S_endTransactionv>:
     b7e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <_ZN8SPIClass13interruptModeE>
     b82:	88 23       	and	r24, r24
     b84:	61 f0       	breq	.+24     	; 0xb9e <_Z16S_endTransactionv+0x20>
     b86:	9f b7       	in	r25, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <_ZN8SPIClass13interruptModeE>
     b8e:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <_ZN8SPIClass13interruptSaveE>
     b92:	21 30       	cpi	r18, 0x01	; 1
     b94:	19 f4       	brne	.+6      	; 0xb9c <_Z16S_endTransactionv+0x1e>
     b96:	8d bb       	out	0x1d, r24	; 29
     b98:	9f bf       	out	0x3f, r25	; 63
     b9a:	08 95       	ret
     b9c:	8f bf       	out	0x3f, r24	; 63
     b9e:	08 95       	ret

00000ba0 <_Z5S_endv>:
     ba0:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <_ZN8SPIClass3endEv>

00000ba4 <_Z13S_setBitOrderv>:
     ba4:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <FPCEXcode+0x4>
     ba8:	81 11       	cpse	r24, r1
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <_Z13S_setBitOrderv+0xe>
     bac:	8c b5       	in	r24, 0x2c	; 44
     bae:	80 62       	ori	r24, 0x20	; 32
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <_Z13S_setBitOrderv+0x12>
     bb2:	8c b5       	in	r24, 0x2c	; 44
     bb4:	8f 7d       	andi	r24, 0xDF	; 223
     bb6:	8c bd       	out	0x2c, r24	; 44
     bb8:	08 95       	ret

00000bba <_Z13S_setDataModev>:
     bba:	8c b5       	in	r24, 0x2c	; 44
     bbc:	83 7f       	andi	r24, 0xF3	; 243
     bbe:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <FPCEXcode+0x4>
     bc2:	89 2b       	or	r24, r25
     bc4:	8c bd       	out	0x2c, r24	; 44
     bc6:	08 95       	ret

00000bc8 <_Z17S_setClockDividerv>:
     bc8:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <FPCEXcode+0x4>
     bcc:	9c b5       	in	r25, 0x2c	; 44
     bce:	9c 7f       	andi	r25, 0xFC	; 252
     bd0:	28 2f       	mov	r18, r24
     bd2:	23 70       	andi	r18, 0x03	; 3
     bd4:	92 2b       	or	r25, r18
     bd6:	9c bd       	out	0x2c, r25	; 44
     bd8:	2d b5       	in	r18, 0x2d	; 45
     bda:	82 fb       	bst	r24, 2
     bdc:	99 27       	eor	r25, r25
     bde:	90 f9       	bld	r25, 0
     be0:	82 2f       	mov	r24, r18
     be2:	8e 7f       	andi	r24, 0xFE	; 254
     be4:	89 2b       	or	r24, r25
     be6:	8d bd       	out	0x2d, r24	; 45
     be8:	08 95       	ret

00000bea <_Z7S_beginv>:
#endif

//SPISettings	mysettings(14000000, MSBFIRST, SPI_MODE0);
void S_begin(void)
{
SPI.begin();
     bea:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN8SPIClass5beginEv>
OUT_UBYTE4=0xa5;
     bee:	85 ea       	ldi	r24, 0xA5	; 165
     bf0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
Serial.write(&TPCEXcode.ByteData[0],8);
     bf4:	48 e0       	ldi	r20, 0x08	; 8
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	60 e4       	ldi	r22, 0x40	; 64
     bfa:	72 e0       	ldi	r23, 0x02	; 2
     bfc:	8d e5       	ldi	r24, 0x5D	; 93
     bfe:	94 e0       	ldi	r25, 0x04	; 4
     c00:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000c04 <_Z10S_transferv>:
SPI.beginTransaction(mysettings);
}

void S_transfer(void)
{
	OUT_UBYTE4=SPI.transfer(IN_UBYTE4);	
     c04:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <FPCEXcode+0x4>
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     c08:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     c0a:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     c0c:	0d b4       	in	r0, 0x2d	; 45
     c0e:	07 fe       	sbrs	r0, 7
     c10:	fd cf       	rjmp	.-6      	; 0xc0c <_Z10S_transferv+0x8>
    return SPDR;
     c12:	8e b5       	in	r24, 0x2e	; 46
     c14:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
	Serial.write(&TPCEXcode.ByteData[0],8);
     c18:	48 e0       	ldi	r20, 0x08	; 8
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	60 e4       	ldi	r22, 0x40	; 64
     c1e:	72 e0       	ldi	r23, 0x02	; 2
     c20:	8d e5       	ldi	r24, 0x5D	; 93
     c22:	94 e0       	ldi	r25, 0x04	; 4
     c24:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000c28 <_Z8_delaymsv>:
extern EXdata	TPCEXcode;
extern EXDuedata DUEdata;

void _delayms(void)
{
	delay(IN_ULONG);  
     c28:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <FPCEXcode+0x4>
     c2c:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <FPCEXcode+0x5>
     c30:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <FPCEXcode+0x6>
     c34:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <FPCEXcode+0x7>
     c38:	0e 94 37 18 	call	0x306e	; 0x306e <delay>
	Serial.write(&TPCEXcode.ByteData[0],8);
     c3c:	48 e0       	ldi	r20, 0x08	; 8
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	60 e4       	ldi	r22, 0x40	; 64
     c42:	72 e0       	ldi	r23, 0x02	; 2
     c44:	8d e5       	ldi	r24, 0x5D	; 93
     c46:	94 e0       	ldi	r25, 0x04	; 4
     c48:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000c4c <_Z7_microsv>:
}

void _micros(void)
{
	OUT_ULONG=micros();
     c4c:	0e 94 12 18 	call	0x3024	; 0x3024 <micros>
     c50:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <TPCEXcode+0x4>
     c54:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <TPCEXcode+0x5>
     c58:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <TPCEXcode+0x6>
     c5c:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <TPCEXcode+0x7>
	Serial.write(&TPCEXcode.ByteData[0],8);
     c60:	48 e0       	ldi	r20, 0x08	; 8
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	60 e4       	ldi	r22, 0x40	; 64
     c66:	72 e0       	ldi	r23, 0x02	; 2
     c68:	8d e5       	ldi	r24, 0x5D	; 93
     c6a:	94 e0       	ldi	r25, 0x04	; 4
     c6c:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000c70 <_Z7_millisv>:
}

void _millis(void)
{
	OUT_ULONG=millis();
     c70:	0e 94 06 18 	call	0x300c	; 0x300c <millis>
     c74:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <TPCEXcode+0x4>
     c78:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <TPCEXcode+0x5>
     c7c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <TPCEXcode+0x6>
     c80:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <TPCEXcode+0x7>
	Serial.write(&TPCEXcode.ByteData[0],8);
     c84:	48 e0       	ldi	r20, 0x08	; 8
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	60 e4       	ldi	r22, 0x40	; 64
     c8a:	72 e0       	ldi	r23, 0x02	; 2
     c8c:	8d e5       	ldi	r24, 0x5D	; 93
     c8e:	94 e0       	ldi	r25, 0x04	; 4
     c90:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000c94 <_Z6_getIDv>:
}

void _getID(void)
{
	#ifdef  UNO
	OUT_ULONG=123;
     c94:	8b e7       	ldi	r24, 0x7B	; 123
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	a0 e0       	ldi	r26, 0x00	; 0
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
     ca0:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <TPCEXcode+0x5>
     ca4:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <TPCEXcode+0x6>
     ca8:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <TPCEXcode+0x7>
	#endif
	
	#ifdef  leonardo
	OUT_ULONG=456;
	#endif
	Serial.write(&TPCEXcode.ByteData[0],8);
     cac:	48 e0       	ldi	r20, 0x08	; 8
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	60 e4       	ldi	r22, 0x40	; 64
     cb2:	72 e0       	ldi	r23, 0x02	; 2
     cb4:	8d e5       	ldi	r24, 0x5D	; 93
     cb6:	94 e0       	ldi	r25, 0x04	; 4
     cb8:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000cbc <_Z12requestEventv>:
{	Wire.flush();
}


void requestEvent() {
	OUT_INTPT_Status=OUT_INTPT_Status|2;
     cbc:	e0 e4       	ldi	r30, 0x40	; 64
     cbe:	f2 e0       	ldi	r31, 0x02	; 2
     cc0:	81 81       	ldd	r24, Z+1	; 0x01
     cc2:	82 60       	ori	r24, 0x02	; 2
     cc4:	81 83       	std	Z+1, r24	; 0x01
     cc6:	08 95       	ret

00000cc8 <_Z12receiveEventi>:
}

void receiveEvent(int howMany) {
	OUT_INTPT_Action=howMany;
     cc8:	e0 e4       	ldi	r30, 0x40	; 64
     cca:	f2 e0       	ldi	r31, 0x02	; 2
     ccc:	80 83       	st	Z, r24
	OUT_INTPT_Status=OUT_INTPT_Status|4;	
     cce:	81 81       	ldd	r24, Z+1	; 0x01
     cd0:	84 60       	ori	r24, 0x04	; 4
     cd2:	81 83       	std	Z+1, r24	; 0x01
     cd4:	08 95       	ret

00000cd6 <_Z5W_endv>:
	//Serial.write(&TPCEXcode.ByteData[0],8);	
}

void W_end(void)
{
a=10;
     cd6:	8a e0       	ldi	r24, 0x0A	; 10
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <a+0x1>
     cde:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <a>
#ifdef esp8266
#else
	Wire.end();
     ce2:	87 e0       	ldi	r24, 0x07	; 7
     ce4:	94 e0       	ldi	r25, 0x04	; 4
     ce6:	0c 94 47 0b 	jmp	0x168e	; 0x168e <_ZN7TwoWire3endEv>

00000cea <_Z10W_SetClockv>:
#endif 
}

void W_SetClock(void)
{
	Wire.setClock(IN_ULONG);
     cea:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <FPCEXcode+0x4>
     cee:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <FPCEXcode+0x5>
     cf2:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <FPCEXcode+0x6>
     cf6:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <FPCEXcode+0x7>
     cfa:	87 e0       	ldi	r24, 0x07	; 7
     cfc:	94 e0       	ldi	r25, 0x04	; 4
     cfe:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <_ZN7TwoWire8setClockEm>

00000d02 <_Z19W_beginTransmissionv>:
}


void W_beginTransmission(void)
{
	if(IN_UBYTE3 == 0) Wire.beginTransmission(IN_UBYTE4);
     d02:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     d06:	81 11       	cpse	r24, r1
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <_Z19W_beginTransmissionv+0x14>
     d0a:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <FPCEXcode+0x4>
     d0e:	87 e0       	ldi	r24, 0x07	; 7
     d10:	94 e0       	ldi	r25, 0x04	; 4
     d12:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN7TwoWire17beginTransmissionEh>
	if(IN_UBYTE3 == 1) Wire.beginTransmission(IN_UINT1);	
     d16:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	41 f4       	brne	.+16     	; 0xd2e <_Z19W_beginTransmissionv+0x2c>
     d1e:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <FPCEXcode+0x4>
     d22:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <FPCEXcode+0x5>
     d26:	87 e0       	ldi	r24, 0x07	; 7
     d28:	94 e0       	ldi	r25, 0x04	; 4
     d2a:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <_ZN7TwoWire17beginTransmissionEi>
     d2e:	08 95       	ret

00000d30 <_Z11WWinstallerv>:
}

//Registers a function to be called when a slave device receives a transmission from a master. 
void WWinstaller(void)
{
Wire.onReceive(receiveEvent); //Wire.onReceive(takeAction);
     d30:	64 e6       	ldi	r22, 0x64	; 100
     d32:	76 e0       	ldi	r23, 0x06	; 6
     d34:	87 e0       	ldi	r24, 0x07	; 7
     d36:	94 e0       	ldi	r25, 0x04	; 4
     d38:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN7TwoWire9onReceiveEPFviE>
Wire.onRequest(requestEvent); //Wire.onRequest(takeAction);
     d3c:	6e e5       	ldi	r22, 0x5E	; 94
     d3e:	76 e0       	ldi	r23, 0x06	; 6
     d40:	87 e0       	ldi	r24, 0x07	; 7
     d42:	94 e0       	ldi	r25, 0x04	; 4
     d44:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <_ZN7TwoWire9onRequestEPFvvE>

00000d48 <_Z7W_beginv>:
RecHandle   rehandle;

int a;
void W_begin(void)
{
	if(IN_UBYTE3 == 0)	Wire.begin();
     d48:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     d4c:	81 11       	cpse	r24, r1
     d4e:	04 c0       	rjmp	.+8      	; 0xd58 <_Z7W_beginv+0x10>
     d50:	87 e0       	ldi	r24, 0x07	; 7
     d52:	94 e0       	ldi	r25, 0x04	; 4
     d54:	0e 94 28 0b 	call	0x1650	; 0x1650 <_ZN7TwoWire5beginEv>
	if(IN_UBYTE3 == 1)	Wire.begin(IN_UBYTE4);
     d58:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	31 f4       	brne	.+12     	; 0xd6c <_Z7W_beginv+0x24>
     d60:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <FPCEXcode+0x4>
     d64:	87 e0       	ldi	r24, 0x07	; 7
     d66:	94 e0       	ldi	r25, 0x04	; 4
     d68:	0e 94 32 0b 	call	0x1664	; 0x1664 <_ZN7TwoWire5beginEh>
	if(IN_UBYTE3 == 2)	Wire.begin(IN_UINT1);
     d6c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	41 f4       	brne	.+16     	; 0xd84 <_Z7W_beginv+0x3c>
     d74:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <FPCEXcode+0x4>
     d78:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <FPCEXcode+0x5>
     d7c:	87 e0       	ldi	r24, 0x07	; 7
     d7e:	94 e0       	ldi	r25, 0x04	; 4
     d80:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7TwoWire5beginEi>
	WWinstaller();
     d84:	0c 94 98 06 	jmp	0xd30	; 0xd30 <_Z11WWinstallerv>

00000d88 <_Z17W_endTransmissionv>:
	if(IN_UBYTE3 == 1) Wire.beginTransmission(IN_UINT1);	
}


void W_endTransmission(void)
{	if(IN_UBYTE3 == 0)
     d88:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <FPCEXcode+0x3>
	OUT_UBYTE4 = Wire.endTransmission();
     d8c:	87 e0       	ldi	r24, 0x07	; 7
     d8e:	94 e0       	ldi	r25, 0x04	; 4
	if(IN_UBYTE3 == 1) Wire.beginTransmission(IN_UINT1);	
}


void W_endTransmission(void)
{	if(IN_UBYTE3 == 0)
     d90:	61 11       	cpse	r22, r1
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <_Z17W_endTransmissionv+0x12>
	OUT_UBYTE4 = Wire.endTransmission();
     d94:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN7TwoWire15endTransmissionEv>
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <_Z17W_endTransmissionv+0x16>
	else
	OUT_UBYTE4 = Wire.endTransmission(IN_UBYTE3);
     d9a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN7TwoWire15endTransmissionEh>
     d9e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
	Serial.write(&TPCEXcode.ByteData[0],8);	
     da2:	48 e0       	ldi	r20, 0x08	; 8
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	60 e4       	ldi	r22, 0x40	; 64
     da8:	72 e0       	ldi	r23, 0x02	; 2
     daa:	8d e5       	ldi	r24, 0x5D	; 93
     dac:	94 e0       	ldi	r25, 0x04	; 4
     dae:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000db2 <_Z13W_requestFromv>:

	//OUT_BYTE = Wire.requestFrom(IN_addr,IN_quantity);	
	//OUT_BYTE = Wire.requestFrom(IN_addr,IN_quantity,IN_stop);

void W_requestFrom(void)
{	if(IN_UBYTE3 == 0)		OUT_UBYTE4=Wire.requestFrom(IN_UBYTE4,IN_UBYTE5);
     db2:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     db6:	81 11       	cpse	r24, r1
     db8:	0a c0       	rjmp	.+20     	; 0xdce <_Z13W_requestFromv+0x1c>
     dba:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <FPCEXcode+0x5>
     dbe:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <FPCEXcode+0x4>
     dc2:	87 e0       	ldi	r24, 0x07	; 7
     dc4:	94 e0       	ldi	r25, 0x04	; 4
     dc6:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <_ZN7TwoWire11requestFromEhh>
     dca:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
	if(IN_UBYTE3 == 1)		OUT_UBYTE4=Wire.requestFrom(IN_UBYTE4,IN_UBYTE5,IN_UBYTE6);
     dce:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	61 f4       	brne	.+24     	; 0xdee <_Z13W_requestFromv+0x3c>
     dd6:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <FPCEXcode+0x6>
     dda:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <FPCEXcode+0x5>
     dde:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <FPCEXcode+0x4>
     de2:	87 e0       	ldi	r24, 0x07	; 7
     de4:	94 e0       	ldi	r25, 0x04	; 4
     de6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN7TwoWire11requestFromEhhh>
     dea:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
	if(IN_UBYTE3 == 2)		OUT_UBYTE4=Wire.requestFrom(IN_UINT1,IN_UINT2);
     dee:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	71 f4       	brne	.+28     	; 0xe12 <_Z13W_requestFromv+0x60>
     df6:	40 91 3e 02 	lds	r20, 0x023E	; 0x80023e <FPCEXcode+0x6>
     dfa:	50 91 3f 02 	lds	r21, 0x023F	; 0x80023f <FPCEXcode+0x7>
     dfe:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <FPCEXcode+0x4>
     e02:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <FPCEXcode+0x5>
     e06:	87 e0       	ldi	r24, 0x07	; 7
     e08:	94 e0       	ldi	r25, 0x04	; 4
     e0a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <_ZN7TwoWire11requestFromEii>
     e0e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
	if(IN_UBYTE3 == 3)		OUT_UBYTE4=Wire.requestFrom((int)IN_UBYTE2,IN_UINT1,IN_UINT2);
     e12:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     e16:	83 30       	cpi	r24, 0x03	; 3
     e18:	89 f4       	brne	.+34     	; 0xe3c <_Z13W_requestFromv+0x8a>
     e1a:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <FPCEXcode+0x6>
     e1e:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <FPCEXcode+0x7>
     e22:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <FPCEXcode+0x4>
     e26:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <FPCEXcode+0x5>
     e2a:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <FPCEXcode+0x2>
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	87 e0       	ldi	r24, 0x07	; 7
     e32:	94 e0       	ldi	r25, 0x04	; 4
     e34:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN7TwoWire11requestFromEiii>
     e38:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
	Serial.write(&TPCEXcode.ByteData[0],8);
     e3c:	48 e0       	ldi	r20, 0x08	; 8
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	60 e4       	ldi	r22, 0x40	; 64
     e42:	72 e0       	ldi	r23, 0x02	; 2
     e44:	8d e5       	ldi	r24, 0x5D	; 93
     e46:	94 e0       	ldi	r25, 0x04	; 4
     e48:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000e4c <_Z14W_requestFrom1v>:
{
  Serial.write(&TPCEXcode.ByteData[0],8);
}
#else
void W_requestFrom1(void)
{
     e4c:	cf 92       	push	r12
     e4e:	ef 92       	push	r14
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
	OUT_UBYTE4=Wire.requestFrom(IN_UBYTE4,IN_UBYTE5,OUT_DUE_ULONG1,IN_UBYTE6,IN_UBYTE7);
     e54:	e8 e3       	ldi	r30, 0x38	; 56
     e56:	f2 e0       	ldi	r31, 0x02	; 2
     e58:	00 91 30 02 	lds	r16, 0x0230	; 0x800230 <DUEdata>
     e5c:	10 91 31 02 	lds	r17, 0x0231	; 0x800231 <DUEdata+0x1>
     e60:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <DUEdata+0x2>
     e64:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <DUEdata+0x3>
     e68:	c7 80       	ldd	r12, Z+7	; 0x07
     e6a:	e6 80       	ldd	r14, Z+6	; 0x06
     e6c:	45 81       	ldd	r20, Z+5	; 0x05
     e6e:	64 81       	ldd	r22, Z+4	; 0x04
     e70:	87 e0       	ldi	r24, 0x07	; 7
     e72:	94 e0       	ldi	r25, 0x04	; 4
     e74:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <_ZN7TwoWire11requestFromEhhmhh>
     e78:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
	Serial.write(&TPCEXcode.ByteData[0],8);
     e7c:	48 e0       	ldi	r20, 0x08	; 8
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	60 e4       	ldi	r22, 0x40	; 64
     e82:	72 e0       	ldi	r23, 0x02	; 2
     e84:	8d e5       	ldi	r24, 0x5D	; 93
     e86:	94 e0       	ldi	r25, 0x04	; 4
}
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ef 90       	pop	r14
     e8e:	cf 90       	pop	r12
}
#else
void W_requestFrom1(void)
{
	OUT_UBYTE4=Wire.requestFrom(IN_UBYTE4,IN_UBYTE5,OUT_DUE_ULONG1,IN_UBYTE6,IN_UBYTE7);
	Serial.write(&TPCEXcode.ByteData[0],8);
     e90:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000e94 <_Z11W_availablev>:
	Serial.write(&TPCEXcode.ByteData[0],8);
}

void W_available(void)
{
	OUT_UBYTE4=Wire.available();
     e94:	87 e0       	ldi	r24, 0x07	; 7
     e96:	94 e0       	ldi	r25, 0x04	; 4
     e98:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <_ZN7TwoWire9availableEv>
     e9c:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
	Serial.write(&TPCEXcode.ByteData[0],8);
     ea0:	48 e0       	ldi	r20, 0x08	; 8
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	60 e4       	ldi	r22, 0x40	; 64
     ea6:	72 e0       	ldi	r23, 0x02	; 2
     ea8:	8d e5       	ldi	r24, 0x5D	; 93
     eaa:	94 e0       	ldi	r25, 0x04	; 4
     eac:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000eb0 <_Z6W_readv>:
}


void W_read(void)
{
	OUT_UBYTE4=Wire.read();
     eb0:	87 e0       	ldi	r24, 0x07	; 7
     eb2:	94 e0       	ldi	r25, 0x04	; 4
     eb4:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN7TwoWire4readEv>
     eb8:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
	Serial.write(&TPCEXcode.ByteData[0],8);
     ebc:	48 e0       	ldi	r20, 0x08	; 8
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	60 e4       	ldi	r22, 0x40	; 64
     ec2:	72 e0       	ldi	r23, 0x02	; 2
     ec4:	8d e5       	ldi	r24, 0x5D	; 93
     ec6:	94 e0       	ldi	r25, 0x04	; 4
     ec8:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000ecc <_Z6W_peekv>:
}

void W_peek(void)
{	Wire.peek();
     ecc:	87 e0       	ldi	r24, 0x07	; 7
     ece:	94 e0       	ldi	r25, 0x04	; 4
     ed0:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <_ZN7TwoWire4peekEv>

00000ed4 <_Z7W_flushv>:
}

void W_flush(void)
{	Wire.flush();
     ed4:	87 e0       	ldi	r24, 0x07	; 7
     ed6:	94 e0       	ldi	r25, 0x04	; 4
     ed8:	0c 94 85 0a 	jmp	0x150a	; 0x150a <_ZN7TwoWire5flushEv>

00000edc <_Z7W_writev>:
	OUT_UBYTE4=Wire.requestFrom(IN_UBYTE4,IN_UBYTE5,OUT_DUE_ULONG1,IN_UBYTE6,IN_UBYTE7);
	Serial.write(&TPCEXcode.ByteData[0],8);
}
#endif
void W_write(void)
{	if(IN_UBYTE3==0)
     edc:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     ee0:	81 11       	cpse	r24, r1
     ee2:	10 c0       	rjmp	.+32     	; 0xf04 <_Z7W_writev+0x28>
    virtual int peek(void);
    virtual void flush(void);
    void onReceive( void (*)(int) );
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
     ee4:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <FPCEXcode+0x4>
     ee8:	87 e0       	ldi	r24, 0x07	; 7
     eea:	94 e0       	ldi	r25, 0x04	; 4
     eec:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN7TwoWire5writeEh>
		OUT_ULONG=Wire.write(IN_ULONG);
     ef0:	a0 e0       	ldi	r26, 0x00	; 0
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
     ef8:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <TPCEXcode+0x5>
     efc:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <TPCEXcode+0x6>
     f00:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <TPCEXcode+0x7>
	if(IN_UBYTE3==1)
     f04:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	c9 f4       	brne	.+50     	; 0xf3e <_Z7W_writev+0x62>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     f0c:	e8 e4       	ldi	r30, 0x48	; 72
     f0e:	f2 e0       	ldi	r31, 0x02	; 2
     f10:	01 90       	ld	r0, Z+
     f12:	00 20       	and	r0, r0
     f14:	e9 f7       	brne	.-6      	; 0xf10 <_Z7W_writev+0x34>
     f16:	31 97       	sbiw	r30, 0x01	; 1
     f18:	af 01       	movw	r20, r30
     f1a:	48 54       	subi	r20, 0x48	; 72
     f1c:	52 40       	sbci	r21, 0x02	; 2
     f1e:	68 e4       	ldi	r22, 0x48	; 72
     f20:	72 e0       	ldi	r23, 0x02	; 2
     f22:	87 e0       	ldi	r24, 0x07	; 7
     f24:	94 e0       	ldi	r25, 0x04	; 4
     f26:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7TwoWire5writeEPKhj>
		OUT_ULONG=Wire.write((char *)INdataArray);
     f2a:	a0 e0       	ldi	r26, 0x00	; 0
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
     f32:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <TPCEXcode+0x5>
     f36:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <TPCEXcode+0x6>
     f3a:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <TPCEXcode+0x7>
	if(IN_UBYTE3==2)
     f3e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FPCEXcode+0x3>
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	91 f4       	brne	.+36     	; 0xf6a <_Z7W_writev+0x8e>
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     f46:	42 e0       	ldi	r20, 0x02	; 2
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	68 e4       	ldi	r22, 0x48	; 72
     f4c:	72 e0       	ldi	r23, 0x02	; 2
     f4e:	87 e0       	ldi	r24, 0x07	; 7
     f50:	94 e0       	ldi	r25, 0x04	; 4
     f52:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7TwoWire5writeEPKhj>
		OUT_ULONG=Wire.write((char *)INdataArray,IN_UBYTE3);
     f56:	a0 e0       	ldi	r26, 0x00	; 0
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <TPCEXcode+0x4>
     f5e:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <TPCEXcode+0x5>
     f62:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <TPCEXcode+0x6>
     f66:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <TPCEXcode+0x7>
	Serial.write(&TPCEXcode.ByteData[0],8);
     f6a:	48 e0       	ldi	r20, 0x08	; 8
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	60 e4       	ldi	r22, 0x40	; 64
     f70:	72 e0       	ldi	r23, 0x02	; 2
     f72:	8d e5       	ldi	r24, 0x5D	; 93
     f74:	94 e0       	ldi	r25, 0x04	; 4
     f76:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN7Serial_5writeEPKhj>

00000f7a <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
     f7a:	cf 93       	push	r28
  uint8_t sreg = SREG;
     f7c:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     f7e:	f8 94       	cli
  if (!initialized) {
     f80:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <_ZN8SPIClass11initializedE>
     f84:	81 11       	cpse	r24, r1
     f86:	27 c0       	rjmp	.+78     	; 0xfd6 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
     f88:	e9 eb       	ldi	r30, 0xB9	; 185
     f8a:	f1 e0       	ldi	r31, 0x01	; 1
     f8c:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
     f8e:	ea e9       	ldi	r30, 0x9A	; 154
     f90:	f1 e0       	ldi	r31, 0x01	; 1
     f92:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
     f94:	e8 2f       	mov	r30, r24
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	ee 0f       	add	r30, r30
     f9a:	ff 1f       	adc	r31, r31
     f9c:	ed 51       	subi	r30, 0x1D	; 29
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	a5 91       	lpm	r26, Z+
     fa2:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
     fa4:	ec 91       	ld	r30, X
     fa6:	e9 23       	and	r30, r25
     fa8:	21 f4       	brne	.+8      	; 0xfb2 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	81 e1       	ldi	r24, 0x11	; 17
     fae:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
     fb2:	61 e0       	ldi	r22, 0x01	; 1
     fb4:	81 e1       	ldi	r24, 0x11	; 17
     fb6:	0e 94 cf 19 	call	0x339e	; 0x339e <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     fba:	8c b5       	in	r24, 0x2c	; 44
     fbc:	80 61       	ori	r24, 0x10	; 16
     fbe:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     fc0:	8c b5       	in	r24, 0x2c	; 44
     fc2:	80 64       	ori	r24, 0x40	; 64
     fc4:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	8f e0       	ldi	r24, 0x0F	; 15
     fca:	0e 94 cf 19 	call	0x339e	; 0x339e <pinMode>
    pinMode(MOSI, OUTPUT);
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	80 e1       	ldi	r24, 0x10	; 16
     fd2:	0e 94 cf 19 	call	0x339e	; 0x339e <pinMode>
  }
  initialized++; // reference count
     fd6:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <_ZN8SPIClass11initializedE>
     fda:	8f 5f       	subi	r24, 0xFF	; 255
     fdc:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <_ZN8SPIClass11initializedE>
  SREG = sreg;
     fe0:	cf bf       	out	0x3f, r28	; 63
}
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
     fe6:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     fe8:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
     fea:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <_ZN8SPIClass11initializedE>
     fee:	88 23       	and	r24, r24
     ff0:	19 f0       	breq	.+6      	; 0xff8 <_ZN8SPIClass3endEv+0x12>
    initialized--;
     ff2:	81 50       	subi	r24, 0x01	; 1
     ff4:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
     ff8:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <_ZN8SPIClass11initializedE>
     ffc:	81 11       	cpse	r24, r1
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    1000:	8c b5       	in	r24, 0x2c	; 44
    1002:	8f 7b       	andi	r24, 0xBF	; 191
    1004:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    1006:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    100a:	9f bf       	out	0x3f, r25	; 63
    100c:	08 95       	ret

0000100e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    100e:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <twi_state>
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <twi_sendStop>
    1018:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <twi_inRepStart>
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	83 e0       	ldi	r24, 0x03	; 3
    1028:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
    102c:	e9 eb       	ldi	r30, 0xB9	; 185
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8e 7f       	andi	r24, 0xFE	; 254
    1034:	80 83       	st	Z, r24
    1036:	80 81       	ld	r24, Z
    1038:	8d 7f       	andi	r24, 0xFD	; 253
    103a:	80 83       	st	Z, r24
    103c:	88 e4       	ldi	r24, 0x48	; 72
    103e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1042:	85 e4       	ldi	r24, 0x45	; 69
    1044:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1048:	08 95       	ret

0000104a <twi_disable>:
    104a:	ec eb       	ldi	r30, 0xBC	; 188
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8a 7b       	andi	r24, 0xBA	; 186
    1052:	80 83       	st	Z, r24
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <digitalWrite>

00001064 <twi_setAddress>:
    1064:	88 0f       	add	r24, r24
    1066:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    106a:	08 95       	ret

0000106c <twi_setFrequency>:
    106c:	9b 01       	movw	r18, r22
    106e:	ac 01       	movw	r20, r24
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	74 e2       	ldi	r23, 0x24	; 36
    1074:	84 ef       	ldi	r24, 0xF4	; 244
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 3e 21 	call	0x427c	; 0x427c <__udivmodsi4>
    107c:	da 01       	movw	r26, r20
    107e:	c9 01       	movw	r24, r18
    1080:	40 97       	sbiw	r24, 0x10	; 16
    1082:	a1 09       	sbc	r26, r1
    1084:	b1 09       	sbc	r27, r1
    1086:	b6 95       	lsr	r27
    1088:	a7 95       	ror	r26
    108a:	97 95       	ror	r25
    108c:	87 95       	ror	r24
    108e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1092:	08 95       	ret

00001094 <twi_readFrom>:
    1094:	41 32       	cpi	r20, 0x21	; 33
    1096:	08 f0       	brcs	.+2      	; 0x109a <twi_readFrom+0x6>
    1098:	43 c0       	rjmp	.+134    	; 0x1120 <twi_readFrom+0x8c>
    109a:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <twi_state>
    109e:	91 11       	cpse	r25, r1
    10a0:	fc cf       	rjmp	.-8      	; 0x109a <twi_readFrom+0x6>
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <twi_state>
    10a8:	20 93 04 04 	sts	0x0404, r18	; 0x800404 <twi_sendStop>
    10ac:	2f ef       	ldi	r18, 0xFF	; 255
    10ae:	20 93 99 03 	sts	0x0399, r18	; 0x800399 <twi_error>
    10b2:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <twi_masterBufferIndex>
    10b6:	24 0f       	add	r18, r20
    10b8:	20 93 dd 03 	sts	0x03DD, r18	; 0x8003dd <twi_masterBufferLength>
    10bc:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <twi_slarw>
    10c0:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <twi_slarw>
    10c4:	88 0f       	add	r24, r24
    10c6:	89 2b       	or	r24, r25
    10c8:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <twi_slarw>
    10cc:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <twi_inRepStart>
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	61 f4       	brne	.+24     	; 0x10ec <twi_readFrom+0x58>
    10d4:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <twi_inRepStart>
    10d8:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <twi_slarw>
    10dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    10e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    10e4:	83 fd       	sbrc	r24, 3
    10e6:	f8 cf       	rjmp	.-16     	; 0x10d8 <twi_readFrom+0x44>
    10e8:	85 ec       	ldi	r24, 0xC5	; 197
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <twi_readFrom+0x5a>
    10ec:	85 ee       	ldi	r24, 0xE5	; 229
    10ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    10f2:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <twi_state>
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	e1 f3       	breq	.-8      	; 0x10f2 <twi_readFrom+0x5e>
    10fa:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <twi_masterBufferIndex>
    10fe:	84 17       	cp	r24, r20
    1100:	10 f4       	brcc	.+4      	; 0x1106 <twi_readFrom+0x72>
    1102:	40 91 de 03 	lds	r20, 0x03DE	; 0x8003de <twi_masterBufferIndex>
    1106:	af ed       	ldi	r26, 0xDF	; 223
    1108:	b3 e0       	ldi	r27, 0x03	; 3
    110a:	96 2f       	mov	r25, r22
    110c:	fb 01       	movw	r30, r22
    110e:	8e 2f       	mov	r24, r30
    1110:	89 1b       	sub	r24, r25
    1112:	84 17       	cp	r24, r20
    1114:	18 f4       	brcc	.+6      	; 0x111c <twi_readFrom+0x88>
    1116:	8d 91       	ld	r24, X+
    1118:	81 93       	st	Z+, r24
    111a:	f9 cf       	rjmp	.-14     	; 0x110e <twi_readFrom+0x7a>
    111c:	84 2f       	mov	r24, r20
    111e:	08 95       	ret
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	08 95       	ret

00001124 <twi_writeTo>:
    1124:	0f 93       	push	r16
    1126:	41 32       	cpi	r20, 0x21	; 33
    1128:	08 f0       	brcs	.+2      	; 0x112c <twi_writeTo+0x8>
    112a:	4a c0       	rjmp	.+148    	; 0x11c0 <twi_writeTo+0x9c>
    112c:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <twi_state>
    1130:	91 11       	cpse	r25, r1
    1132:	fc cf       	rjmp	.-8      	; 0x112c <twi_writeTo+0x8>
    1134:	32 e0       	ldi	r19, 0x02	; 2
    1136:	30 93 06 04 	sts	0x0406, r19	; 0x800406 <twi_state>
    113a:	00 93 04 04 	sts	0x0404, r16	; 0x800404 <twi_sendStop>
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	30 93 99 03 	sts	0x0399, r19	; 0x800399 <twi_error>
    1144:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <twi_masterBufferIndex>
    1148:	40 93 dd 03 	sts	0x03DD, r20	; 0x8003dd <twi_masterBufferLength>
    114c:	56 2f       	mov	r21, r22
    114e:	af ed       	ldi	r26, 0xDF	; 223
    1150:	b3 e0       	ldi	r27, 0x03	; 3
    1152:	fb 01       	movw	r30, r22
    1154:	3e 2f       	mov	r19, r30
    1156:	35 1b       	sub	r19, r21
    1158:	34 17       	cp	r19, r20
    115a:	18 f4       	brcc	.+6      	; 0x1162 <twi_writeTo+0x3e>
    115c:	31 91       	ld	r19, Z+
    115e:	3d 93       	st	X+, r19
    1160:	f9 cf       	rjmp	.-14     	; 0x1154 <twi_writeTo+0x30>
    1162:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <twi_slarw>
    1166:	30 91 05 04 	lds	r19, 0x0405	; 0x800405 <twi_slarw>
    116a:	88 0f       	add	r24, r24
    116c:	83 2b       	or	r24, r19
    116e:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <twi_slarw>
    1172:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <twi_inRepStart>
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	61 f4       	brne	.+24     	; 0x1192 <twi_writeTo+0x6e>
    117a:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <twi_inRepStart>
    117e:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <twi_slarw>
    1182:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1186:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    118a:	83 fd       	sbrc	r24, 3
    118c:	f8 cf       	rjmp	.-16     	; 0x117e <twi_writeTo+0x5a>
    118e:	85 ec       	ldi	r24, 0xC5	; 197
    1190:	01 c0       	rjmp	.+2      	; 0x1194 <twi_writeTo+0x70>
    1192:	85 ee       	ldi	r24, 0xE5	; 229
    1194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1198:	22 23       	and	r18, r18
    119a:	21 f0       	breq	.+8      	; 0x11a4 <twi_writeTo+0x80>
    119c:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <twi_state>
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	d1 f3       	breq	.-12     	; 0x1198 <twi_writeTo+0x74>
    11a4:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <twi_error>
    11a8:	8f 3f       	cpi	r24, 0xFF	; 255
    11aa:	79 f0       	breq	.+30     	; 0x11ca <twi_writeTo+0xa6>
    11ac:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <twi_error>
    11b0:	80 32       	cpi	r24, 0x20	; 32
    11b2:	41 f0       	breq	.+16     	; 0x11c4 <twi_writeTo+0xa0>
    11b4:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <twi_error>
    11b8:	80 33       	cpi	r24, 0x30	; 48
    11ba:	31 f0       	breq	.+12     	; 0x11c8 <twi_writeTo+0xa4>
    11bc:	94 e0       	ldi	r25, 0x04	; 4
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <twi_writeTo+0xa6>
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <twi_writeTo+0xa6>
    11c4:	92 e0       	ldi	r25, 0x02	; 2
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <twi_writeTo+0xa6>
    11c8:	93 e0       	ldi	r25, 0x03	; 3
    11ca:	89 2f       	mov	r24, r25
    11cc:	0f 91       	pop	r16
    11ce:	08 95       	ret

000011d0 <twi_transmit>:
    11d0:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <twi_txBufferLength>
    11d4:	26 2f       	mov	r18, r22
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	24 0f       	add	r18, r20
    11da:	31 1d       	adc	r19, r1
    11dc:	21 32       	cpi	r18, 0x21	; 33
    11de:	31 05       	cpc	r19, r1
    11e0:	dc f4       	brge	.+54     	; 0x1218 <twi_transmit+0x48>
    11e2:	20 91 06 04 	lds	r18, 0x0406	; 0x800406 <twi_state>
    11e6:	24 30       	cpi	r18, 0x04	; 4
    11e8:	c9 f4       	brne	.+50     	; 0x121c <twi_transmit+0x4c>
    11ea:	fc 01       	movw	r30, r24
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	86 17       	cp	r24, r22
    11f2:	58 f4       	brcc	.+22     	; 0x120a <twi_transmit+0x3a>
    11f4:	30 91 bb 03 	lds	r19, 0x03BB	; 0x8003bb <twi_txBufferLength>
    11f8:	21 91       	ld	r18, Z+
    11fa:	dc 01       	movw	r26, r24
    11fc:	a3 54       	subi	r26, 0x43	; 67
    11fe:	bc 4f       	sbci	r27, 0xFC	; 252
    1200:	a3 0f       	add	r26, r19
    1202:	b1 1d       	adc	r27, r1
    1204:	2c 93       	st	X, r18
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	f3 cf       	rjmp	.-26     	; 0x11f0 <twi_transmit+0x20>
    120a:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <twi_txBufferLength>
    120e:	68 0f       	add	r22, r24
    1210:	60 93 bb 03 	sts	0x03BB, r22	; 0x8003bb <twi_txBufferLength>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	08 95       	ret
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	08 95       	ret
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	08 95       	ret

00001220 <twi_attachSlaveRxEvent>:
    1220:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <twi_onSlaveReceive+0x1>
    1224:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <twi_onSlaveReceive>
    1228:	08 95       	ret

0000122a <twi_attachSlaveTxEvent>:
    122a:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <twi_onSlaveTransmit+0x1>
    122e:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <twi_onSlaveTransmit>
    1232:	08 95       	ret

00001234 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1234:	85 ed       	ldi	r24, 0xD5	; 213
    1236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    123a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    123e:	84 fd       	sbrc	r24, 4
    1240:	fc cf       	rjmp	.-8      	; 0x123a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1242:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <twi_state>
    1246:	08 95       	ret

00001248 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1248:	85 ec       	ldi	r24, 0xC5	; 197
    124a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    124e:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <twi_state>
    1252:	08 95       	ret

00001254 <__vector_36>:
}

ISR(TWI_vect)
{
    1254:	1f 92       	push	r1
    1256:	0f 92       	push	r0
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	0f 92       	push	r0
    125c:	11 24       	eor	r1, r1
    125e:	2f 93       	push	r18
    1260:	3f 93       	push	r19
    1262:	4f 93       	push	r20
    1264:	5f 93       	push	r21
    1266:	6f 93       	push	r22
    1268:	7f 93       	push	r23
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
    126e:	af 93       	push	r26
    1270:	bf 93       	push	r27
    1272:	ef 93       	push	r30
    1274:	ff 93       	push	r31
  switch(TW_STATUS){
    1276:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    127a:	88 7f       	andi	r24, 0xF8	; 248
    127c:	80 36       	cpi	r24, 0x60	; 96
    127e:	09 f4       	brne	.+2      	; 0x1282 <__vector_36+0x2e>
    1280:	9e c0       	rjmp	.+316    	; 0x13be <__vector_36+0x16a>
    1282:	78 f5       	brcc	.+94     	; 0x12e2 <__vector_36+0x8e>
    1284:	88 32       	cpi	r24, 0x28	; 40
    1286:	09 f4       	brne	.+2      	; 0x128a <__vector_36+0x36>
    1288:	5d c0       	rjmp	.+186    	; 0x1344 <__vector_36+0xf0>
    128a:	90 f4       	brcc	.+36     	; 0x12b0 <__vector_36+0x5c>
    128c:	80 31       	cpi	r24, 0x10	; 16
    128e:	09 f4       	brne	.+2      	; 0x1292 <__vector_36+0x3e>
    1290:	56 c0       	rjmp	.+172    	; 0x133e <__vector_36+0xea>
    1292:	38 f4       	brcc	.+14     	; 0x12a2 <__vector_36+0x4e>
    1294:	88 23       	and	r24, r24
    1296:	09 f4       	brne	.+2      	; 0x129a <__vector_36+0x46>
    1298:	f5 c0       	rjmp	.+490    	; 0x1484 <__vector_36+0x230>
    129a:	88 30       	cpi	r24, 0x08	; 8
    129c:	09 f4       	brne	.+2      	; 0x12a0 <__vector_36+0x4c>
    129e:	4f c0       	rjmp	.+158    	; 0x133e <__vector_36+0xea>
    12a0:	f5 c0       	rjmp	.+490    	; 0x148c <__vector_36+0x238>
    12a2:	88 31       	cpi	r24, 0x18	; 24
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <__vector_36+0x54>
    12a6:	4e c0       	rjmp	.+156    	; 0x1344 <__vector_36+0xf0>
    12a8:	80 32       	cpi	r24, 0x20	; 32
    12aa:	09 f4       	brne	.+2      	; 0x12ae <__vector_36+0x5a>
    12ac:	5f c0       	rjmp	.+190    	; 0x136c <__vector_36+0x118>
    12ae:	ee c0       	rjmp	.+476    	; 0x148c <__vector_36+0x238>
    12b0:	80 34       	cpi	r24, 0x40	; 64
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <__vector_36+0x62>
    12b4:	6a c0       	rjmp	.+212    	; 0x138a <__vector_36+0x136>
    12b6:	58 f4       	brcc	.+22     	; 0x12ce <__vector_36+0x7a>
    12b8:	80 33       	cpi	r24, 0x30	; 48
    12ba:	09 f4       	brne	.+2      	; 0x12be <__vector_36+0x6a>
    12bc:	57 c0       	rjmp	.+174    	; 0x136c <__vector_36+0x118>
    12be:	88 33       	cpi	r24, 0x38	; 56
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <__vector_36+0x70>
    12c2:	e4 c0       	rjmp	.+456    	; 0x148c <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    12c4:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <twi_error>
      twi_releaseBus();
    12c8:	0e 94 24 09 	call	0x1248	; 0x1248 <twi_releaseBus>
      break;
    12cc:	df c0       	rjmp	.+446    	; 0x148c <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    12ce:	80 35       	cpi	r24, 0x50	; 80
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <__vector_36+0x80>
    12d2:	4f c0       	rjmp	.+158    	; 0x1372 <__vector_36+0x11e>
    12d4:	88 35       	cpi	r24, 0x58	; 88
    12d6:	09 f4       	brne	.+2      	; 0x12da <__vector_36+0x86>
    12d8:	5d c0       	rjmp	.+186    	; 0x1394 <__vector_36+0x140>
    12da:	88 34       	cpi	r24, 0x48	; 72
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__vector_36+0x8c>
    12de:	d6 c0       	rjmp	.+428    	; 0x148c <__vector_36+0x238>
    12e0:	d3 c0       	rjmp	.+422    	; 0x1488 <__vector_36+0x234>
    12e2:	88 39       	cpi	r24, 0x98	; 152
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <__vector_36+0x94>
    12e6:	c4 c0       	rjmp	.+392    	; 0x1470 <__vector_36+0x21c>
    12e8:	a8 f4       	brcc	.+42     	; 0x1314 <__vector_36+0xc0>
    12ea:	88 37       	cpi	r24, 0x78	; 120
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <__vector_36+0x9c>
    12ee:	67 c0       	rjmp	.+206    	; 0x13be <__vector_36+0x16a>
    12f0:	38 f4       	brcc	.+14     	; 0x1300 <__vector_36+0xac>
    12f2:	88 36       	cpi	r24, 0x68	; 104
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <__vector_36+0xa4>
    12f6:	63 c0       	rjmp	.+198    	; 0x13be <__vector_36+0x16a>
    12f8:	80 37       	cpi	r24, 0x70	; 112
    12fa:	09 f4       	brne	.+2      	; 0x12fe <__vector_36+0xaa>
    12fc:	60 c0       	rjmp	.+192    	; 0x13be <__vector_36+0x16a>
    12fe:	c6 c0       	rjmp	.+396    	; 0x148c <__vector_36+0x238>
    1300:	88 38       	cpi	r24, 0x88	; 136
    1302:	09 f4       	brne	.+2      	; 0x1306 <__vector_36+0xb2>
    1304:	b5 c0       	rjmp	.+362    	; 0x1470 <__vector_36+0x21c>
    1306:	80 39       	cpi	r24, 0x90	; 144
    1308:	09 f4       	brne	.+2      	; 0x130c <__vector_36+0xb8>
    130a:	5f c0       	rjmp	.+190    	; 0x13ca <__vector_36+0x176>
    130c:	80 38       	cpi	r24, 0x80	; 128
    130e:	09 f0       	breq	.+2      	; 0x1312 <__vector_36+0xbe>
    1310:	bd c0       	rjmp	.+378    	; 0x148c <__vector_36+0x238>
    1312:	5b c0       	rjmp	.+182    	; 0x13ca <__vector_36+0x176>
    1314:	80 3b       	cpi	r24, 0xB0	; 176
    1316:	09 f4       	brne	.+2      	; 0x131a <__vector_36+0xc6>
    1318:	83 c0       	rjmp	.+262    	; 0x1420 <__vector_36+0x1cc>
    131a:	38 f4       	brcc	.+14     	; 0x132a <__vector_36+0xd6>
    131c:	80 3a       	cpi	r24, 0xA0	; 160
    131e:	09 f4       	brne	.+2      	; 0x1322 <__vector_36+0xce>
    1320:	66 c0       	rjmp	.+204    	; 0x13ee <__vector_36+0x19a>
    1322:	88 3a       	cpi	r24, 0xA8	; 168
    1324:	09 f4       	brne	.+2      	; 0x1328 <__vector_36+0xd4>
    1326:	7c c0       	rjmp	.+248    	; 0x1420 <__vector_36+0x1cc>
    1328:	b1 c0       	rjmp	.+354    	; 0x148c <__vector_36+0x238>
    132a:	80 3c       	cpi	r24, 0xC0	; 192
    132c:	09 f4       	brne	.+2      	; 0x1330 <__vector_36+0xdc>
    132e:	a4 c0       	rjmp	.+328    	; 0x1478 <__vector_36+0x224>
    1330:	88 3c       	cpi	r24, 0xC8	; 200
    1332:	09 f4       	brne	.+2      	; 0x1336 <__vector_36+0xe2>
    1334:	a1 c0       	rjmp	.+322    	; 0x1478 <__vector_36+0x224>
    1336:	88 3b       	cpi	r24, 0xB8	; 184
    1338:	09 f4       	brne	.+2      	; 0x133c <__vector_36+0xe8>
    133a:	87 c0       	rjmp	.+270    	; 0x144a <__vector_36+0x1f6>
    133c:	a7 c0       	rjmp	.+334    	; 0x148c <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    133e:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <twi_slarw>
    1342:	10 c0       	rjmp	.+32     	; 0x1364 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1344:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <twi_masterBufferIndex>
    1348:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <twi_masterBufferLength>
    134c:	98 17       	cp	r25, r24
    134e:	70 f5       	brcc	.+92     	; 0x13ac <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1350:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <twi_masterBufferIndex>
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	8e 0f       	add	r24, r30
    1358:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <twi_masterBufferIndex>
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	e1 52       	subi	r30, 0x21	; 33
    1360:	fc 4f       	sbci	r31, 0xFC	; 252
    1362:	80 81       	ld	r24, Z
    1364:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1368:	85 ec       	ldi	r24, 0xC5	; 197
    136a:	83 c0       	rjmp	.+262    	; 0x1472 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    136c:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <twi_error>
    1370:	8b c0       	rjmp	.+278    	; 0x1488 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1372:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <twi_masterBufferIndex>
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	8e 0f       	add	r24, r30
    137a:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <twi_masterBufferIndex>
    137e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	e1 52       	subi	r30, 0x21	; 33
    1386:	fc 4f       	sbci	r31, 0xFC	; 252
    1388:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    138a:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <twi_masterBufferIndex>
    138e:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <twi_masterBufferLength>
    1392:	6b c0       	rjmp	.+214    	; 0x146a <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1394:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <twi_masterBufferIndex>
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	8e 0f       	add	r24, r30
    139c:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <twi_masterBufferIndex>
    13a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	e1 52       	subi	r30, 0x21	; 33
    13a8:	fc 4f       	sbci	r31, 0xFC	; 252
    13aa:	80 83       	st	Z, r24
	if (twi_sendStop)
    13ac:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <twi_sendStop>
    13b0:	81 11       	cpse	r24, r1
    13b2:	6a c0       	rjmp	.+212    	; 0x1488 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    13ba:	84 ea       	ldi	r24, 0xA4	; 164
    13bc:	5e c0       	rjmp	.+188    	; 0x147a <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    13be:	83 e0       	ldi	r24, 0x03	; 3
    13c0:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    13c4:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <twi_rxBufferIndex>
    13c8:	cf cf       	rjmp	.-98     	; 0x1368 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    13ca:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <twi_rxBufferIndex>
    13ce:	80 32       	cpi	r24, 0x20	; 32
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <__vector_36+0x180>
    13d2:	4e c0       	rjmp	.+156    	; 0x1470 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    13d4:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <twi_rxBufferIndex>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	8e 0f       	add	r24, r30
    13dc:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <twi_rxBufferIndex>
    13e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	e5 56       	subi	r30, 0x65	; 101
    13e8:	fc 4f       	sbci	r31, 0xFC	; 252
    13ea:	80 83       	st	Z, r24
    13ec:	bd cf       	rjmp	.-134    	; 0x1368 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    13ee:	0e 94 24 09 	call	0x1248	; 0x1248 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    13f2:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <twi_rxBufferIndex>
    13f6:	80 32       	cpi	r24, 0x20	; 32
    13f8:	30 f4       	brcc	.+12     	; 0x1406 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    13fa:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <twi_rxBufferIndex>
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	e5 56       	subi	r30, 0x65	; 101
    1402:	fc 4f       	sbci	r31, 0xFC	; 252
    1404:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1406:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <twi_rxBufferIndex>
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	e0 91 ff 03 	lds	r30, 0x03FF	; 0x8003ff <twi_onSlaveReceive>
    1410:	f0 91 00 04 	lds	r31, 0x0400	; 0x800400 <twi_onSlaveReceive+0x1>
    1414:	8b e9       	ldi	r24, 0x9B	; 155
    1416:	93 e0       	ldi	r25, 0x03	; 3
    1418:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    141a:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <twi_rxBufferIndex>
      break;
    141e:	36 c0       	rjmp	.+108    	; 0x148c <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1426:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    142a:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    142e:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <twi_onSlaveTransmit>
    1432:	f0 91 02 04 	lds	r31, 0x0402	; 0x800402 <twi_onSlaveTransmit+0x1>
    1436:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1438:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <twi_txBufferLength>
    143c:	81 11       	cpse	r24, r1
    143e:	05 c0       	rjmp	.+10     	; 0x144a <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1446:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    144a:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <twi_txBufferIndex>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	8e 0f       	add	r24, r30
    1452:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <twi_txBufferIndex>
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	e3 54       	subi	r30, 0x43	; 67
    145a:	fc 4f       	sbci	r31, 0xFC	; 252
    145c:	80 81       	ld	r24, Z
    145e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1462:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <twi_txBufferIndex>
    1466:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <twi_txBufferLength>
    146a:	98 17       	cp	r25, r24
    146c:	08 f4       	brcc	.+2      	; 0x1470 <__vector_36+0x21c>
    146e:	7c cf       	rjmp	.-264    	; 0x1368 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1470:	85 e8       	ldi	r24, 0x85	; 133
    1472:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1476:	0a c0       	rjmp	.+20     	; 0x148c <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1478:	85 ec       	ldi	r24, 0xC5	; 197
    147a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    147e:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <twi_state>
      break;
    1482:	04 c0       	rjmp	.+8      	; 0x148c <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1484:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <twi_error>
      twi_stop();
    1488:	0e 94 1a 09 	call	0x1234	; 0x1234 <twi_stop>
      break;
  }
}
    148c:	ff 91       	pop	r31
    148e:	ef 91       	pop	r30
    1490:	bf 91       	pop	r27
    1492:	af 91       	pop	r26
    1494:	9f 91       	pop	r25
    1496:	8f 91       	pop	r24
    1498:	7f 91       	pop	r23
    149a:	6f 91       	pop	r22
    149c:	5f 91       	pop	r21
    149e:	4f 91       	pop	r20
    14a0:	3f 91       	pop	r19
    14a2:	2f 91       	pop	r18
    14a4:	0f 90       	pop	r0
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	0f 90       	pop	r0
    14aa:	1f 90       	pop	r1
    14ac:	18 95       	reti

000014ae <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	08 95       	ret

000014b4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    14b4:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZN7TwoWire14rxBufferLengthE>
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	20 91 3c 04 	lds	r18, 0x043C	; 0x80043c <_ZN7TwoWire13rxBufferIndexE>
}
    14be:	82 1b       	sub	r24, r18
    14c0:	91 09       	sbc	r25, r1
    14c2:	08 95       	ret

000014c4 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    14c4:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <_ZN7TwoWire13rxBufferIndexE>
    14c8:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZN7TwoWire14rxBufferLengthE>
    14cc:	98 17       	cp	r25, r24
    14ce:	50 f4       	brcc	.+20     	; 0x14e4 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    14d0:	e9 2f       	mov	r30, r25
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	e3 5c       	subi	r30, 0xC3	; 195
    14d6:	fb 4f       	sbci	r31, 0xFB	; 251
    14d8:	20 81       	ld	r18, Z
    14da:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    14dc:	9f 5f       	subi	r25, 0xFF	; 255
    14de:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <_ZN7TwoWire13rxBufferIndexE>
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    14e4:	2f ef       	ldi	r18, 0xFF	; 255
    14e6:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    14e8:	c9 01       	movw	r24, r18
    14ea:	08 95       	ret

000014ec <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    14ec:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <_ZN7TwoWire13rxBufferIndexE>
    14f0:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZN7TwoWire14rxBufferLengthE>
    14f4:	e8 17       	cp	r30, r24
    14f6:	30 f4       	brcc	.+12     	; 0x1504 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	e3 5c       	subi	r30, 0xC3	; 195
    14fc:	fb 4f       	sbci	r31, 0xFB	; 251
    14fe:	80 81       	ld	r24, Z
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    1508:	08 95       	ret

0000150a <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    150a:	08 95       	ret

0000150c <_ZN7TwoWire16onReceiveServiceEPhi>:
  // XXX: to be implemented.
}

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	ec 01       	movw	r28, r24
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    1512:	e0 91 13 04 	lds	r30, 0x0413	; 0x800413 <_ZN7TwoWire14user_onReceiveE>
    1516:	f0 91 14 04 	lds	r31, 0x0414	; 0x800414 <_ZN7TwoWire14user_onReceiveE+0x1>
    151a:	30 97       	sbiw	r30, 0x00	; 0
    151c:	f1 f0       	breq	.+60     	; 0x155a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    151e:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <_ZN7TwoWire13rxBufferIndexE>
    1522:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZN7TwoWire14rxBufferLengthE>
    1526:	98 17       	cp	r25, r24
    1528:	c0 f0       	brcs	.+48     	; 0x155a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    152a:	90 e0       	ldi	r25, 0x00	; 0
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    152c:	29 2f       	mov	r18, r25
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	26 17       	cp	r18, r22
    1532:	37 07       	cpc	r19, r23
    1534:	54 f4       	brge	.+20     	; 0x154a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    rxBuffer[i] = inBytes[i];    
    1536:	de 01       	movw	r26, r28
    1538:	a2 0f       	add	r26, r18
    153a:	b3 1f       	adc	r27, r19
    153c:	4c 91       	ld	r20, X
    153e:	d9 01       	movw	r26, r18
    1540:	a3 5c       	subi	r26, 0xC3	; 195
    1542:	bb 4f       	sbci	r27, 0xFB	; 251
    1544:	4c 93       	st	X, r20
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    1546:	9f 5f       	subi	r25, 0xFF	; 255
    1548:	f1 cf       	rjmp	.-30     	; 0x152c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    154a:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
    154e:	60 93 3b 04 	sts	0x043B, r22	; 0x80043b <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
    1552:	cb 01       	movw	r24, r22
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
  }
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
    1558:	09 94       	ijmp
}
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    1560:	e0 91 15 04 	lds	r30, 0x0415	; 0x800415 <_ZN7TwoWire14user_onRequestE>
    1564:	f0 91 16 04 	lds	r31, 0x0416	; 0x800416 <_ZN7TwoWire14user_onRequestE+0x1>
    1568:	30 97       	sbiw	r30, 0x00	; 0
    156a:	29 f0       	breq	.+10     	; 0x1576 <_ZN7TwoWire16onRequestServiceEv+0x16>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    156c:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    1570:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
    1574:	09 94       	ijmp
    1576:	08 95       	ret

00001578 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	7c 01       	movw	r14, r24
    158a:	cb 01       	movw	r24, r22
    158c:	8a 01       	movw	r16, r20
  if(transmitting){
    158e:	20 91 17 04 	lds	r18, 0x0417	; 0x800417 <_ZN7TwoWire12transmittingE>
    1592:	22 23       	and	r18, r18
    1594:	89 f0       	breq	.+34     	; 0x15b8 <_ZN7TwoWire5writeEPKhj+0x40>
    1596:	eb 01       	movw	r28, r22
    1598:	6b 01       	movw	r12, r22
    159a:	c4 0e       	add	r12, r20
    159c:	d5 1e       	adc	r13, r21
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    159e:	cc 15       	cp	r28, r12
    15a0:	dd 05       	cpc	r29, r13
    15a2:	69 f0       	breq	.+26     	; 0x15be <_ZN7TwoWire5writeEPKhj+0x46>
      write(data[i]);
    15a4:	69 91       	ld	r22, Y+
    15a6:	d7 01       	movw	r26, r14
    15a8:	ed 91       	ld	r30, X+
    15aa:	fc 91       	ld	r31, X
    15ac:	01 90       	ld	r0, Z+
    15ae:	f0 81       	ld	r31, Z
    15b0:	e0 2d       	mov	r30, r0
    15b2:	c7 01       	movw	r24, r14
    15b4:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    15b6:	f3 cf       	rjmp	.-26     	; 0x159e <_ZN7TwoWire5writeEPKhj+0x26>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    15b8:	64 2f       	mov	r22, r20
    15ba:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <twi_transmit>
  }
  return quantity;
}
    15be:	c8 01       	movw	r24, r16
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	08 95       	ret

000015d2 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	1f 92       	push	r1
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    15de:	20 91 17 04 	lds	r18, 0x0417	; 0x800417 <_ZN7TwoWire12transmittingE>
    15e2:	22 23       	and	r18, r18
    15e4:	d1 f0       	breq	.+52     	; 0x161a <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    15e6:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <_ZN7TwoWire14txBufferLengthE>
    15ea:	20 32       	cpi	r18, 0x20	; 32
    15ec:	40 f0       	brcs	.+16     	; 0x15fe <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    15ee:	21 e0       	ldi	r18, 0x01	; 1
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	fc 01       	movw	r30, r24
    15f4:	33 83       	std	Z+3, r19	; 0x03
    15f6:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	15 c0       	rjmp	.+42     	; 0x1628 <_ZN7TwoWire5writeEh+0x56>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    15fe:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZN7TwoWire13txBufferIndexE>
    1602:	e8 2f       	mov	r30, r24
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	e6 5e       	subi	r30, 0xE6	; 230
    1608:	fb 4f       	sbci	r31, 0xFB	; 251
    160a:	99 81       	ldd	r25, Y+1	; 0x01
    160c:	90 83       	st	Z, r25
    ++txBufferIndex;
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    1614:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <_ZN7TwoWire14txBufferLengthE>
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	ce 01       	movw	r24, r28
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <twi_transmit>
  }
  return 1;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
}
    1628:	0f 90       	pop	r0
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1630:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    1632:	13 82       	std	Z+3, r1	; 0x03
    1634:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1636:	88 ee       	ldi	r24, 0xE8	; 232
    1638:	93 e0       	ldi	r25, 0x03	; 3
    163a:	a0 e0       	ldi	r26, 0x00	; 0
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	84 83       	std	Z+4, r24	; 0x04
    1640:	95 83       	std	Z+5, r25	; 0x05
    1642:	a6 83       	std	Z+6, r26	; 0x06
    1644:	b7 83       	std	Z+7, r27	; 0x07
    1646:	8b ee       	ldi	r24, 0xEB	; 235
    1648:	91 e0       	ldi	r25, 0x01	; 1
    164a:	91 83       	std	Z+1, r25	; 0x01
    164c:	80 83       	st	Z, r24
    164e:	08 95       	ret

00001650 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    1650:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
    1654:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
    1658:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    165c:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <_ZN7TwoWire14txBufferLengthE>

  twi_init();
    1660:	0c 94 07 08 	jmp	0x100e	; 0x100e <twi_init>

00001664 <_ZN7TwoWire5beginEh>:
}

void TwoWire::begin(uint8_t address)
{
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ec 01       	movw	r28, r24
    166a:	86 2f       	mov	r24, r22
  twi_setAddress(address);
    166c:	0e 94 32 08 	call	0x1064	; 0x1064 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    1670:	80 eb       	ldi	r24, 0xB0	; 176
    1672:	9a e0       	ldi	r25, 0x0A	; 10
    1674:	0e 94 15 09 	call	0x122a	; 0x122a <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    1678:	86 e8       	ldi	r24, 0x86	; 134
    167a:	9a e0       	ldi	r25, 0x0A	; 10
    167c:	0e 94 10 09 	call	0x1220	; 0x1220 <twi_attachSlaveRxEvent>
  begin();
    1680:	ce 01       	movw	r24, r28
}
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
void TwoWire::begin(uint8_t address)
{
  twi_setAddress(address);
  twi_attachSlaveTxEvent(onRequestService);
  twi_attachSlaveRxEvent(onReceiveService);
  begin();
    1686:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <_ZN7TwoWire5beginEv>

0000168a <_ZN7TwoWire5beginEi>:
}

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
    168a:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <_ZN7TwoWire5beginEh>

0000168e <_ZN7TwoWire3endEv>:
}

void TwoWire::end(void)
{
  twi_disable();
    168e:	0c 94 25 08 	jmp	0x104a	; 0x104a <twi_disable>

00001692 <_ZN7TwoWire8setClockEm>:
}

void TwoWire::setClock(uint32_t clock)
{
  twi_setFrequency(clock);
    1692:	cb 01       	movw	r24, r22
    1694:	ba 01       	movw	r22, r20
    1696:	0c 94 36 08 	jmp	0x106c	; 0x106c <twi_setFrequency>

0000169a <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
    16a0:	60 93 3a 04 	sts	0x043A, r22	; 0x80043a <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    16a4:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    16a8:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <_ZN7TwoWire14txBufferLengthE>
    16ac:	08 95       	ret

000016ae <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    16ae:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <_ZN7TwoWire17beginTransmissionEh>

000016b2 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    16b2:	0f 93       	push	r16
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    16b4:	06 2f       	mov	r16, r22
    16b6:	21 e0       	ldi	r18, 0x01	; 1
    16b8:	40 91 18 04 	lds	r20, 0x0418	; 0x800418 <_ZN7TwoWire14txBufferLengthE>
    16bc:	6a e1       	ldi	r22, 0x1A	; 26
    16be:	74 e0       	ldi	r23, 0x04	; 4
    16c0:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <_ZN7TwoWire9txAddressE>
    16c4:	0e 94 92 08 	call	0x1124	; 0x1124 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    16c8:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    16cc:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
    16d0:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <_ZN7TwoWire12transmittingE>
  return ret;
}
    16d4:	0f 91       	pop	r16
    16d6:	08 95       	ret

000016d8 <_ZN7TwoWire11requestFromEhhmhh>:
{
  twi_setFrequency(clock);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    16d8:	4f 92       	push	r4
    16da:	5f 92       	push	r5
    16dc:	6f 92       	push	r6
    16de:	7f 92       	push	r7
    16e0:	af 92       	push	r10
    16e2:	bf 92       	push	r11
    16e4:	cf 92       	push	r12
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	5c 01       	movw	r10, r24
    16f4:	f6 2e       	mov	r15, r22
    16f6:	d4 2f       	mov	r29, r20
    16f8:	28 01       	movw	r4, r16
    16fa:	39 01       	movw	r6, r18
  if (isize > 0) {
    16fc:	ee 20       	and	r14, r14
    16fe:	21 f1       	breq	.+72     	; 0x1748 <_ZN7TwoWire11requestFromEhhmhh+0x70>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    1700:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN7TwoWire17beginTransmissionEh>
    1704:	ce 2d       	mov	r28, r14
    1706:	c4 30       	cpi	r28, 0x04	; 4
    1708:	08 f0       	brcs	.+2      	; 0x170c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    170a:	c3 e0       	ldi	r28, 0x03	; 3
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    170c:	c1 50       	subi	r28, 0x01	; 1
    170e:	c0 f0       	brcs	.+48     	; 0x1740 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    write((uint8_t)(iaddress >> (isize*8)));
    1710:	28 e0       	ldi	r18, 0x08	; 8
    1712:	c2 9f       	mul	r28, r18
    1714:	c0 01       	movw	r24, r0
    1716:	11 24       	eor	r1, r1
    1718:	a3 01       	movw	r20, r6
    171a:	92 01       	movw	r18, r4
    171c:	04 c0       	rjmp	.+8      	; 0x1726 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    171e:	56 95       	lsr	r21
    1720:	47 95       	ror	r20
    1722:	37 95       	ror	r19
    1724:	27 95       	ror	r18
    1726:	8a 95       	dec	r24
    1728:	d2 f7       	brpl	.-12     	; 0x171e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    172a:	ca 01       	movw	r24, r20
    172c:	b9 01       	movw	r22, r18
    172e:	d5 01       	movw	r26, r10
    1730:	ed 91       	ld	r30, X+
    1732:	fc 91       	ld	r31, X
    1734:	01 90       	ld	r0, Z+
    1736:	f0 81       	ld	r31, Z
    1738:	e0 2d       	mov	r30, r0
    173a:	c5 01       	movw	r24, r10
    173c:	09 95       	icall
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    173e:	e6 cf       	rjmp	.-52     	; 0x170c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	c5 01       	movw	r24, r10
    1744:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN7TwoWire15endTransmissionEh>
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    1748:	4d 2f       	mov	r20, r29
    174a:	d1 32       	cpi	r29, 0x21	; 33
    174c:	08 f0       	brcs	.+2      	; 0x1750 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    174e:	40 e2       	ldi	r20, 0x20	; 32
    1750:	2c 2d       	mov	r18, r12
    1752:	6d e3       	ldi	r22, 0x3D	; 61
    1754:	74 e0       	ldi	r23, 0x04	; 4
    1756:	8f 2d       	mov	r24, r15
    1758:	0e 94 4a 08 	call	0x1094	; 0x1094 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    175c:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
    1760:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZN7TwoWire14rxBufferLengthE>

  return read;
}
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	ff 90       	pop	r15
    176e:	ef 90       	pop	r14
    1770:	cf 90       	pop	r12
    1772:	bf 90       	pop	r11
    1774:	af 90       	pop	r10
    1776:	7f 90       	pop	r7
    1778:	6f 90       	pop	r6
    177a:	5f 90       	pop	r5
    177c:	4f 90       	pop	r4
    177e:	08 95       	ret

00001780 <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    1780:	cf 92       	push	r12
    1782:	ef 92       	push	r14
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    1788:	c2 2e       	mov	r12, r18
    178a:	e1 2c       	mov	r14, r1
    178c:	00 e0       	ldi	r16, 0x00	; 0
    178e:	10 e0       	ldi	r17, 0x00	; 0
    1790:	98 01       	movw	r18, r16
    1792:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <_ZN7TwoWire11requestFromEhhmhh>
}
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ef 90       	pop	r14
    179c:	cf 90       	pop	r12
    179e:	08 95       	ret

000017a0 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    17a0:	21 e0       	ldi	r18, 0x01	; 1
    17a2:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <_ZN7TwoWire11requestFromEhhh>

000017a6 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    17a6:	21 e0       	ldi	r18, 0x01	; 1
    17a8:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <_ZN7TwoWire11requestFromEhhh>

000017ac <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
    17ac:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <_ZN7TwoWire11requestFromEhhh>

000017b0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <_ZN7TwoWire15endTransmissionEh>

000017b6 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    17b6:	70 93 14 04 	sts	0x0414, r23	; 0x800414 <_ZN7TwoWire14user_onReceiveE+0x1>
    17ba:	60 93 13 04 	sts	0x0413, r22	; 0x800413 <_ZN7TwoWire14user_onReceiveE>
    17be:	08 95       	ret

000017c0 <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    17c0:	70 93 16 04 	sts	0x0416, r23	; 0x800416 <_ZN7TwoWire14user_onRequestE+0x1>
    17c4:	60 93 15 04 	sts	0x0415, r22	; 0x800415 <_ZN7TwoWire14user_onRequestE>
    17c8:	08 95       	ret

000017ca <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    17ca:	87 e0       	ldi	r24, 0x07	; 7
    17cc:	94 e0       	ldi	r25, 0x04	; 4
    17ce:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <_ZN7TwoWireC1Ev>

000017d2 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	1f 92       	push	r1
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	69 83       	std	Y+1, r22	; 0x01
    17de:	dc 01       	movw	r26, r24
    17e0:	ed 91       	ld	r30, X+
    17e2:	fc 91       	ld	r31, X
    17e4:	02 80       	ldd	r0, Z+2	; 0x02
    17e6:	f3 81       	ldd	r31, Z+3	; 0x03
    17e8:	e0 2d       	mov	r30, r0
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	be 01       	movw	r22, r28
    17f0:	6f 5f       	subi	r22, 0xFF	; 255
    17f2:	7f 4f       	sbci	r23, 0xFF	; 255
    17f4:	09 95       	icall
    17f6:	0f 90       	pop	r0
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <_ZN7Serial_4peekEv>:
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	ec 01       	movw	r28, r24
    1804:	8c 85       	ldd	r24, Y+12	; 0x0c
    1806:	9d 85       	ldd	r25, Y+13	; 0x0d
    1808:	97 ff       	sbrs	r25, 7
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <_ZN7Serial_4peekEv+0x18>
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z8USB_Recvh>
    1812:	9d 87       	std	Y+13, r25	; 0x0d
    1814:	8c 87       	std	Y+12, r24	; 0x0c
    1816:	8c 85       	ldd	r24, Y+12	; 0x0c
    1818:	9d 85       	ldd	r25, Y+13	; 0x0d
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <_ZN7Serial_17availableForWriteEv>:
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	0e 94 82 13 	call	0x2704	; 0x2704 <_Z13USB_SendSpaceh>
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	08 95       	ret

0000182a <_ZN7Serial_5flushEv>:
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <_Z9USB_Flushh>

00001830 <_ZN7Serial_9availableEv>:
    1830:	fc 01       	movw	r30, r24
    1832:	84 85       	ldd	r24, Z+12	; 0x0c
    1834:	95 85       	ldd	r25, Z+13	; 0x0d
    1836:	97 fd       	sbrc	r25, 7
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <_ZN7Serial_9availableEv+0x16>
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	0e 94 16 13 	call	0x262c	; 0x262c <_Z13USB_Availableh>
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	08 95       	ret
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	0e 94 16 13 	call	0x262c	; 0x262c <_Z13USB_Availableh>
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	08 95       	ret

00001850 <_ZN7Serial_4readEv>:
    1850:	fc 01       	movw	r30, r24
    1852:	84 85       	ldd	r24, Z+12	; 0x0c
    1854:	95 85       	ldd	r25, Z+13	; 0x0d
    1856:	97 fd       	sbrc	r25, 7
    1858:	05 c0       	rjmp	.+10     	; 0x1864 <_ZN7Serial_4readEv+0x14>
    185a:	2f ef       	ldi	r18, 0xFF	; 255
    185c:	3f ef       	ldi	r19, 0xFF	; 255
    185e:	35 87       	std	Z+13, r19	; 0x0d
    1860:	24 87       	std	Z+12, r18	; 0x0c
    1862:	08 95       	ret
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <_Z8USB_Recvh>

0000186a <_ZN7Serial_5writeEPKhj>:
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	ec 01       	movw	r28, r24
    1870:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZL12_usbLineInfo+0x7>
    1874:	88 23       	and	r24, r24
    1876:	31 f0       	breq	.+12     	; 0x1884 <_ZN7Serial_5writeEPKhj+0x1a>
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	0e 94 9c 13 	call	0x2738	; 0x2738 <_Z8USB_SendhPKvi>
    187e:	18 16       	cp	r1, r24
    1880:	19 06       	cpc	r1, r25
    1882:	34 f0       	brlt	.+12     	; 0x1890 <_ZN7Serial_5writeEPKhj+0x26>
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9b 83       	std	Y+3, r25	; 0x03
    188a:	8a 83       	std	Y+2, r24	; 0x02
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <_Z16CDC_GetInterfacePh>:
    1896:	fc 01       	movw	r30, r24
    1898:	90 81       	ld	r25, Z
    189a:	9e 5f       	subi	r25, 0xFE	; 254
    189c:	90 83       	st	Z, r25
    189e:	42 e4       	ldi	r20, 0x42	; 66
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	68 ee       	ldi	r22, 0xE8	; 232
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	80 e8       	ldi	r24, 0x80	; 128
    18a8:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <_Z15USB_SendControlhPKvi>

000018ac <_Z9CDC_SetupR8USBSetup>:
    18ac:	fc 01       	movw	r30, r24
    18ae:	81 81       	ldd	r24, Z+1	; 0x01
    18b0:	90 81       	ld	r25, Z
    18b2:	91 3a       	cpi	r25, 0xA1	; 161
    18b4:	59 f4       	brne	.+22     	; 0x18cc <_Z9CDC_SetupR8USBSetup+0x20>
    18b6:	81 32       	cpi	r24, 0x21	; 33
    18b8:	09 f0       	breq	.+2      	; 0x18bc <_Z9CDC_SetupR8USBSetup+0x10>
    18ba:	5c c0       	rjmp	.+184    	; 0x1974 <_Z9CDC_SetupR8USBSetup+0xc8>
    18bc:	47 e0       	ldi	r20, 0x07	; 7
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	6c ec       	ldi	r22, 0xCC	; 204
    18c2:	71 e0       	ldi	r23, 0x01	; 1
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	0e 94 4c 14 	call	0x2898	; 0x2898 <_Z15USB_SendControlhPKvi>
    18ca:	52 c0       	rjmp	.+164    	; 0x1970 <_Z9CDC_SetupR8USBSetup+0xc4>
    18cc:	91 32       	cpi	r25, 0x21	; 33
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <_Z9CDC_SetupR8USBSetup+0x26>
    18d0:	51 c0       	rjmp	.+162    	; 0x1974 <_Z9CDC_SetupR8USBSetup+0xc8>
    18d2:	83 32       	cpi	r24, 0x23	; 35
    18d4:	69 f4       	brne	.+26     	; 0x18f0 <_Z9CDC_SetupR8USBSetup+0x44>
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <_ZL10breakValue>
    18e2:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <_ZL10breakValue+0x1>
    18e6:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <_ZL10breakValue+0x2>
    18ea:	b0 93 cb 01 	sts	0x01CB, r27	; 0x8001cb <_ZL10breakValue+0x3>
    18ee:	40 c0       	rjmp	.+128    	; 0x1970 <_Z9CDC_SetupR8USBSetup+0xc4>
    18f0:	80 32       	cpi	r24, 0x20	; 32
    18f2:	39 f4       	brne	.+14     	; 0x1902 <_Z9CDC_SetupR8USBSetup+0x56>
    18f4:	67 e0       	ldi	r22, 0x07	; 7
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	8c ec       	ldi	r24, 0xCC	; 204
    18fa:	91 e0       	ldi	r25, 0x01	; 1
    18fc:	0e 94 73 14 	call	0x28e6	; 0x28e6 <_Z15USB_RecvControlPvi>
    1900:	05 c0       	rjmp	.+10     	; 0x190c <_Z9CDC_SetupR8USBSetup+0x60>
    1902:	82 32       	cpi	r24, 0x22	; 34
    1904:	a9 f5       	brne	.+106    	; 0x1970 <_Z9CDC_SetupR8USBSetup+0xc4>
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <_ZL12_usbLineInfo+0x7>
    190c:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <_updatedLUFAbootloader>
    1910:	88 23       	and	r24, r24
    1912:	19 f0       	breq	.+6      	; 0x191a <_Z9CDC_SetupR8USBSetup+0x6e>
    1914:	ee ef       	ldi	r30, 0xFE	; 254
    1916:	fa e0       	ldi	r31, 0x0A	; 10
    1918:	02 c0       	rjmp	.+4      	; 0x191e <_Z9CDC_SetupR8USBSetup+0x72>
    191a:	e0 e0       	ldi	r30, 0x00	; 0
    191c:	f8 e0       	ldi	r31, 0x08	; 8
    191e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_ZL12_usbLineInfo>
    1922:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_ZL12_usbLineInfo+0x1>
    1926:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <_ZL12_usbLineInfo+0x2>
    192a:	b0 91 cf 01 	lds	r27, 0x01CF	; 0x8001cf <_ZL12_usbLineInfo+0x3>
    192e:	80 3b       	cpi	r24, 0xB0	; 176
    1930:	94 40       	sbci	r25, 0x04	; 4
    1932:	a1 05       	cpc	r26, r1
    1934:	b1 05       	cpc	r27, r1
    1936:	01 f5       	brne	.+64     	; 0x1978 <_Z9CDC_SetupR8USBSetup+0xcc>
    1938:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZL12_usbLineInfo+0x7>
    193c:	80 fd       	sbrc	r24, 0
    193e:	1c c0       	rjmp	.+56     	; 0x1978 <_Z9CDC_SetupR8USBSetup+0xcc>
    1940:	ee 3f       	cpi	r30, 0xFE	; 254
    1942:	2a e0       	ldi	r18, 0x0A	; 10
    1944:	f2 07       	cpc	r31, r18
    1946:	31 f0       	breq	.+12     	; 0x1954 <_Z9CDC_SetupR8USBSetup+0xa8>
    1948:	80 81       	ld	r24, Z
    194a:	91 81       	ldd	r25, Z+1	; 0x01
    194c:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x5d2>
    1950:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x5d1>
    1954:	87 e7       	ldi	r24, 0x77	; 119
    1956:	97 e7       	ldi	r25, 0x77	; 119
    1958:	91 83       	std	Z+1, r25	; 0x01
    195a:	80 83       	st	Z, r24
    195c:	9b e0       	ldi	r25, 0x0B	; 11
    195e:	88 e1       	ldi	r24, 0x18	; 24
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	a8 95       	wdr
    1966:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	08 95       	ret
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	08 95       	ret
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	a8 95       	wdr
    197e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1982:	88 61       	ori	r24, 0x18	; 24
    1984:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1988:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	a8 95       	wdr
    1990:	ee 3f       	cpi	r30, 0xFE	; 254
    1992:	8a e0       	ldi	r24, 0x0A	; 10
    1994:	f8 07       	cpc	r31, r24
    1996:	39 f0       	breq	.+14     	; 0x19a6 <_Z9CDC_SetupR8USBSetup+0xfa>
    1998:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x5d1>
    199c:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x5d2>
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    19a4:	e5 cf       	rjmp	.-54     	; 0x1970 <_Z9CDC_SetupR8USBSetup+0xc4>
    19a6:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x5d2>
    19aa:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x5d1>
    19ae:	e0 cf       	rjmp	.-64     	; 0x1970 <_Z9CDC_SetupR8USBSetup+0xc4>

000019b0 <_ZN7Serial_5beginEm>:
    19b0:	2f ef       	ldi	r18, 0xFF	; 255
    19b2:	3f ef       	ldi	r19, 0xFF	; 255
    19b4:	fc 01       	movw	r30, r24
    19b6:	35 87       	std	Z+13, r19	; 0x0d
    19b8:	24 87       	std	Z+12, r18	; 0x0c
    19ba:	08 95       	ret

000019bc <_GLOBAL__sub_I__updatedLUFAbootloader>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    19bc:	ed e5       	ldi	r30, 0x5D	; 93
    19be:	f4 e0       	ldi	r31, 0x04	; 4
    19c0:	13 82       	std	Z+3, r1	; 0x03
    19c2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    19c4:	88 ee       	ldi	r24, 0xE8	; 232
    19c6:	93 e0       	ldi	r25, 0x03	; 3
    19c8:	a0 e0       	ldi	r26, 0x00	; 0
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	84 83       	std	Z+4, r24	; 0x04
    19ce:	95 83       	std	Z+5, r25	; 0x05
    19d0:	a6 83       	std	Z+6, r26	; 0x06
    19d2:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    19d4:	8d ef       	ldi	r24, 0xFD	; 253
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
    19dc:	8f ef       	ldi	r24, 0xFF	; 255
    19de:	9f ef       	ldi	r25, 0xFF	; 255
    19e0:	95 87       	std	Z+13, r25	; 0x0d
    19e2:	84 87       	std	Z+12, r24	; 0x0c
    19e4:	08 95       	ret

000019e6 <initVariant>:
    19e6:	08 95       	ret

000019e8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    19e8:	0e 94 73 18 	call	0x30e6	; 0x30e6 <init>

	initVariant();
    19ec:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    19f0:	8a ec       	ldi	r24, 0xCA	; 202
    19f2:	94 e0       	ldi	r25, 0x04	; 4
    19f4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    19f8:	0e 94 33 05 	call	0xa66	; 0xa66 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    19fc:	c0 e0       	ldi	r28, 0x00	; 0
    19fe:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1a00:	0e 94 3b 05 	call	0xa76	; 0xa76 <loop>
		if (serialEventRun) serialEventRun();
    1a04:	20 97       	sbiw	r28, 0x00	; 0
    1a06:	e1 f3       	breq	.-8      	; 0x1a00 <main+0x18>
    1a08:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a0c:	f9 cf       	rjmp	.-14     	; 0x1a00 <main+0x18>

00001a0e <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1a0e:	cf 92       	push	r12
    1a10:	df 92       	push	r13
    1a12:	ef 92       	push	r14
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	6c 01       	movw	r12, r24
    1a20:	7a 01       	movw	r14, r20
    1a22:	8b 01       	movw	r16, r22
    1a24:	c0 e0       	ldi	r28, 0x00	; 0
    1a26:	d0 e0       	ldi	r29, 0x00	; 0
    1a28:	ce 15       	cp	r28, r14
    1a2a:	df 05       	cpc	r29, r15
    1a2c:	81 f0       	breq	.+32     	; 0x1a4e <_ZN5Print5writeEPKhj+0x40>
    1a2e:	d8 01       	movw	r26, r16
    1a30:	6d 91       	ld	r22, X+
    1a32:	8d 01       	movw	r16, r26
    1a34:	d6 01       	movw	r26, r12
    1a36:	ed 91       	ld	r30, X+
    1a38:	fc 91       	ld	r31, X
    1a3a:	01 90       	ld	r0, Z+
    1a3c:	f0 81       	ld	r31, Z
    1a3e:	e0 2d       	mov	r30, r0
    1a40:	c6 01       	movw	r24, r12
    1a42:	09 95       	icall
    1a44:	89 2b       	or	r24, r25
    1a46:	11 f0       	breq	.+4      	; 0x1a4c <_ZN5Print5writeEPKhj+0x3e>
    1a48:	21 96       	adiw	r28, 0x01	; 1
    1a4a:	ee cf       	rjmp	.-36     	; 0x1a28 <_ZN5Print5writeEPKhj+0x1a>
    1a4c:	7e 01       	movw	r14, r28
    1a4e:	c7 01       	movw	r24, r14
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	ff 90       	pop	r15
    1a5a:	ef 90       	pop	r14
    1a5c:	df 90       	pop	r13
    1a5e:	cf 90       	pop	r12
    1a60:	08 95       	ret

00001a62 <_ZN5Print5writeEPKc>:
    1a62:	61 15       	cp	r22, r1
    1a64:	71 05       	cpc	r23, r1
    1a66:	79 f0       	breq	.+30     	; 0x1a86 <_ZN5Print5writeEPKc+0x24>
    1a68:	fb 01       	movw	r30, r22
    1a6a:	01 90       	ld	r0, Z+
    1a6c:	00 20       	and	r0, r0
    1a6e:	e9 f7       	brne	.-6      	; 0x1a6a <_ZN5Print5writeEPKc+0x8>
    1a70:	31 97       	sbiw	r30, 0x01	; 1
    1a72:	af 01       	movw	r20, r30
    1a74:	46 1b       	sub	r20, r22
    1a76:	57 0b       	sbc	r21, r23
    1a78:	dc 01       	movw	r26, r24
    1a7a:	ed 91       	ld	r30, X+
    1a7c:	fc 91       	ld	r31, X
    1a7e:	02 80       	ldd	r0, Z+2	; 0x02
    1a80:	f3 81       	ldd	r31, Z+3	; 0x03
    1a82:	e0 2d       	mov	r30, r0
    1a84:	09 94       	ijmp
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	08 95       	ret

00001a8c <_ZN5Print5printEc>:
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	ed 91       	ld	r30, X+
    1a90:	fc 91       	ld	r31, X
    1a92:	01 90       	ld	r0, Z+
    1a94:	f0 81       	ld	r31, Z
    1a96:	e0 2d       	mov	r30, r0
    1a98:	09 94       	ijmp

00001a9a <_ZN5Print7printlnEv>:
    1a9a:	6b e0       	ldi	r22, 0x0B	; 11
    1a9c:	72 e0       	ldi	r23, 0x02	; 2
    1a9e:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <_ZN5Print5writeEPKc>

00001aa2 <_ZN5Print11printNumberEmh>:
    1aa2:	8f 92       	push	r8
    1aa4:	9f 92       	push	r9
    1aa6:	af 92       	push	r10
    1aa8:	bf 92       	push	r11
    1aaa:	ef 92       	push	r14
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	a1 97       	sbiw	r28, 0x21	; 33
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	7c 01       	movw	r14, r24
    1ac8:	fa 01       	movw	r30, r20
    1aca:	cb 01       	movw	r24, r22
    1acc:	19 a2       	std	Y+33, r1	; 0x21
    1ace:	22 30       	cpi	r18, 0x02	; 2
    1ad0:	08 f4       	brcc	.+2      	; 0x1ad4 <_ZN5Print11printNumberEmh+0x32>
    1ad2:	2a e0       	ldi	r18, 0x0A	; 10
    1ad4:	8e 01       	movw	r16, r28
    1ad6:	0f 5d       	subi	r16, 0xDF	; 223
    1ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ada:	82 2e       	mov	r8, r18
    1adc:	91 2c       	mov	r9, r1
    1ade:	a1 2c       	mov	r10, r1
    1ae0:	b1 2c       	mov	r11, r1
    1ae2:	bf 01       	movw	r22, r30
    1ae4:	a5 01       	movw	r20, r10
    1ae6:	94 01       	movw	r18, r8
    1ae8:	0e 94 3e 21 	call	0x427c	; 0x427c <__udivmodsi4>
    1aec:	f9 01       	movw	r30, r18
    1aee:	ca 01       	movw	r24, r20
    1af0:	01 50       	subi	r16, 0x01	; 1
    1af2:	11 09       	sbc	r17, r1
    1af4:	6a 30       	cpi	r22, 0x0A	; 10
    1af6:	10 f4       	brcc	.+4      	; 0x1afc <_ZN5Print11printNumberEmh+0x5a>
    1af8:	60 5d       	subi	r22, 0xD0	; 208
    1afa:	01 c0       	rjmp	.+2      	; 0x1afe <_ZN5Print11printNumberEmh+0x5c>
    1afc:	69 5c       	subi	r22, 0xC9	; 201
    1afe:	d8 01       	movw	r26, r16
    1b00:	6c 93       	st	X, r22
    1b02:	23 2b       	or	r18, r19
    1b04:	24 2b       	or	r18, r20
    1b06:	25 2b       	or	r18, r21
    1b08:	61 f7       	brne	.-40     	; 0x1ae2 <_ZN5Print11printNumberEmh+0x40>
    1b0a:	b8 01       	movw	r22, r16
    1b0c:	c7 01       	movw	r24, r14
    1b0e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN5Print5writeEPKc>
    1b12:	a1 96       	adiw	r28, 0x21	; 33
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	ff 90       	pop	r15
    1b28:	ef 90       	pop	r14
    1b2a:	bf 90       	pop	r11
    1b2c:	af 90       	pop	r10
    1b2e:	9f 90       	pop	r9
    1b30:	8f 90       	pop	r8
    1b32:	08 95       	ret

00001b34 <_ZN5Print5printEmi>:
    1b34:	21 15       	cp	r18, r1
    1b36:	31 05       	cpc	r19, r1
    1b38:	41 f4       	brne	.+16     	; 0x1b4a <_ZN5Print5printEmi+0x16>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	ed 91       	ld	r30, X+
    1b3e:	fc 91       	ld	r31, X
    1b40:	01 90       	ld	r0, Z+
    1b42:	f0 81       	ld	r31, Z
    1b44:	e0 2d       	mov	r30, r0
    1b46:	64 2f       	mov	r22, r20
    1b48:	09 94       	ijmp
    1b4a:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <_ZN5Print11printNumberEmh>

00001b4e <_ZN5Print5printEji>:
    1b4e:	9a 01       	movw	r18, r20
    1b50:	ab 01       	movw	r20, r22
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <_ZN5Print5printEmi>

00001b5a <_ZN5Print7printlnEmi>:
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	ec 01       	movw	r28, r24
    1b64:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN5Print5printEmi>
    1b68:	8c 01       	movw	r16, r24
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_ZN5Print7printlnEv>
    1b70:	80 0f       	add	r24, r16
    1b72:	91 1f       	adc	r25, r17
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	08 95       	ret

00001b7e <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1b7e:	7f 92       	push	r7
    1b80:	8f 92       	push	r8
    1b82:	9f 92       	push	r9
    1b84:	af 92       	push	r10
    1b86:	bf 92       	push	r11
    1b88:	cf 92       	push	r12
    1b8a:	df 92       	push	r13
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	8c 01       	movw	r16, r24
    1b9a:	6a 01       	movw	r12, r20
    1b9c:	7b 01       	movw	r14, r22
    1b9e:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1ba0:	9a 01       	movw	r18, r20
    1ba2:	ab 01       	movw	r20, r22
    1ba4:	c7 01       	movw	r24, r14
    1ba6:	b6 01       	movw	r22, r12
    1ba8:	0e 94 25 21 	call	0x424a	; 0x424a <__unordsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	19 f0       	breq	.+6      	; 0x1bb6 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1bb0:	6e e0       	ldi	r22, 0x0E	; 14
    1bb2:	72 e0       	ldi	r23, 0x02	; 2
    1bb4:	27 c0       	rjmp	.+78     	; 0x1c04 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1bb6:	46 01       	movw	r8, r12
    1bb8:	57 01       	movw	r10, r14
    1bba:	e8 94       	clt
    1bbc:	b7 f8       	bld	r11, 7
    1bbe:	2f ef       	ldi	r18, 0xFF	; 255
    1bc0:	3f ef       	ldi	r19, 0xFF	; 255
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	5f e7       	ldi	r21, 0x7F	; 127
    1bc6:	c5 01       	movw	r24, r10
    1bc8:	b4 01       	movw	r22, r8
    1bca:	0e 94 25 21 	call	0x424a	; 0x424a <__unordsf2>
    1bce:	81 11       	cpse	r24, r1
    1bd0:	0d c0       	rjmp	.+26     	; 0x1bec <_ZN5Print10printFloatEdh+0x6e>
    1bd2:	2f ef       	ldi	r18, 0xFF	; 255
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	5f e7       	ldi	r21, 0x7F	; 127
    1bda:	c5 01       	movw	r24, r10
    1bdc:	b4 01       	movw	r22, r8
    1bde:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <__cmpsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	1c f4       	brge	.+6      	; 0x1bec <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1be6:	62 e1       	ldi	r22, 0x12	; 18
    1be8:	72 e0       	ldi	r23, 0x02	; 2
    1bea:	0c c0       	rjmp	.+24     	; 0x1c04 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1bec:	2f ef       	ldi	r18, 0xFF	; 255
    1bee:	3f ef       	ldi	r19, 0xFF	; 255
    1bf0:	4f e7       	ldi	r20, 0x7F	; 127
    1bf2:	5f e4       	ldi	r21, 0x4F	; 79
    1bf4:	c7 01       	movw	r24, r14
    1bf6:	b6 01       	movw	r22, r12
    1bf8:	0e 94 b3 20 	call	0x4166	; 0x4166 <__gesf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	94 f4       	brge	.+36     	; 0x1c24 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1c00:	66 e1       	ldi	r22, 0x16	; 22
    1c02:	72 e0       	ldi	r23, 0x02	; 2
    1c04:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	ff 90       	pop	r15
    1c10:	ef 90       	pop	r14
    1c12:	df 90       	pop	r13
    1c14:	cf 90       	pop	r12
    1c16:	bf 90       	pop	r11
    1c18:	af 90       	pop	r10
    1c1a:	9f 90       	pop	r9
    1c1c:	8f 90       	pop	r8
    1c1e:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1c20:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1c24:	2f ef       	ldi	r18, 0xFF	; 255
    1c26:	3f ef       	ldi	r19, 0xFF	; 255
    1c28:	4f e7       	ldi	r20, 0x7F	; 127
    1c2a:	5f ec       	ldi	r21, 0xCF	; 207
    1c2c:	c7 01       	movw	r24, r14
    1c2e:	b6 01       	movw	r22, r12
    1c30:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <__cmpsf2>
    1c34:	87 fd       	sbrc	r24, 7
    1c36:	e4 cf       	rjmp	.-56     	; 0x1c00 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	a9 01       	movw	r20, r18
    1c3e:	c7 01       	movw	r24, r14
    1c40:	b6 01       	movw	r22, r12
    1c42:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <__cmpsf2>
    1c46:	87 ff       	sbrs	r24, 7
    1c48:	0a c0       	rjmp	.+20     	; 0x1c5e <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1c4a:	6d e2       	ldi	r22, 0x2D	; 45
    1c4c:	c8 01       	movw	r24, r16
    1c4e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <_ZN5Print5printEc>
    1c52:	ec 01       	movw	r28, r24
     number = -number;
    1c54:	f7 fa       	bst	r15, 7
    1c56:	f0 94       	com	r15
    1c58:	f7 f8       	bld	r15, 7
    1c5a:	f0 94       	com	r15
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1c5e:	c0 e0       	ldi	r28, 0x00	; 0
    1c60:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1c62:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1c6c:	7b 14       	cp	r7, r11
    1c6e:	41 f0       	breq	.+16     	; 0x1c80 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	51 e4       	ldi	r21, 0x41	; 65
    1c78:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1c7c:	b3 94       	inc	r11
    1c7e:	f6 cf       	rjmp	.-20     	; 0x1c6c <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1c80:	a7 01       	movw	r20, r14
    1c82:	96 01       	movw	r18, r12
    1c84:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__addsf3>
    1c88:	6b 01       	movw	r12, r22
    1c8a:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1c8c:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <__fixunssfsi>
    1c90:	4b 01       	movw	r8, r22
    1c92:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1c94:	2a e0       	ldi	r18, 0x0A	; 10
    1c96:	ab 01       	movw	r20, r22
    1c98:	bc 01       	movw	r22, r24
    1c9a:	c8 01       	movw	r24, r16
    1c9c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1ca0:	c8 0f       	add	r28, r24
    1ca2:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1ca4:	77 20       	and	r7, r7
    1ca6:	b9 f1       	breq	.+110    	; 0x1d16 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1ca8:	c5 01       	movw	r24, r10
    1caa:	b4 01       	movw	r22, r8
    1cac:	0e 94 01 20 	call	0x4002	; 0x4002 <__floatunsisf>
    1cb0:	9b 01       	movw	r18, r22
    1cb2:	ac 01       	movw	r20, r24
    1cb4:	c7 01       	movw	r24, r14
    1cb6:	b6 01       	movw	r22, r12
    1cb8:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__subsf3>
    1cbc:	6b 01       	movw	r12, r22
    1cbe:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1cc0:	6e e2       	ldi	r22, 0x2E	; 46
    1cc2:	c8 01       	movw	r24, r16
    1cc4:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <_ZN5Print5printEc>
    1cc8:	c8 0f       	add	r28, r24
    1cca:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	c7 01       	movw	r24, r14
    1cd6:	b6 01       	movw	r22, r12
    1cd8:	0e 94 b8 20 	call	0x4170	; 0x4170 <__mulsf3>
    1cdc:	4b 01       	movw	r8, r22
    1cde:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1ce0:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <__fixunssfsi>
    1ce4:	6b 01       	movw	r12, r22
    1ce6:	7c 01       	movw	r14, r24
    n += print(toPrint);
    1ce8:	4a e0       	ldi	r20, 0x0A	; 10
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	c8 01       	movw	r24, r16
    1cee:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN5Print5printEji>
    1cf2:	c8 0f       	add	r28, r24
    1cf4:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1cf6:	b6 01       	movw	r22, r12
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 01 20 	call	0x4002	; 0x4002 <__floatunsisf>
    1d00:	9b 01       	movw	r18, r22
    1d02:	ac 01       	movw	r20, r24
    1d04:	c5 01       	movw	r24, r10
    1d06:	b4 01       	movw	r22, r8
    1d08:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__subsf3>
    1d0c:	6b 01       	movw	r12, r22
    1d0e:	7c 01       	movw	r14, r24
    1d10:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1d12:	71 10       	cpse	r7, r1
    1d14:	db cf       	rjmp	.-74     	; 0x1ccc <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1d16:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	ff 90       	pop	r15
    1d22:	ef 90       	pop	r14
    1d24:	df 90       	pop	r13
    1d26:	cf 90       	pop	r12
    1d28:	bf 90       	pop	r11
    1d2a:	af 90       	pop	r10
    1d2c:	9f 90       	pop	r9
    1d2e:	8f 90       	pop	r8
    1d30:	7f 90       	pop	r7
    1d32:	08 95       	ret

00001d34 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1d34:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <_ZN5Print10printFloatEdh>

00001d38 <_ZN6Stream9timedReadEv>:
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	ec 01       	movw	r28, r24
    1d42:	0e 94 06 18 	call	0x300c	; 0x300c <millis>
    1d46:	68 87       	std	Y+8, r22	; 0x08
    1d48:	79 87       	std	Y+9, r23	; 0x09
    1d4a:	8a 87       	std	Y+10, r24	; 0x0a
    1d4c:	9b 87       	std	Y+11, r25	; 0x0b
    1d4e:	e8 81       	ld	r30, Y
    1d50:	f9 81       	ldd	r31, Y+1	; 0x01
    1d52:	02 84       	ldd	r0, Z+10	; 0x0a
    1d54:	f3 85       	ldd	r31, Z+11	; 0x0b
    1d56:	e0 2d       	mov	r30, r0
    1d58:	ce 01       	movw	r24, r28
    1d5a:	09 95       	icall
    1d5c:	97 ff       	sbrs	r25, 7
    1d5e:	17 c0       	rjmp	.+46     	; 0x1d8e <_ZN6Stream9timedReadEv+0x56>
    1d60:	0e 94 06 18 	call	0x300c	; 0x300c <millis>
    1d64:	08 85       	ldd	r16, Y+8	; 0x08
    1d66:	19 85       	ldd	r17, Y+9	; 0x09
    1d68:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d6a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	80 1b       	sub	r24, r16
    1d72:	91 0b       	sbc	r25, r17
    1d74:	a2 0b       	sbc	r26, r18
    1d76:	b3 0b       	sbc	r27, r19
    1d78:	0c 81       	ldd	r16, Y+4	; 0x04
    1d7a:	1d 81       	ldd	r17, Y+5	; 0x05
    1d7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d80:	80 17       	cp	r24, r16
    1d82:	91 07       	cpc	r25, r17
    1d84:	a2 07       	cpc	r26, r18
    1d86:	b3 07       	cpc	r27, r19
    1d88:	10 f3       	brcs	.-60     	; 0x1d4e <_ZN6Stream9timedReadEv+0x16>
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	9f ef       	ldi	r25, 0xFF	; 255
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	08 95       	ret

00001d98 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    1d98:	cf 92       	push	r12
    1d9a:	df 92       	push	r13
    1d9c:	ef 92       	push	r14
    1d9e:	ff 92       	push	r15
    1da0:	0f 93       	push	r16
    1da2:	1f 93       	push	r17
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	6c 01       	movw	r12, r24
    1daa:	7a 01       	movw	r14, r20
    1dac:	8b 01       	movw	r16, r22
  size_t count = 0;
    1dae:	c0 e0       	ldi	r28, 0x00	; 0
    1db0:	d0 e0       	ldi	r29, 0x00	; 0
  while (count < length) {
    1db2:	ce 15       	cp	r28, r14
    1db4:	df 05       	cpc	r29, r15
    1db6:	59 f0       	breq	.+22     	; 0x1dce <_ZN6Stream9readBytesEPcj+0x36>
    int c = timedRead();
    1db8:	c6 01       	movw	r24, r12
    1dba:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    1dbe:	97 fd       	sbrc	r25, 7
    1dc0:	05 c0       	rjmp	.+10     	; 0x1dcc <_ZN6Stream9readBytesEPcj+0x34>
    *buffer++ = (char)c;
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	81 93       	st	Z+, r24
    1dc6:	8f 01       	movw	r16, r30
    count++;
    1dc8:	21 96       	adiw	r28, 0x01	; 1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    1dca:	f3 cf       	rjmp	.-26     	; 0x1db2 <_ZN6Stream9readBytesEPcj+0x1a>
    1dcc:	7e 01       	movw	r14, r28
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    1dce:	c7 01       	movw	r24, r14
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	ff 90       	pop	r15
    1dda:	ef 90       	pop	r14
    1ddc:	df 90       	pop	r13
    1dde:	cf 90       	pop	r12
    1de0:	08 95       	ret

00001de2 <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    1de2:	4f 92       	push	r4
    1de4:	5f 92       	push	r5
    1de6:	6f 92       	push	r6
    1de8:	7f 92       	push	r7
    1dea:	8f 92       	push	r8
    1dec:	9f 92       	push	r9
    1dee:	af 92       	push	r10
    1df0:	bf 92       	push	r11
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <_Z4tonehjm+0x22>
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <_Z4tonehjm+0x24>
    1e06:	1f 92       	push	r1
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	8b 01       	movw	r16, r22
    1e0e:	29 01       	movw	r4, r18
    1e10:	3a 01       	movw	r6, r20
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1e12:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZL9tone_pins>
    1e16:	89 17       	cp	r24, r25
    1e18:	21 f0       	breq	.+8      	; 0x1e22 <_Z4tonehjm+0x40>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    1e1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <_Z4tonehjm+0x3e>
    1e1e:	a8 c2       	rjmp	.+1360   	; 0x2370 <_Z4tonehjm+0x58e>
    1e20:	05 c0       	rjmp	.+10     	; 0x1e2c <_Z4tonehjm+0x4a>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    1e22:	ea e2       	ldi	r30, 0x2A	; 42
    1e24:	f1 e0       	ldi	r31, 0x01	; 1
    1e26:	24 91       	lpm	r18, Z
    1e28:	2d 83       	std	Y+5, r18	; 0x05
    1e2a:	ac c0       	rjmp	.+344    	; 0x1f84 <_Z4tonehjm+0x1a2>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    1e2c:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <_ZL9tone_pins>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1e30:	ea e2       	ldi	r30, 0x2A	; 42
    1e32:	f1 e0       	ldi	r31, 0x01	; 1
    1e34:	94 91       	lpm	r25, Z
    1e36:	9d 83       	std	Y+5, r25	; 0x05
      break;
    }
  }
  
  if (_timer != -1)
    1e38:	9f 3f       	cpi	r25, 0xFF	; 255
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <_Z4tonehjm+0x5c>
    1e3c:	99 c2       	rjmp	.+1330   	; 0x2370 <_Z4tonehjm+0x58e>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    1e3e:	91 30       	cpi	r25, 0x01	; 1
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <_Z4tonehjm+0x62>
    1e42:	4f c0       	rjmp	.+158    	; 0x1ee2 <_Z4tonehjm+0x100>
    1e44:	68 f1       	brcs	.+90     	; 0x1ea0 <_Z4tonehjm+0xbe>
    1e46:	93 30       	cpi	r25, 0x03	; 3
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <_Z4tonehjm+0x6a>
    1e4a:	72 c0       	rjmp	.+228    	; 0x1f30 <_Z4tonehjm+0x14e>
    1e4c:	94 30       	cpi	r25, 0x04	; 4
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <_Z4tonehjm+0x70>
    1e50:	99 c0       	rjmp	.+306    	; 0x1f84 <_Z4tonehjm+0x1a2>
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
    1e52:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
        TCCR4B = 0;
    1e56:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
        #elif defined(CS43)
          // TODO this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
    1e5a:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1e5e:	98 60       	ori	r25, 0x08	; 8
    1e60:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
        #endif
        bitWrite(TCCR4B, CS40, 1);
    1e64:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1e68:	91 60       	ori	r25, 0x01	; 1
    1e6a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	f9 01       	movw	r30, r18
    1e74:	e8 55       	subi	r30, 0x58	; 88
    1e76:	fe 4f       	sbci	r31, 0xFE	; 254
    1e78:	e4 91       	lpm	r30, Z
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	eb 52       	subi	r30, 0x2B	; 43
    1e82:	fe 4f       	sbci	r31, 0xFE	; 254
    1e84:	45 91       	lpm	r20, Z+
    1e86:	54 91       	lpm	r21, Z
    1e88:	50 93 b0 04 	sts	0x04B0, r21	; 0x8004b0 <timer4_pin_port+0x1>
    1e8c:	40 93 af 04 	sts	0x04AF, r20	; 0x8004af <timer4_pin_port>
        timer4_pin_mask = digitalPinToBitMask(_pin);
    1e90:	f9 01       	movw	r30, r18
    1e92:	e7 57       	subi	r30, 0x77	; 119
    1e94:	fe 4f       	sbci	r31, 0xFE	; 254
    1e96:	e4 91       	lpm	r30, Z
    1e98:	e0 93 ae 04 	sts	0x04AE, r30	; 0x8004ae <timer4_pin_mask>
    1e9c:	24 e0       	ldi	r18, 0x04	; 4
    1e9e:	70 c0       	rjmp	.+224    	; 0x1f80 <_Z4tonehjm+0x19e>
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    1ea0:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
    1ea2:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
    1ea4:	94 b5       	in	r25, 0x24	; 36
    1ea6:	92 60       	ori	r25, 0x02	; 2
    1ea8:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
    1eaa:	95 b5       	in	r25, 0x25	; 37
    1eac:	91 60       	ori	r25, 0x01	; 1
    1eae:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	f9 01       	movw	r30, r18
    1eb6:	e8 55       	subi	r30, 0x58	; 88
    1eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eba:	e4 91       	lpm	r30, Z
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	ee 0f       	add	r30, r30
    1ec0:	ff 1f       	adc	r31, r31
    1ec2:	eb 52       	subi	r30, 0x2B	; 43
    1ec4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec6:	45 91       	lpm	r20, Z+
    1ec8:	54 91       	lpm	r21, Z
    1eca:	50 93 c5 04 	sts	0x04C5, r21	; 0x8004c5 <timer0_pin_port+0x1>
    1ece:	40 93 c4 04 	sts	0x04C4, r20	; 0x8004c4 <timer0_pin_port>
        timer0_pin_mask = digitalPinToBitMask(_pin);
    1ed2:	f9 01       	movw	r30, r18
    1ed4:	e7 57       	subi	r30, 0x77	; 119
    1ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed8:	e4 91       	lpm	r30, Z
    1eda:	e0 93 c3 04 	sts	0x04C3, r30	; 0x8004c3 <timer0_pin_mask>
    1ede:	1d 82       	std	Y+5, r1	; 0x05
    1ee0:	54 c0       	rjmp	.+168    	; 0x1f8a <_Z4tonehjm+0x1a8>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    1ee2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
        TCCR1B = 0;
    1ee6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        bitWrite(TCCR1B, WGM12, 1);
    1eea:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1eee:	98 60       	ori	r25, 0x08	; 8
    1ef0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        bitWrite(TCCR1B, CS10, 1);
    1ef4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1ef8:	91 60       	ori	r25, 0x01	; 1
    1efa:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	f9 01       	movw	r30, r18
    1f04:	e8 55       	subi	r30, 0x58	; 88
    1f06:	fe 4f       	sbci	r31, 0xFE	; 254
    1f08:	e4 91       	lpm	r30, Z
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	eb 52       	subi	r30, 0x2B	; 43
    1f12:	fe 4f       	sbci	r31, 0xFE	; 254
    1f14:	45 91       	lpm	r20, Z+
    1f16:	54 91       	lpm	r21, Z
    1f18:	50 93 be 04 	sts	0x04BE, r21	; 0x8004be <timer1_pin_port+0x1>
    1f1c:	40 93 bd 04 	sts	0x04BD, r20	; 0x8004bd <timer1_pin_port>
        timer1_pin_mask = digitalPinToBitMask(_pin);
    1f20:	f9 01       	movw	r30, r18
    1f22:	e7 57       	subi	r30, 0x77	; 119
    1f24:	fe 4f       	sbci	r31, 0xFE	; 254
    1f26:	e4 91       	lpm	r30, Z
    1f28:	e0 93 bc 04 	sts	0x04BC, r30	; 0x8004bc <timer1_pin_mask>
    1f2c:	21 e0       	ldi	r18, 0x01	; 1
    1f2e:	28 c0       	rjmp	.+80     	; 0x1f80 <_Z4tonehjm+0x19e>
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
    1f30:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
        TCCR3B = 0;
    1f34:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
        bitWrite(TCCR3B, WGM32, 1);
    1f38:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
    1f3c:	98 60       	ori	r25, 0x08	; 8
    1f3e:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
        bitWrite(TCCR3B, CS30, 1);
    1f42:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
    1f46:	91 60       	ori	r25, 0x01	; 1
    1f48:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	f9 01       	movw	r30, r18
    1f52:	e8 55       	subi	r30, 0x58	; 88
    1f54:	fe 4f       	sbci	r31, 0xFE	; 254
    1f56:	e4 91       	lpm	r30, Z
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	eb 52       	subi	r30, 0x2B	; 43
    1f60:	fe 4f       	sbci	r31, 0xFE	; 254
    1f62:	45 91       	lpm	r20, Z+
    1f64:	54 91       	lpm	r21, Z
    1f66:	50 93 b7 04 	sts	0x04B7, r21	; 0x8004b7 <timer3_pin_port+0x1>
    1f6a:	40 93 b6 04 	sts	0x04B6, r20	; 0x8004b6 <timer3_pin_port>
        timer3_pin_mask = digitalPinToBitMask(_pin);
    1f6e:	f9 01       	movw	r30, r18
    1f70:	e7 57       	subi	r30, 0x77	; 119
    1f72:	fe 4f       	sbci	r31, 0xFE	; 254
    1f74:	e4 91       	lpm	r30, Z
    1f76:	e0 93 b5 04 	sts	0x04B5, r30	; 0x8004b5 <timer3_pin_mask>
    1f7a:	93 e0       	ldi	r25, 0x03	; 3
    1f7c:	9d 83       	std	Y+5, r25	; 0x05
    1f7e:	82 c0       	rjmp	.+260    	; 0x2084 <_Z4tonehjm+0x2a2>
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
        timer4_pin_mask = digitalPinToBitMask(_pin);
    1f80:	2d 83       	std	Y+5, r18	; 0x05
    1f82:	80 c0       	rjmp	.+256    	; 0x2084 <_Z4tonehjm+0x2a2>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    1f84:	9d 81       	ldd	r25, Y+5	; 0x05
    1f86:	97 fd       	sbrc	r25, 7
    1f88:	f3 c1       	rjmp	.+998    	; 0x2370 <_Z4tonehjm+0x58e>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	0e 94 cf 19 	call	0x339e	; 0x339e <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	8d 7f       	andi	r24, 0xFD	; 253
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <_Z4tonehjm+0x1b6>
    1f96:	79 c0       	rjmp	.+242    	; 0x208a <_Z4tonehjm+0x2a8>
    {
      ocr = F_CPU / frequency / 2 - 1;
    1f98:	48 01       	movw	r8, r16
    1f9a:	a1 2c       	mov	r10, r1
    1f9c:	b1 2c       	mov	r11, r1
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	72 e1       	ldi	r23, 0x12	; 18
    1fa2:	8a e7       	ldi	r24, 0x7A	; 122
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a5 01       	movw	r20, r10
    1fa8:	94 01       	movw	r18, r8
    1faa:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    1fae:	29 83       	std	Y+1, r18	; 0x01
    1fb0:	3a 83       	std	Y+2, r19	; 0x02
    1fb2:	4b 83       	std	Y+3, r20	; 0x03
    1fb4:	5c 83       	std	Y+4, r21	; 0x04
    1fb6:	69 01       	movw	r12, r18
    1fb8:	7a 01       	movw	r14, r20
    1fba:	21 e0       	ldi	r18, 0x01	; 1
    1fbc:	c2 1a       	sub	r12, r18
    1fbe:	d1 08       	sbc	r13, r1
    1fc0:	e1 08       	sbc	r14, r1
    1fc2:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    1fc4:	8f ef       	ldi	r24, 0xFF	; 255
    1fc6:	c8 16       	cp	r12, r24
    1fc8:	d1 04       	cpc	r13, r1
    1fca:	e1 04       	cpc	r14, r1
    1fcc:	f1 04       	cpc	r15, r1
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <_Z4tonehjm+0x1f0>
    1fd0:	08 f4       	brcc	.+2      	; 0x1fd4 <_Z4tonehjm+0x1f2>
    1fd2:	4d c0       	rjmp	.+154    	; 0x206e <_Z4tonehjm+0x28c>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    1fd4:	60 e4       	ldi	r22, 0x40	; 64
    1fd6:	72 e4       	ldi	r23, 0x42	; 66
    1fd8:	8f e0       	ldi	r24, 0x0F	; 15
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a5 01       	movw	r20, r10
    1fde:	94 01       	movw	r18, r8
    1fe0:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    1fe4:	69 01       	movw	r12, r18
    1fe6:	7a 01       	movw	r14, r20
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	c9 1a       	sub	r12, r25
    1fec:	d1 08       	sbc	r13, r1
    1fee:	e1 08       	sbc	r14, r1
    1ff0:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    1ff2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ff4:	22 30       	cpi	r18, 0x02	; 2
    1ff6:	01 f5       	brne	.+64     	; 0x2038 <_Z4tonehjm+0x256>
    1ff8:	8f ef       	ldi	r24, 0xFF	; 255
    1ffa:	c8 16       	cp	r12, r24
    1ffc:	d1 04       	cpc	r13, r1
    1ffe:	e1 04       	cpc	r14, r1
    2000:	f1 04       	cpc	r15, r1
    2002:	09 f0       	breq	.+2      	; 0x2006 <_Z4tonehjm+0x224>
    2004:	08 f4       	brcc	.+2      	; 0x2008 <_Z4tonehjm+0x226>
    2006:	5f c1       	rjmp	.+702    	; 0x22c6 <_Z4tonehjm+0x4e4>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    2008:	60 e9       	ldi	r22, 0x90	; 144
    200a:	70 ed       	ldi	r23, 0xD0	; 208
    200c:	83 e0       	ldi	r24, 0x03	; 3
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a5 01       	movw	r20, r10
    2012:	94 01       	movw	r18, r8
    2014:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    2018:	69 01       	movw	r12, r18
    201a:	7a 01       	movw	r14, r20
    201c:	91 e0       	ldi	r25, 0x01	; 1
    201e:	c9 1a       	sub	r12, r25
    2020:	d1 08       	sbc	r13, r1
    2022:	e1 08       	sbc	r14, r1
    2024:	f1 08       	sbc	r15, r1
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    2026:	2f ef       	ldi	r18, 0xFF	; 255
    2028:	c2 16       	cp	r12, r18
    202a:	d1 04       	cpc	r13, r1
    202c:	e1 04       	cpc	r14, r1
    202e:	f1 04       	cpc	r15, r1
    2030:	11 f0       	breq	.+4      	; 0x2036 <_Z4tonehjm+0x254>
    2032:	08 f0       	brcs	.+2      	; 0x2036 <_Z4tonehjm+0x254>
    2034:	8e c0       	rjmp	.+284    	; 0x2152 <_Z4tonehjm+0x370>
    2036:	e2 c0       	rjmp	.+452    	; 0x21fc <_Z4tonehjm+0x41a>
    2038:	8f ef       	ldi	r24, 0xFF	; 255
    203a:	c8 16       	cp	r12, r24
    203c:	d1 04       	cpc	r13, r1
    203e:	e1 04       	cpc	r14, r1
    2040:	f1 04       	cpc	r15, r1
    2042:	b9 f0       	breq	.+46     	; 0x2072 <_Z4tonehjm+0x290>
    2044:	b0 f0       	brcs	.+44     	; 0x2072 <_Z4tonehjm+0x290>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    2046:	68 e4       	ldi	r22, 0x48	; 72
    2048:	78 ee       	ldi	r23, 0xE8	; 232
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a5 01       	movw	r20, r10
    2050:	94 01       	movw	r18, r8
    2052:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    2056:	69 01       	movw	r12, r18
    2058:	7a 01       	movw	r14, r20
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	c9 1a       	sub	r12, r25
    205e:	d1 08       	sbc	r13, r1
    2060:	e1 08       	sbc	r14, r1
    2062:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    2064:	2d 81       	ldd	r18, Y+5	; 0x05
    2066:	22 23       	and	r18, r18
    2068:	09 f4       	brne	.+2      	; 0x206c <_Z4tonehjm+0x28a>
    206a:	34 c1       	rjmp	.+616    	; 0x22d4 <_Z4tonehjm+0x4f2>
    206c:	68 c1       	rjmp	.+720    	; 0x233e <_Z4tonehjm+0x55c>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <_Z4tonehjm+0x292>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    2072:	82 e0       	ldi	r24, 0x02	; 2
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    2074:	9d 81       	ldd	r25, Y+5	; 0x05
    2076:	91 11       	cpse	r25, r1
    2078:	c1 c0       	rjmp	.+386    	; 0x21fc <_Z4tonehjm+0x41a>
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    207a:	95 b5       	in	r25, 0x25	; 37
    207c:	98 7f       	andi	r25, 0xF8	; 248
    207e:	89 2b       	or	r24, r25
    2080:	85 bd       	out	0x25, r24	; 37
    2082:	bc c0       	rjmp	.+376    	; 0x21fc <_Z4tonehjm+0x41a>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	0e 94 cf 19 	call	0x339e	; 0x339e <pinMode>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    208a:	48 01       	movw	r8, r16
    208c:	a1 2c       	mov	r10, r1
    208e:	b1 2c       	mov	r11, r1
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	72 e1       	ldi	r23, 0x12	; 18
    2094:	8a e7       	ldi	r24, 0x7A	; 122
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a5 01       	movw	r20, r10
    209a:	94 01       	movw	r18, r8
    209c:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    20a0:	69 01       	movw	r12, r18
    20a2:	7a 01       	movw	r14, r20
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	c8 1a       	sub	r12, r24
    20a8:	d1 08       	sbc	r13, r1
    20aa:	e1 08       	sbc	r14, r1
    20ac:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    20ae:	c1 14       	cp	r12, r1
    20b0:	d1 04       	cpc	r13, r1
    20b2:	91 e0       	ldi	r25, 0x01	; 1
    20b4:	e9 06       	cpc	r14, r25
    20b6:	f1 04       	cpc	r15, r1
    20b8:	88 f0       	brcs	.+34     	; 0x20dc <_Z4tonehjm+0x2fa>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    20ba:	68 e4       	ldi	r22, 0x48	; 72
    20bc:	78 ee       	ldi	r23, 0xE8	; 232
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a5 01       	movw	r20, r10
    20c4:	94 01       	movw	r18, r8
    20c6:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    20ca:	69 01       	movw	r12, r18
    20cc:	7a 01       	movw	r14, r20
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	c8 1a       	sub	r12, r24
    20d2:	d1 08       	sbc	r13, r1
    20d4:	e1 08       	sbc	r14, r1
    20d6:	f1 08       	sbc	r15, r1
        prescalarbits = 0b011;
    20d8:	83 e0       	ldi	r24, 0x03	; 3
    20da:	01 c0       	rjmp	.+2      	; 0x20de <_Z4tonehjm+0x2fc>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    20de:	9d 81       	ldd	r25, Y+5	; 0x05
    20e0:	91 30       	cpi	r25, 0x01	; 1
    20e2:	81 f4       	brne	.+32     	; 0x2104 <_Z4tonehjm+0x322>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    20e4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    20e8:	98 7f       	andi	r25, 0xF8	; 248
    20ea:	89 2b       	or	r24, r25
    20ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    20f0:	41 14       	cp	r4, r1
    20f2:	51 04       	cpc	r5, r1
    20f4:	61 04       	cpc	r6, r1
    20f6:	71 04       	cpc	r7, r1
    20f8:	09 f0       	breq	.+2      	; 0x20fc <_Z4tonehjm+0x31a>
    20fa:	85 c0       	rjmp	.+266    	; 0x2206 <_Z4tonehjm+0x424>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    20fc:	2f ef       	ldi	r18, 0xFF	; 255
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	a9 01       	movw	r20, r18
    2102:	ad c0       	rjmp	.+346    	; 0x225e <_Z4tonehjm+0x47c>
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    2104:	2d 81       	ldd	r18, Y+5	; 0x05
    2106:	23 30       	cpi	r18, 0x03	; 3
    2108:	81 f4       	brne	.+32     	; 0x212a <_Z4tonehjm+0x348>
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    210a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
    210e:	98 7f       	andi	r25, 0xF8	; 248
    2110:	89 2b       	or	r24, r25
    2112:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    2116:	41 14       	cp	r4, r1
    2118:	51 04       	cpc	r5, r1
    211a:	61 04       	cpc	r6, r1
    211c:	71 04       	cpc	r7, r1
    211e:	09 f0       	breq	.+2      	; 0x2122 <_Z4tonehjm+0x340>
    2120:	72 c0       	rjmp	.+228    	; 0x2206 <_Z4tonehjm+0x424>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2122:	2f ef       	ldi	r18, 0xFF	; 255
    2124:	3f ef       	ldi	r19, 0xFF	; 255
    2126:	a9 01       	movw	r20, r18
    2128:	ac c0       	rjmp	.+344    	; 0x2282 <_Z4tonehjm+0x4a0>
#if defined(TCCR3B)
      else if (_timer == 3)
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
    212a:	9d 81       	ldd	r25, Y+5	; 0x05
    212c:	94 30       	cpi	r25, 0x04	; 4
    212e:	09 f0       	breq	.+2      	; 0x2132 <_Z4tonehjm+0x350>
    2130:	65 c0       	rjmp	.+202    	; 0x21fc <_Z4tonehjm+0x41a>
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
    2132:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    2136:	98 7f       	andi	r25, 0xF8	; 248
    2138:	89 2b       	or	r24, r25
    213a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    213e:	41 14       	cp	r4, r1
    2140:	51 04       	cpc	r5, r1
    2142:	61 04       	cpc	r6, r1
    2144:	71 04       	cpc	r7, r1
    2146:	09 f0       	breq	.+2      	; 0x214a <_Z4tonehjm+0x368>
    2148:	5e c0       	rjmp	.+188    	; 0x2206 <_Z4tonehjm+0x424>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    214a:	2f ef       	ldi	r18, 0xFF	; 255
    214c:	3f ef       	ldi	r19, 0xFF	; 255
    214e:	a9 01       	movw	r20, r18
    2150:	aa c0       	rjmp	.+340    	; 0x22a6 <_Z4tonehjm+0x4c4>
          prescalarbits = 0b011;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    2152:	68 e4       	ldi	r22, 0x48	; 72
    2154:	78 ee       	ldi	r23, 0xE8	; 232
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a5 01       	movw	r20, r10
    215c:	94 01       	movw	r18, r8
    215e:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    2162:	69 01       	movw	r12, r18
    2164:	7a 01       	movw	r14, r20
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	c8 1a       	sub	r12, r24
    216a:	d1 08       	sbc	r13, r1
    216c:	e1 08       	sbc	r14, r1
    216e:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
    2170:	9f ef       	ldi	r25, 0xFF	; 255
    2172:	c9 16       	cp	r12, r25
    2174:	d1 04       	cpc	r13, r1
    2176:	e1 04       	cpc	r14, r1
    2178:	f1 04       	cpc	r15, r1
    217a:	09 f0       	breq	.+2      	; 0x217e <_Z4tonehjm+0x39c>
    217c:	08 f4       	brcc	.+2      	; 0x2180 <_Z4tonehjm+0x39e>
    217e:	a3 c0       	rjmp	.+326    	; 0x22c6 <_Z4tonehjm+0x4e4>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    2180:	64 e2       	ldi	r22, 0x24	; 36
    2182:	74 ef       	ldi	r23, 0xF4	; 244
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a5 01       	movw	r20, r10
    218a:	94 01       	movw	r18, r8
    218c:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    2190:	69 01       	movw	r12, r18
    2192:	7a 01       	movw	r14, r20
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	c8 1a       	sub	r12, r24
    2198:	d1 08       	sbc	r13, r1
    219a:	e1 08       	sbc	r14, r1
    219c:	f1 08       	sbc	r15, r1
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    219e:	9f ef       	ldi	r25, 0xFF	; 255
    21a0:	c9 16       	cp	r12, r25
    21a2:	d1 04       	cpc	r13, r1
    21a4:	e1 04       	cpc	r14, r1
    21a6:	f1 04       	cpc	r15, r1
    21a8:	49 f1       	breq	.+82     	; 0x21fc <_Z4tonehjm+0x41a>
    21aa:	40 f1       	brcs	.+80     	; 0x21fc <_Z4tonehjm+0x41a>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    21ac:	62 e1       	ldi	r22, 0x12	; 18
    21ae:	7a e7       	ldi	r23, 0x7A	; 122
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a5 01       	movw	r20, r10
    21b6:	94 01       	movw	r18, r8
    21b8:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    21bc:	69 01       	movw	r12, r18
    21be:	7a 01       	movw	r14, r20
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	c8 1a       	sub	r12, r24
    21c4:	d1 08       	sbc	r13, r1
    21c6:	e1 08       	sbc	r14, r1
    21c8:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    21ca:	8f ef       	ldi	r24, 0xFF	; 255
    21cc:	c8 16       	cp	r12, r24
    21ce:	d1 04       	cpc	r13, r1
    21d0:	e1 04       	cpc	r14, r1
    21d2:	f1 04       	cpc	r15, r1
    21d4:	99 f0       	breq	.+38     	; 0x21fc <_Z4tonehjm+0x41a>
    21d6:	90 f0       	brcs	.+36     	; 0x21fc <_Z4tonehjm+0x41a>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	9a 81       	ldd	r25, Y+2	; 0x02
    21dc:	ab 81       	ldd	r26, Y+3	; 0x03
    21de:	bc 81       	ldd	r27, Y+4	; 0x04
    21e0:	2a e0       	ldi	r18, 0x0A	; 10
    21e2:	b5 95       	asr	r27
    21e4:	a7 95       	ror	r26
    21e6:	97 95       	ror	r25
    21e8:	87 95       	ror	r24
    21ea:	2a 95       	dec	r18
    21ec:	d1 f7       	brne	.-12     	; 0x21e2 <_Z4tonehjm+0x400>
    21ee:	6c 01       	movw	r12, r24
    21f0:	7d 01       	movw	r14, r26
    21f2:	21 e0       	ldi	r18, 0x01	; 1
    21f4:	c2 1a       	sub	r12, r18
    21f6:	d1 08       	sbc	r13, r1
    21f8:	e1 08       	sbc	r14, r1
    21fa:	f1 08       	sbc	r15, r1

    }
    

    // Calculate the toggle count
    if (duration > 0)
    21fc:	41 14       	cp	r4, r1
    21fe:	51 04       	cpc	r5, r1
    2200:	61 04       	cpc	r6, r1
    2202:	71 04       	cpc	r7, r1
    2204:	71 f0       	breq	.+28     	; 0x2222 <_Z4tonehjm+0x440>
    {
      toggle_count = 2 * frequency * duration / 1000;
    2206:	d8 01       	movw	r26, r16
    2208:	aa 0f       	add	r26, r26
    220a:	bb 1f       	adc	r27, r27
    220c:	a3 01       	movw	r20, r6
    220e:	92 01       	movw	r18, r4
    2210:	0e 94 85 21 	call	0x430a	; 0x430a <__muluhisi3>
    2214:	28 ee       	ldi	r18, 0xE8	; 232
    2216:	33 e0       	ldi	r19, 0x03	; 3
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	0e 94 3e 21 	call	0x427c	; 0x427c <__udivmodsi4>
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <_Z4tonehjm+0x446>
    }
    else
    {
      toggle_count = -1;
    2222:	2f ef       	ldi	r18, 0xFF	; 255
    2224:	3f ef       	ldi	r19, 0xFF	; 255
    2226:	a9 01       	movw	r20, r18
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	c1 f0       	breq	.+48     	; 0x225e <_Z4tonehjm+0x47c>
    222e:	8c f4       	brge	.+34     	; 0x2252 <_Z4tonehjm+0x470>
    2230:	81 11       	cpse	r24, r1
    2232:	9e c0       	rjmp	.+316    	; 0x2370 <_Z4tonehjm+0x58e>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    2234:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
    2236:	20 93 c6 04 	sts	0x04C6, r18	; 0x8004c6 <timer0_toggle_count>
    223a:	30 93 c7 04 	sts	0x04C7, r19	; 0x8004c7 <timer0_toggle_count+0x1>
    223e:	40 93 c8 04 	sts	0x04C8, r20	; 0x8004c8 <timer0_toggle_count+0x2>
    2242:	50 93 c9 04 	sts	0x04C9, r21	; 0x8004c9 <timer0_toggle_count+0x3>
        bitWrite(TIMSK0, OCIE0A, 1);
    2246:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    224a:	82 60       	ori	r24, 0x02	; 2
    224c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
        break;
    2250:	8f c0       	rjmp	.+286    	; 0x2370 <_Z4tonehjm+0x58e>
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    2252:	9d 81       	ldd	r25, Y+5	; 0x05
    2254:	93 30       	cpi	r25, 0x03	; 3
    2256:	a9 f0       	breq	.+42     	; 0x2282 <_Z4tonehjm+0x4a0>
    2258:	94 30       	cpi	r25, 0x04	; 4
    225a:	29 f1       	breq	.+74     	; 0x22a6 <_Z4tonehjm+0x4c4>
    225c:	89 c0       	rjmp	.+274    	; 0x2370 <_Z4tonehjm+0x58e>
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    225e:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    2262:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
        timer1_toggle_count = toggle_count;
    2266:	20 93 bf 04 	sts	0x04BF, r18	; 0x8004bf <timer1_toggle_count>
    226a:	30 93 c0 04 	sts	0x04C0, r19	; 0x8004c0 <timer1_toggle_count+0x1>
    226e:	40 93 c1 04 	sts	0x04C1, r20	; 0x8004c1 <timer1_toggle_count+0x2>
    2272:	50 93 c2 04 	sts	0x04C2, r21	; 0x8004c2 <timer1_toggle_count+0x3>
        bitWrite(TIMSK1, OCIE1A, 1);
    2276:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    227a:	82 60       	ori	r24, 0x02	; 2
    227c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    2280:	77 c0       	rjmp	.+238    	; 0x2370 <_Z4tonehjm+0x58e>
        break;
#endif

#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)
      case 3:
        OCR3A = ocr;
    2282:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__DATA_REGION_ORIGIN__+0x39>
    2286:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__DATA_REGION_ORIGIN__+0x38>
        timer3_toggle_count = toggle_count;
    228a:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <timer3_toggle_count>
    228e:	30 93 b9 04 	sts	0x04B9, r19	; 0x8004b9 <timer3_toggle_count+0x1>
    2292:	40 93 ba 04 	sts	0x04BA, r20	; 0x8004ba <timer3_toggle_count+0x2>
    2296:	50 93 bb 04 	sts	0x04BB, r21	; 0x8004bb <timer3_toggle_count+0x3>
        bitWrite(TIMSK3, OCIE3A, 1);
    229a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
    229e:	82 60       	ori	r24, 0x02	; 2
    22a0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
        break;
    22a4:	65 c0       	rjmp	.+202    	; 0x2370 <_Z4tonehjm+0x58e>
#endif

#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)
      case 4:
        OCR4A = ocr;
    22a6:	c0 92 cf 00 	sts	0x00CF, r12	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
        timer4_toggle_count = toggle_count;
    22aa:	20 93 b1 04 	sts	0x04B1, r18	; 0x8004b1 <timer4_toggle_count>
    22ae:	30 93 b2 04 	sts	0x04B2, r19	; 0x8004b2 <timer4_toggle_count+0x1>
    22b2:	40 93 b3 04 	sts	0x04B3, r20	; 0x8004b3 <timer4_toggle_count+0x2>
    22b6:	50 93 b4 04 	sts	0x04B4, r21	; 0x8004b4 <timer4_toggle_count+0x3>
        bitWrite(TIMSK4, OCIE4A, 1);
    22ba:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
    22be:	80 64       	ori	r24, 0x40	; 64
    22c0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
        break;
#endif

    }
  }
}
    22c4:	55 c0       	rjmp	.+170    	; 0x2370 <_Z4tonehjm+0x58e>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    22c6:	41 14       	cp	r4, r1
    22c8:	51 04       	cpc	r5, r1
    22ca:	61 04       	cpc	r6, r1
    22cc:	71 04       	cpc	r7, r1
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <_Z4tonehjm+0x4f0>
    22d0:	9a cf       	rjmp	.-204    	; 0x2206 <_Z4tonehjm+0x424>
    22d2:	4e c0       	rjmp	.+156    	; 0x2370 <_Z4tonehjm+0x58e>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    22d4:	8f ef       	ldi	r24, 0xFF	; 255
    22d6:	c8 16       	cp	r12, r24
    22d8:	d1 04       	cpc	r13, r1
    22da:	e1 04       	cpc	r14, r1
    22dc:	f1 04       	cpc	r15, r1
    22de:	69 f1       	breq	.+90     	; 0x233a <_Z4tonehjm+0x558>
    22e0:	60 f1       	brcs	.+88     	; 0x233a <_Z4tonehjm+0x558>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    22e2:	62 e1       	ldi	r22, 0x12	; 18
    22e4:	7a e7       	ldi	r23, 0x7A	; 122
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a5 01       	movw	r20, r10
    22ec:	94 01       	movw	r18, r8
    22ee:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    22f2:	69 01       	movw	r12, r18
    22f4:	7a 01       	movw	r14, r20
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	c9 1a       	sub	r12, r25
    22fa:	d1 08       	sbc	r13, r1
    22fc:	e1 08       	sbc	r14, r1
    22fe:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    2300:	2f ef       	ldi	r18, 0xFF	; 255
    2302:	c2 16       	cp	r12, r18
    2304:	d1 04       	cpc	r13, r1
    2306:	e1 04       	cpc	r14, r1
    2308:	f1 04       	cpc	r15, r1
    230a:	a9 f0       	breq	.+42     	; 0x2336 <_Z4tonehjm+0x554>
    230c:	a0 f0       	brcs	.+40     	; 0x2336 <_Z4tonehjm+0x554>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	9a 81       	ldd	r25, Y+2	; 0x02
    2312:	ab 81       	ldd	r26, Y+3	; 0x03
    2314:	bc 81       	ldd	r27, Y+4	; 0x04
    2316:	3a e0       	ldi	r19, 0x0A	; 10
    2318:	b5 95       	asr	r27
    231a:	a7 95       	ror	r26
    231c:	97 95       	ror	r25
    231e:	87 95       	ror	r24
    2320:	3a 95       	dec	r19
    2322:	d1 f7       	brne	.-12     	; 0x2318 <_Z4tonehjm+0x536>
    2324:	6c 01       	movw	r12, r24
    2326:	7d 01       	movw	r14, r26
    2328:	21 e0       	ldi	r18, 0x01	; 1
    232a:	c2 1a       	sub	r12, r18
    232c:	d1 08       	sbc	r13, r1
    232e:	e1 08       	sbc	r14, r1
    2330:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    2332:	85 e0       	ldi	r24, 0x05	; 5
    2334:	a2 ce       	rjmp	.-700    	; 0x207a <_Z4tonehjm+0x298>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    2336:	84 e0       	ldi	r24, 0x04	; 4
    2338:	a0 ce       	rjmp	.-704    	; 0x207a <_Z4tonehjm+0x298>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    233a:	83 e0       	ldi	r24, 0x03	; 3
    233c:	9e ce       	rjmp	.-708    	; 0x207a <_Z4tonehjm+0x298>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    233e:	2f ef       	ldi	r18, 0xFF	; 255
    2340:	c2 16       	cp	r12, r18
    2342:	d1 04       	cpc	r13, r1
    2344:	e1 04       	cpc	r14, r1
    2346:	f1 04       	cpc	r15, r1
    2348:	89 f0       	breq	.+34     	; 0x236c <_Z4tonehjm+0x58a>
    234a:	80 f0       	brcs	.+32     	; 0x236c <_Z4tonehjm+0x58a>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    234c:	62 e1       	ldi	r22, 0x12	; 18
    234e:	7a e7       	ldi	r23, 0x7A	; 122
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a5 01       	movw	r20, r10
    2356:	94 01       	movw	r18, r8
    2358:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    235c:	69 01       	movw	r12, r18
    235e:	7a 01       	movw	r14, r20
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	c9 1a       	sub	r12, r25
    2364:	d1 08       	sbc	r13, r1
    2366:	e1 08       	sbc	r14, r1
    2368:	f1 08       	sbc	r15, r1
    236a:	2f cf       	rjmp	.-418    	; 0x21ca <_Z4tonehjm+0x3e8>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    236c:	84 e0       	ldi	r24, 0x04	; 4
    236e:	82 ce       	rjmp	.-764    	; 0x2074 <_Z4tonehjm+0x292>
        break;
#endif

    }
  }
}
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	ff 90       	pop	r15
    2384:	ef 90       	pop	r14
    2386:	df 90       	pop	r13
    2388:	cf 90       	pop	r12
    238a:	bf 90       	pop	r11
    238c:	af 90       	pop	r10
    238e:	9f 90       	pop	r9
    2390:	8f 90       	pop	r8
    2392:	7f 90       	pop	r7
    2394:	6f 90       	pop	r6
    2396:	5f 90       	pop	r5
    2398:	4f 90       	pop	r4
    239a:	08 95       	ret

0000239c <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    239c:	81 30       	cpi	r24, 0x01	; 1
    239e:	49 f0       	breq	.+18     	; 0x23b2 <_Z12disableTimerh+0x16>
    23a0:	28 f0       	brcs	.+10     	; 0x23ac <_Z12disableTimerh+0x10>
    23a2:	83 30       	cpi	r24, 0x03	; 3
    23a4:	61 f0       	breq	.+24     	; 0x23be <_Z12disableTimerh+0x22>
    23a6:	84 30       	cpi	r24, 0x04	; 4
    23a8:	81 f0       	breq	.+32     	; 0x23ca <_Z12disableTimerh+0x2e>
    23aa:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    23ac:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    23b0:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    23b2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    23b6:	8d 7f       	andi	r24, 0xFD	; 253
    23b8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    23bc:	08 95       	ret
      #endif
      break;

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    23be:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
    23c2:	8d 7f       	andi	r24, 0xFD	; 253
    23c4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
      break;
    23c8:	08 95       	ret
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    23ca:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
    23ce:	8f 7b       	andi	r24, 0xBF	; 191
    23d0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
    23d4:	08 95       	ret

000023d6 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    23d6:	cf 93       	push	r28
    23d8:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    23da:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <_ZL9tone_pins>
    23de:	c8 13       	cpse	r28, r24
    23e0:	07 c0       	rjmp	.+14     	; 0x23f0 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    23e2:	ea e2       	ldi	r30, 0x2A	; 42
    23e4:	f1 e0       	ldi	r31, 0x01	; 1
    23e6:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    23e8:	9f ef       	ldi	r25, 0xFF	; 255
    23ea:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <_ZL9tone_pins>
      break;
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    23f0:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
    23f2:	0e 94 ce 11 	call	0x239c	; 0x239c <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    23f6:	60 e0       	ldi	r22, 0x00	; 0
    23f8:	8c 2f       	mov	r24, r28
}
    23fa:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
    23fc:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <digitalWrite>

00002400 <__vector_32>:
#endif


#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
    2400:	1f 92       	push	r1
    2402:	0f 92       	push	r0
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	0f 92       	push	r0
    2408:	11 24       	eor	r1, r1
    240a:	2f 93       	push	r18
    240c:	3f 93       	push	r19
    240e:	4f 93       	push	r20
    2410:	5f 93       	push	r21
    2412:	6f 93       	push	r22
    2414:	7f 93       	push	r23
    2416:	8f 93       	push	r24
    2418:	9f 93       	push	r25
    241a:	af 93       	push	r26
    241c:	bf 93       	push	r27
    241e:	ef 93       	push	r30
    2420:	ff 93       	push	r31
  if (timer3_toggle_count != 0)
    2422:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <timer3_toggle_count>
    2426:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <timer3_toggle_count+0x1>
    242a:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <timer3_toggle_count+0x2>
    242e:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <timer3_toggle_count+0x3>
    2432:	89 2b       	or	r24, r25
    2434:	8a 2b       	or	r24, r26
    2436:	8b 2b       	or	r24, r27
    2438:	51 f1       	breq	.+84     	; 0x248e <__vector_32+0x8e>
  {
    // toggle the pin
    *timer3_pin_port ^= timer3_pin_mask;
    243a:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <timer3_pin_mask>
    243e:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <timer3_pin_port>
    2442:	f0 91 b7 04 	lds	r31, 0x04B7	; 0x8004b7 <timer3_pin_port+0x1>
    2446:	80 81       	ld	r24, Z
    2448:	89 27       	eor	r24, r25
    244a:	80 83       	st	Z, r24

    if (timer3_toggle_count > 0)
    244c:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <timer3_toggle_count>
    2450:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <timer3_toggle_count+0x1>
    2454:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <timer3_toggle_count+0x2>
    2458:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <timer3_toggle_count+0x3>
    245c:	18 16       	cp	r1, r24
    245e:	19 06       	cpc	r1, r25
    2460:	1a 06       	cpc	r1, r26
    2462:	1b 06       	cpc	r1, r27
    2464:	0c f5       	brge	.+66     	; 0x24a8 <__vector_32+0xa8>
      timer3_toggle_count--;
    2466:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <timer3_toggle_count>
    246a:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <timer3_toggle_count+0x1>
    246e:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <timer3_toggle_count+0x2>
    2472:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <timer3_toggle_count+0x3>
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	a1 09       	sbc	r26, r1
    247a:	b1 09       	sbc	r27, r1
    247c:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <timer3_toggle_count>
    2480:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <timer3_toggle_count+0x1>
    2484:	a0 93 ba 04 	sts	0x04BA, r26	; 0x8004ba <timer3_toggle_count+0x2>
    2488:	b0 93 bb 04 	sts	0x04BB, r27	; 0x8004bb <timer3_toggle_count+0x3>
    248c:	0d c0       	rjmp	.+26     	; 0x24a8 <__vector_32+0xa8>
  }
  else
  {
    disableTimer(3);
    248e:	83 e0       	ldi	r24, 0x03	; 3
    2490:	0e 94 ce 11 	call	0x239c	; 0x239c <_Z12disableTimerh>
    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
    2494:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <timer3_pin_mask>
    2498:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <timer3_pin_port>
    249c:	f0 91 b7 04 	lds	r31, 0x04B7	; 0x8004b7 <timer3_pin_port+0x1>
    24a0:	90 81       	ld	r25, Z
    24a2:	80 95       	com	r24
    24a4:	89 23       	and	r24, r25
    24a6:	80 83       	st	Z, r24
  }
}
    24a8:	ff 91       	pop	r31
    24aa:	ef 91       	pop	r30
    24ac:	bf 91       	pop	r27
    24ae:	af 91       	pop	r26
    24b0:	9f 91       	pop	r25
    24b2:	8f 91       	pop	r24
    24b4:	7f 91       	pop	r23
    24b6:	6f 91       	pop	r22
    24b8:	5f 91       	pop	r21
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	0f 90       	pop	r0
    24c6:	1f 90       	pop	r1
    24c8:	18 95       	reti

000024ca <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    24ca:	61 50       	subi	r22, 0x01	; 1
    24cc:	30 f0       	brcs	.+12     	; 0x24da <_ZL4RecvPVhh+0x10>
    24ce:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    24d2:	fc 01       	movw	r30, r24
    24d4:	20 83       	st	Z, r18
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	f8 cf       	rjmp	.-16     	; 0x24ca <_ZL4RecvPVhh>
    24da:	28 98       	cbi	0x05, 0	; 5
    24dc:	84 e6       	ldi	r24, 0x64	; 100
    24de:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <RxLEDPulse>
    24e2:	08 95       	ret

000024e4 <_ZL11SendControlh>:
    24e4:	40 91 cd 04 	lds	r20, 0x04CD	; 0x8004cd <_ZL6_cmark>
    24e8:	50 91 ce 04 	lds	r21, 0x04CE	; 0x8004ce <_ZL6_cmark+0x1>
    24ec:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <_ZL5_cend>
    24f0:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <_ZL5_cend+0x1>
    24f4:	42 17       	cp	r20, r18
    24f6:	53 07       	cpc	r21, r19
    24f8:	b4 f4       	brge	.+44     	; 0x2526 <_ZL11SendControlh+0x42>
    24fa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    24fe:	95 70       	andi	r25, 0x05	; 5
    2500:	e1 f3       	breq	.-8      	; 0x24fa <_ZL11SendControlh+0x16>
    2502:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2506:	92 fd       	sbrc	r25, 2
    2508:	19 c0       	rjmp	.+50     	; 0x253c <_ZL11SendControlh+0x58>
    250a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    250e:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <_ZL6_cmark>
    2512:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <_ZL6_cmark+0x1>
    2516:	01 96       	adiw	r24, 0x01	; 1
    2518:	8f 73       	andi	r24, 0x3F	; 63
    251a:	99 27       	eor	r25, r25
    251c:	89 2b       	or	r24, r25
    251e:	19 f4       	brne	.+6      	; 0x2526 <_ZL11SendControlh+0x42>
    2520:	8e ef       	ldi	r24, 0xFE	; 254
    2522:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2526:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <_ZL6_cmark>
    252a:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <_ZL6_cmark+0x1>
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <_ZL6_cmark+0x1>
    2534:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_ZL6_cmark>
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	08 95       	ret
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	08 95       	ret

00002540 <_ZL24USB_SendStringDescriptorPKhhh>:
    2540:	df 92       	push	r13
    2542:	ef 92       	push	r14
    2544:	ff 92       	push	r15
    2546:	0f 93       	push	r16
    2548:	1f 93       	push	r17
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	d8 2e       	mov	r13, r24
    2550:	f9 2e       	mov	r15, r25
    2552:	e4 2e       	mov	r14, r20
    2554:	06 2f       	mov	r16, r22
    2556:	10 e0       	ldi	r17, 0x00	; 0
    2558:	c8 01       	movw	r24, r16
    255a:	01 96       	adiw	r24, 0x01	; 1
    255c:	88 0f       	add	r24, r24
    255e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_ZL11SendControlh>
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_ZL11SendControlh>
    2568:	cd 2d       	mov	r28, r13
    256a:	df 2d       	mov	r29, r15
    256c:	0c 0f       	add	r16, r28
    256e:	1d 1f       	adc	r17, r29
    2570:	c0 17       	cp	r28, r16
    2572:	d1 07       	cpc	r29, r17
    2574:	89 f0       	breq	.+34     	; 0x2598 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    2576:	e7 fe       	sbrs	r14, 7
    2578:	03 c0       	rjmp	.+6      	; 0x2580 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    257a:	fe 01       	movw	r30, r28
    257c:	84 91       	lpm	r24, Z
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    2580:	88 81       	ld	r24, Y
    2582:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_ZL11SendControlh>
    2586:	f8 2e       	mov	r15, r24
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_ZL11SendControlh>
    258e:	8f 21       	and	r24, r15
    2590:	21 96       	adiw	r28, 0x01	; 1
    2592:	81 11       	cpse	r24, r1
    2594:	ed cf       	rjmp	.-38     	; 0x2570 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    2596:	01 c0       	rjmp	.+2      	; 0x259a <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	df 90       	pop	r13
    25a8:	08 95       	ret

000025aa <_ZL15USB_ClockEnablev>:
    25aa:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__DATA_REGION_ORIGIN__+0x77>
    25ae:	81 60       	ori	r24, 0x01	; 1
    25b0:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__DATA_REGION_ORIGIN__+0x77>
    25b4:	80 ea       	ldi	r24, 0xA0	; 160
    25b6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    25ba:	89 b5       	in	r24, 0x29	; 41
    25bc:	80 61       	ori	r24, 0x10	; 16
    25be:	89 bd       	out	0x29, r24	; 41
    25c0:	89 b5       	in	r24, 0x29	; 41
    25c2:	82 60       	ori	r24, 0x02	; 2
    25c4:	89 bd       	out	0x29, r24	; 41
    25c6:	09 b4       	in	r0, 0x29	; 41
    25c8:	00 fe       	sbrs	r0, 0
    25ca:	fd cf       	rjmp	.-6      	; 0x25c6 <_ZL15USB_ClockEnablev+0x1c>
    25cc:	61 e0       	ldi	r22, 0x01	; 1
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 94 37 18 	call	0x306e	; 0x306e <delay>
    25d8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    25dc:	8f 7c       	andi	r24, 0xCF	; 207
    25de:	80 61       	ori	r24, 0x10	; 16
    25e0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    25e4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    25e8:	80 7f       	andi	r24, 0xF0	; 240
    25ea:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    25ee:	08 95       	ret

000025f0 <_ZL14SendInterfacesv>:
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	1f 92       	push	r1
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	19 82       	std	Y+1, r1	; 0x01
    25fc:	ce 01       	movw	r24, r28
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_Z16CDC_GetInterfacePh>
    2604:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_Z12PluggableUSBv>
    2608:	be 01       	movw	r22, r28
    260a:	6f 5f       	subi	r22, 0xFF	; 255
    260c:	7f 4f       	sbci	r23, 0xFF	; 255
    260e:	0e 94 55 1e 	call	0x3caa	; 0x3caa <_ZN13PluggableUSB_12getInterfaceEPh>
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	0f 90       	pop	r0
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <_ZN6LockEPC1Eh>:
    261c:	2f b7       	in	r18, 0x3f	; 63
    261e:	fc 01       	movw	r30, r24
    2620:	20 83       	st	Z, r18
    2622:	f8 94       	cli
    2624:	67 70       	andi	r22, 0x07	; 7
    2626:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    262a:	08 95       	ret

0000262c <_Z13USB_Availableh>:
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	1f 92       	push	r1
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	68 2f       	mov	r22, r24
    2638:	ce 01       	movw	r24, r28
    263a:	01 96       	adiw	r24, 0x01	; 1
    263c:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN6LockEPC1Eh>
    2640:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    2644:	99 81       	ldd	r25, Y+1	; 0x01
    2646:	9f bf       	out	0x3f, r25	; 63
    2648:	0f 90       	pop	r0
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	08 95       	ret

00002650 <_Z8USB_RecvhPvi>:
    2650:	ef 92       	push	r14
    2652:	ff 92       	push	r15
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	1f 92       	push	r1
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <_usbConfiguration>
    2666:	99 23       	and	r25, r25
    2668:	11 f0       	breq	.+4      	; 0x266e <_Z8USB_RecvhPvi+0x1e>
    266a:	57 ff       	sbrs	r21, 7
    266c:	03 c0       	rjmp	.+6      	; 0x2674 <_Z8USB_RecvhPvi+0x24>
    266e:	8f ef       	ldi	r24, 0xFF	; 255
    2670:	9f ef       	ldi	r25, 0xFF	; 255
    2672:	29 c0       	rjmp	.+82     	; 0x26c6 <_Z8USB_RecvhPvi+0x76>
    2674:	8a 01       	movw	r16, r20
    2676:	7b 01       	movw	r14, r22
    2678:	68 2f       	mov	r22, r24
    267a:	ce 01       	movw	r24, r28
    267c:	01 96       	adiw	r24, 0x01	; 1
    267e:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN6LockEPC1Eh>
    2682:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	02 17       	cp	r16, r18
    268a:	13 07       	cpc	r17, r19
    268c:	0c f4       	brge	.+2      	; 0x2690 <_Z8USB_RecvhPvi+0x40>
    268e:	98 01       	movw	r18, r16
    2690:	82 2f       	mov	r24, r18
    2692:	f7 01       	movw	r30, r14
    2694:	94 e6       	ldi	r25, 0x64	; 100
    2696:	81 50       	subi	r24, 0x01	; 1
    2698:	38 f0       	brcs	.+14     	; 0x26a8 <_Z8USB_RecvhPvi+0x58>
    269a:	28 98       	cbi	0x05, 0	; 5
    269c:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <RxLEDPulse>
    26a0:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    26a4:	41 93       	st	Z+, r20
    26a6:	f7 cf       	rjmp	.-18     	; 0x2696 <_Z8USB_RecvhPvi+0x46>
    26a8:	21 15       	cp	r18, r1
    26aa:	31 05       	cpc	r19, r1
    26ac:	21 f0       	breq	.+8      	; 0x26b6 <_Z8USB_RecvhPvi+0x66>
    26ae:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    26b2:	88 23       	and	r24, r24
    26b4:	21 f0       	breq	.+8      	; 0x26be <_Z8USB_RecvhPvi+0x6e>
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	8f bf       	out	0x3f, r24	; 63
    26ba:	c9 01       	movw	r24, r18
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <_Z8USB_RecvhPvi+0x76>
    26be:	8b e6       	ldi	r24, 0x6B	; 107
    26c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    26c4:	f8 cf       	rjmp	.-16     	; 0x26b6 <_Z8USB_RecvhPvi+0x66>
    26c6:	0f 90       	pop	r0
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	ff 90       	pop	r15
    26d2:	ef 90       	pop	r14
    26d4:	08 95       	ret

000026d6 <_Z8USB_Recvh>:
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	1f 92       	push	r1
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	be 01       	movw	r22, r28
    26e6:	6f 5f       	subi	r22, 0xFF	; 255
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	0e 94 28 13 	call	0x2650	; 0x2650 <_Z8USB_RecvhPvi>
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	19 f4       	brne	.+6      	; 0x26f8 <_Z8USB_Recvh+0x22>
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <_Z8USB_Recvh+0x26>
    26f8:	8f ef       	ldi	r24, 0xFF	; 255
    26fa:	9f ef       	ldi	r25, 0xFF	; 255
    26fc:	0f 90       	pop	r0
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	08 95       	ret

00002704 <_Z13USB_SendSpaceh>:
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	1f 92       	push	r1
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	68 2f       	mov	r22, r24
    2710:	ce 01       	movw	r24, r28
    2712:	01 96       	adiw	r24, 0x01	; 1
    2714:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN6LockEPC1Eh>
    2718:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    271c:	89 2f       	mov	r24, r25
    271e:	80 72       	andi	r24, 0x20	; 32
    2720:	95 ff       	sbrs	r25, 5
    2722:	04 c0       	rjmp	.+8      	; 0x272c <_Z13USB_SendSpaceh+0x28>
    2724:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    2728:	80 e4       	ldi	r24, 0x40	; 64
    272a:	89 1b       	sub	r24, r25
    272c:	99 81       	ldd	r25, Y+1	; 0x01
    272e:	9f bf       	out	0x3f, r25	; 63
    2730:	0f 90       	pop	r0
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	08 95       	ret

00002738 <_Z8USB_SendhPKvi>:
    2738:	5f 92       	push	r5
    273a:	6f 92       	push	r6
    273c:	7f 92       	push	r7
    273e:	8f 92       	push	r8
    2740:	9f 92       	push	r9
    2742:	af 92       	push	r10
    2744:	bf 92       	push	r11
    2746:	cf 92       	push	r12
    2748:	df 92       	push	r13
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	1f 92       	push	r1
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	98 2e       	mov	r9, r24
    275e:	6b 01       	movw	r12, r22
    2760:	b4 2e       	mov	r11, r20
    2762:	05 2f       	mov	r16, r21
    2764:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_usbConfiguration>
    2768:	81 11       	cpse	r24, r1
    276a:	03 c0       	rjmp	.+6      	; 0x2772 <_Z8USB_SendhPKvi+0x3a>
    276c:	8f ef       	ldi	r24, 0xFF	; 255
    276e:	9f ef       	ldi	r25, 0xFF	; 255
    2770:	77 c0       	rjmp	.+238    	; 0x2860 <_Z8USB_SendhPKvi+0x128>
    2772:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <_usbSuspendState>
    2776:	80 ff       	sbrs	r24, 0
    2778:	05 c0       	rjmp	.+10     	; 0x2784 <_Z8USB_SendhPKvi+0x4c>
    277a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    277e:	82 60       	ori	r24, 0x02	; 2
    2780:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    2784:	eb 2c       	mov	r14, r11
    2786:	f0 2e       	mov	r15, r16
    2788:	a1 2c       	mov	r10, r1
    278a:	8a ef       	ldi	r24, 0xFA	; 250
    278c:	88 2e       	mov	r8, r24
    278e:	89 2d       	mov	r24, r9
    2790:	80 72       	andi	r24, 0x20	; 32
    2792:	68 2e       	mov	r6, r24
    2794:	89 2d       	mov	r24, r9
    2796:	80 74       	andi	r24, 0x40	; 64
    2798:	58 2e       	mov	r5, r24
    279a:	9a e3       	ldi	r25, 0x3A	; 58
    279c:	79 2e       	mov	r7, r25
    279e:	e1 14       	cp	r14, r1
    27a0:	f1 04       	cpc	r15, r1
    27a2:	19 f4       	brne	.+6      	; 0x27aa <_Z8USB_SendhPKvi+0x72>
    27a4:	aa 20       	and	r10, r10
    27a6:	09 f4       	brne	.+2      	; 0x27aa <_Z8USB_SendhPKvi+0x72>
    27a8:	55 c0       	rjmp	.+170    	; 0x2854 <_Z8USB_SendhPKvi+0x11c>
    27aa:	89 2d       	mov	r24, r9
    27ac:	0e 94 82 13 	call	0x2704	; 0x2704 <_Z13USB_SendSpaceh>
    27b0:	18 2f       	mov	r17, r24
    27b2:	81 11       	cpse	r24, r1
    27b4:	0a c0       	rjmp	.+20     	; 0x27ca <_Z8USB_SendhPKvi+0x92>
    27b6:	8a 94       	dec	r8
    27b8:	88 20       	and	r8, r8
    27ba:	c1 f2       	breq	.-80     	; 0x276c <_Z8USB_SendhPKvi+0x34>
    27bc:	61 e0       	ldi	r22, 0x01	; 1
    27be:	70 e0       	ldi	r23, 0x00	; 0
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0e 94 37 18 	call	0x306e	; 0x306e <delay>
    27c8:	ea cf       	rjmp	.-44     	; 0x279e <_Z8USB_SendhPKvi+0x66>
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	e8 16       	cp	r14, r24
    27ce:	f9 06       	cpc	r15, r25
    27d0:	0c f4       	brge	.+2      	; 0x27d4 <_Z8USB_SendhPKvi+0x9c>
    27d2:	1e 2d       	mov	r17, r14
    27d4:	69 2d       	mov	r22, r9
    27d6:	ce 01       	movw	r24, r28
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN6LockEPC1Eh>
    27de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    27e2:	85 ff       	sbrs	r24, 5
    27e4:	34 c0       	rjmp	.+104    	; 0x284e <_Z8USB_SendhPKvi+0x116>
    27e6:	81 2f       	mov	r24, r17
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	e8 1a       	sub	r14, r24
    27ec:	f9 0a       	sbc	r15, r25
    27ee:	66 20       	and	r6, r6
    27f0:	29 f0       	breq	.+10     	; 0x27fc <_Z8USB_SendhPKvi+0xc4>
    27f2:	11 50       	subi	r17, 0x01	; 1
    27f4:	a0 f0       	brcs	.+40     	; 0x281e <_Z8USB_SendhPKvi+0xe6>
    27f6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    27fa:	fb cf       	rjmp	.-10     	; 0x27f2 <_Z8USB_SendhPKvi+0xba>
    27fc:	f6 01       	movw	r30, r12
    27fe:	97 fe       	sbrs	r9, 7
    2800:	0a c0       	rjmp	.+20     	; 0x2816 <_Z8USB_SendhPKvi+0xde>
    2802:	11 50       	subi	r17, 0x01	; 1
    2804:	50 f0       	brcs	.+20     	; 0x281a <_Z8USB_SendhPKvi+0xe2>
    2806:	24 91       	lpm	r18, Z
    2808:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    280c:	31 96       	adiw	r30, 0x01	; 1
    280e:	f9 cf       	rjmp	.-14     	; 0x2802 <_Z8USB_SendhPKvi+0xca>
    2810:	21 91       	ld	r18, Z+
    2812:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    2816:	11 50       	subi	r17, 0x01	; 1
    2818:	d8 f7       	brcc	.-10     	; 0x2810 <_Z8USB_SendhPKvi+0xd8>
    281a:	c8 0e       	add	r12, r24
    281c:	d9 1e       	adc	r13, r25
    281e:	aa 20       	and	r10, r10
    2820:	19 f0       	breq	.+6      	; 0x2828 <_Z8USB_SendhPKvi+0xf0>
    2822:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2826:	0b c0       	rjmp	.+22     	; 0x283e <_Z8USB_SendhPKvi+0x106>
    2828:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    282c:	85 fd       	sbrc	r24, 5
    282e:	09 c0       	rjmp	.+18     	; 0x2842 <_Z8USB_SendhPKvi+0x10a>
    2830:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2834:	aa 24       	eor	r10, r10
    2836:	a3 94       	inc	r10
    2838:	e1 14       	cp	r14, r1
    283a:	f1 04       	cpc	r15, r1
    283c:	41 f0       	breq	.+16     	; 0x284e <_Z8USB_SendhPKvi+0x116>
    283e:	a1 2c       	mov	r10, r1
    2840:	06 c0       	rjmp	.+12     	; 0x284e <_Z8USB_SendhPKvi+0x116>
    2842:	e1 14       	cp	r14, r1
    2844:	f1 04       	cpc	r15, r1
    2846:	19 f4       	brne	.+6      	; 0x284e <_Z8USB_SendhPKvi+0x116>
    2848:	51 10       	cpse	r5, r1
    284a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	8f bf       	out	0x3f, r24	; 63
    2852:	a5 cf       	rjmp	.-182    	; 0x279e <_Z8USB_SendhPKvi+0x66>
    2854:	5d 98       	cbi	0x0b, 5	; 11
    2856:	84 e6       	ldi	r24, 0x64	; 100
    2858:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <TxLEDPulse>
    285c:	8b 2d       	mov	r24, r11
    285e:	90 2f       	mov	r25, r16
    2860:	0f 90       	pop	r0
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	ff 90       	pop	r15
    286c:	ef 90       	pop	r14
    286e:	df 90       	pop	r13
    2870:	cf 90       	pop	r12
    2872:	bf 90       	pop	r11
    2874:	af 90       	pop	r10
    2876:	9f 90       	pop	r9
    2878:	8f 90       	pop	r8
    287a:	7f 90       	pop	r7
    287c:	6f 90       	pop	r6
    287e:	5f 90       	pop	r5
    2880:	08 95       	ret

00002882 <_Z11InitControli>:
    2882:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    2886:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <_ZL6_cmark+0x1>
    288a:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <_ZL6_cmark>
    288e:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <_ZL5_cend+0x1>
    2892:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <_ZL5_cend>
    2896:	08 95       	ret

00002898 <_Z15USB_SendControlhPKvi>:
    2898:	df 92       	push	r13
    289a:	ef 92       	push	r14
    289c:	ff 92       	push	r15
    289e:	0f 93       	push	r16
    28a0:	1f 93       	push	r17
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	d8 2e       	mov	r13, r24
    28a8:	8a 01       	movw	r16, r20
    28aa:	7b 01       	movw	r14, r22
    28ac:	e4 0e       	add	r14, r20
    28ae:	f5 1e       	adc	r15, r21
    28b0:	eb 01       	movw	r28, r22
    28b2:	ce 15       	cp	r28, r14
    28b4:	df 05       	cpc	r29, r15
    28b6:	71 f0       	breq	.+28     	; 0x28d4 <_Z15USB_SendControlhPKvi+0x3c>
    28b8:	d7 fe       	sbrs	r13, 7
    28ba:	03 c0       	rjmp	.+6      	; 0x28c2 <_Z15USB_SendControlhPKvi+0x2a>
    28bc:	fe 01       	movw	r30, r28
    28be:	84 91       	lpm	r24, Z
    28c0:	01 c0       	rjmp	.+2      	; 0x28c4 <_Z15USB_SendControlhPKvi+0x2c>
    28c2:	88 81       	ld	r24, Y
    28c4:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_ZL11SendControlh>
    28c8:	21 96       	adiw	r28, 0x01	; 1
    28ca:	81 11       	cpse	r24, r1
    28cc:	f2 cf       	rjmp	.-28     	; 0x28b2 <_Z15USB_SendControlhPKvi+0x1a>
    28ce:	8f ef       	ldi	r24, 0xFF	; 255
    28d0:	9f ef       	ldi	r25, 0xFF	; 255
    28d2:	01 c0       	rjmp	.+2      	; 0x28d6 <_Z15USB_SendControlhPKvi+0x3e>
    28d4:	c8 01       	movw	r24, r16
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	ff 90       	pop	r15
    28e0:	ef 90       	pop	r14
    28e2:	df 90       	pop	r13
    28e4:	08 95       	ret

000028e6 <_Z15USB_RecvControlPvi>:
    28e6:	af 92       	push	r10
    28e8:	bf 92       	push	r11
    28ea:	df 92       	push	r13
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	5c 01       	movw	r10, r24
    28fa:	8b 01       	movw	r16, r22
    28fc:	eb 01       	movw	r28, r22
    28fe:	9b ef       	ldi	r25, 0xFB	; 251
    2900:	d9 2e       	mov	r13, r25
    2902:	20 97       	sbiw	r28, 0x00	; 0
    2904:	c1 f0       	breq	.+48     	; 0x2936 <_Z15USB_RecvControlPvi+0x50>
    2906:	7e 01       	movw	r14, r28
    2908:	c1 34       	cpi	r28, 0x41	; 65
    290a:	d1 05       	cpc	r29, r1
    290c:	1c f0       	brlt	.+6      	; 0x2914 <_Z15USB_RecvControlPvi+0x2e>
    290e:	80 e4       	ldi	r24, 0x40	; 64
    2910:	e8 2e       	mov	r14, r24
    2912:	f1 2c       	mov	r15, r1
    2914:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2918:	82 ff       	sbrs	r24, 2
    291a:	fc cf       	rjmp	.-8      	; 0x2914 <_Z15USB_RecvControlPvi+0x2e>
    291c:	c8 01       	movw	r24, r16
    291e:	8c 1b       	sub	r24, r28
    2920:	9d 0b       	sbc	r25, r29
    2922:	6e 2d       	mov	r22, r14
    2924:	8a 0d       	add	r24, r10
    2926:	9b 1d       	adc	r25, r11
    2928:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZL4RecvPVhh>
    292c:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2930:	ce 19       	sub	r28, r14
    2932:	df 09       	sbc	r29, r15
    2934:	e6 cf       	rjmp	.-52     	; 0x2902 <_Z15USB_RecvControlPvi+0x1c>
    2936:	c8 01       	movw	r24, r16
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	ff 90       	pop	r15
    2942:	ef 90       	pop	r14
    2944:	df 90       	pop	r13
    2946:	bf 90       	pop	r11
    2948:	af 90       	pop	r10
    294a:	08 95       	ret

0000294c <__vector_11>:
    294c:	1f 92       	push	r1
    294e:	0f 92       	push	r0
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	0f 92       	push	r0
    2954:	11 24       	eor	r1, r1
    2956:	cf 92       	push	r12
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	2f 93       	push	r18
    2964:	3f 93       	push	r19
    2966:	4f 93       	push	r20
    2968:	5f 93       	push	r21
    296a:	6f 93       	push	r22
    296c:	7f 93       	push	r23
    296e:	8f 93       	push	r24
    2970:	9f 93       	push	r25
    2972:	af 93       	push	r26
    2974:	bf 93       	push	r27
    2976:	ef 93       	push	r30
    2978:	ff 93       	push	r31
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	6c 97       	sbiw	r28, 0x1c	; 28
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    298c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2990:	83 ff       	sbrs	r24, 3
    2992:	17 c1       	rjmp	.+558    	; 0x2bc2 <__vector_11+0x276>
    2994:	68 e0       	ldi	r22, 0x08	; 8
    2996:	ce 01       	movw	r24, r28
    2998:	45 96       	adiw	r24, 0x15	; 21
    299a:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZL4RecvPVhh>
    299e:	82 ef       	ldi	r24, 0xF2	; 242
    29a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    29a4:	8d 89       	ldd	r24, Y+21	; 0x15
    29a6:	87 ff       	sbrs	r24, 7
    29a8:	05 c0       	rjmp	.+10     	; 0x29b4 <__vector_11+0x68>
    29aa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    29ae:	90 ff       	sbrs	r25, 0
    29b0:	fc cf       	rjmp	.-8      	; 0x29aa <__vector_11+0x5e>
    29b2:	03 c0       	rjmp	.+6      	; 0x29ba <__vector_11+0x6e>
    29b4:	9e ef       	ldi	r25, 0xFE	; 254
    29b6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    29ba:	98 2f       	mov	r25, r24
    29bc:	90 76       	andi	r25, 0x60	; 96
    29be:	09 f0       	breq	.+2      	; 0x29c2 <__vector_11+0x76>
    29c0:	d8 c0       	rjmp	.+432    	; 0x2b72 <__vector_11+0x226>
    29c2:	9e 89       	ldd	r25, Y+22	; 0x16
    29c4:	4f 89       	ldd	r20, Y+23	; 0x17
    29c6:	58 8d       	ldd	r21, Y+24	; 0x18
    29c8:	2f 89       	ldd	r18, Y+23	; 0x17
    29ca:	18 8d       	ldd	r17, Y+24	; 0x18
    29cc:	91 11       	cpse	r25, r1
    29ce:	0c c0       	rjmp	.+24     	; 0x29e8 <__vector_11+0x9c>
    29d0:	80 38       	cpi	r24, 0x80	; 128
    29d2:	29 f4       	brne	.+10     	; 0x29de <__vector_11+0x92>
    29d4:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_usbCurrentStatus>
    29d8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <__vector_11+0x96>
    29de:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    29e2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    29e6:	e6 c0       	rjmp	.+460    	; 0x2bb4 <__vector_11+0x268>
    29e8:	91 30       	cpi	r25, 0x01	; 1
    29ea:	51 f4       	brne	.+20     	; 0x2a00 <__vector_11+0xb4>
    29ec:	81 11       	cpse	r24, r1
    29ee:	e2 c0       	rjmp	.+452    	; 0x2bb4 <__vector_11+0x268>
    29f0:	41 30       	cpi	r20, 0x01	; 1
    29f2:	51 05       	cpc	r21, r1
    29f4:	09 f0       	breq	.+2      	; 0x29f8 <__vector_11+0xac>
    29f6:	de c0       	rjmp	.+444    	; 0x2bb4 <__vector_11+0x268>
    29f8:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_usbCurrentStatus>
    29fc:	8d 7f       	andi	r24, 0xFD	; 253
    29fe:	0b c0       	rjmp	.+22     	; 0x2a16 <__vector_11+0xca>
    2a00:	93 30       	cpi	r25, 0x03	; 3
    2a02:	61 f4       	brne	.+24     	; 0x2a1c <__vector_11+0xd0>
    2a04:	81 11       	cpse	r24, r1
    2a06:	d6 c0       	rjmp	.+428    	; 0x2bb4 <__vector_11+0x268>
    2a08:	41 30       	cpi	r20, 0x01	; 1
    2a0a:	51 05       	cpc	r21, r1
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <__vector_11+0xc4>
    2a0e:	d2 c0       	rjmp	.+420    	; 0x2bb4 <__vector_11+0x268>
    2a10:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_usbCurrentStatus>
    2a14:	82 60       	ori	r24, 0x02	; 2
    2a16:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <_usbCurrentStatus>
    2a1a:	cc c0       	rjmp	.+408    	; 0x2bb4 <__vector_11+0x268>
    2a1c:	95 30       	cpi	r25, 0x05	; 5
    2a1e:	49 f4       	brne	.+18     	; 0x2a32 <__vector_11+0xe6>
    2a20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2a24:	80 ff       	sbrs	r24, 0
    2a26:	fc cf       	rjmp	.-8      	; 0x2a20 <__vector_11+0xd4>
    2a28:	82 2f       	mov	r24, r18
    2a2a:	80 68       	ori	r24, 0x80	; 128
    2a2c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    2a30:	c1 c0       	rjmp	.+386    	; 0x2bb4 <__vector_11+0x268>
    2a32:	96 30       	cpi	r25, 0x06	; 6
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <__vector_11+0xec>
    2a36:	70 c0       	rjmp	.+224    	; 0x2b18 <__vector_11+0x1cc>
    2a38:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2a3a:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2a3c:	12 30       	cpi	r17, 0x02	; 2
    2a3e:	69 f5       	brne	.+90     	; 0x2a9a <__vector_11+0x14e>
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 41 14 	call	0x2882	; 0x2882 <_Z11InitControli>
    2a48:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZL14SendInterfacesv>
    2a4c:	99 e0       	ldi	r25, 0x09	; 9
    2a4e:	9e 01       	movw	r18, r28
    2a50:	2f 5f       	subi	r18, 0xFF	; 255
    2a52:	3f 4f       	sbci	r19, 0xFF	; 255
    2a54:	69 01       	movw	r12, r18
    2a56:	f9 01       	movw	r30, r18
    2a58:	29 2f       	mov	r18, r25
    2a5a:	11 92       	st	Z+, r1
    2a5c:	2a 95       	dec	r18
    2a5e:	e9 f7       	brne	.-6      	; 0x2a5a <__vector_11+0x10e>
    2a60:	99 83       	std	Y+1, r25	; 0x01
    2a62:	1a 83       	std	Y+2, r17	; 0x02
    2a64:	91 e0       	ldi	r25, 0x01	; 1
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	90 ea       	ldi	r25, 0xA0	; 160
    2a6a:	98 87       	std	Y+8, r25	; 0x08
    2a6c:	9a ef       	ldi	r25, 0xFA	; 250
    2a6e:	99 87       	std	Y+9, r25	; 0x09
    2a70:	20 91 cd 04 	lds	r18, 0x04CD	; 0x8004cd <_ZL6_cmark>
    2a74:	30 91 ce 04 	lds	r19, 0x04CE	; 0x8004ce <_ZL6_cmark+0x1>
    2a78:	27 5f       	subi	r18, 0xF7	; 247
    2a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7c:	3c 83       	std	Y+4, r19	; 0x04
    2a7e:	2b 83       	std	Y+3, r18	; 0x03
    2a80:	8d 83       	std	Y+5, r24	; 0x05
    2a82:	c7 01       	movw	r24, r14
    2a84:	0e 94 41 14 	call	0x2882	; 0x2882 <_Z11InitControli>
    2a88:	49 e0       	ldi	r20, 0x09	; 9
    2a8a:	50 e0       	ldi	r21, 0x00	; 0
    2a8c:	b6 01       	movw	r22, r12
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	0e 94 4c 14 	call	0x2898	; 0x2898 <_Z15USB_SendControlhPKvi>
    2a94:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZL14SendInterfacesv>
    2a98:	8d c0       	rjmp	.+282    	; 0x2bb4 <__vector_11+0x268>
    2a9a:	c7 01       	movw	r24, r14
    2a9c:	0e 94 41 14 	call	0x2882	; 0x2882 <_Z11InitControli>
    2aa0:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_Z12PluggableUSBv>
    2aa4:	be 01       	movw	r22, r28
    2aa6:	6b 5e       	subi	r22, 0xEB	; 235
    2aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aaa:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	19 f0       	breq	.+6      	; 0x2ab8 <__vector_11+0x16c>
    2ab2:	0c f0       	brlt	.+2      	; 0x2ab6 <__vector_11+0x16a>
    2ab4:	7f c0       	rjmp	.+254    	; 0x2bb4 <__vector_11+0x268>
    2ab6:	82 c0       	rjmp	.+260    	; 0x2bbc <__vector_11+0x270>
    2ab8:	11 30       	cpi	r17, 0x01	; 1
    2aba:	09 f4       	brne	.+2      	; 0x2abe <__vector_11+0x172>
    2abc:	70 c0       	rjmp	.+224    	; 0x2b9e <__vector_11+0x252>
    2abe:	13 30       	cpi	r17, 0x03	; 3
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <__vector_11+0x178>
    2ac2:	7c c0       	rjmp	.+248    	; 0x2bbc <__vector_11+0x270>
    2ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac6:	88 23       	and	r24, r24
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <__vector_11+0x180>
    2aca:	6c c0       	rjmp	.+216    	; 0x2ba4 <__vector_11+0x258>
    2acc:	82 30       	cpi	r24, 0x02	; 2
    2ace:	29 f4       	brne	.+10     	; 0x2ada <__vector_11+0x18e>
    2ad0:	40 e8       	ldi	r20, 0x80	; 128
    2ad2:	60 e1       	ldi	r22, 0x10	; 16
    2ad4:	89 e4       	ldi	r24, 0x49	; 73
    2ad6:	91 e0       	ldi	r25, 0x01	; 1
    2ad8:	06 c0       	rjmp	.+12     	; 0x2ae6 <__vector_11+0x19a>
    2ada:	81 30       	cpi	r24, 0x01	; 1
    2adc:	39 f4       	brne	.+14     	; 0x2aec <__vector_11+0x1a0>
    2ade:	40 e8       	ldi	r20, 0x80	; 128
    2ae0:	6b e0       	ldi	r22, 0x0B	; 11
    2ae2:	8d e3       	ldi	r24, 0x3D	; 61
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZL24USB_SendStringDescriptorPKhhh>
    2aea:	56 c0       	rjmp	.+172    	; 0x2b98 <__vector_11+0x24c>
    2aec:	83 30       	cpi	r24, 0x03	; 3
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <__vector_11+0x1a6>
    2af0:	65 c0       	rjmp	.+202    	; 0x2bbc <__vector_11+0x270>
    2af2:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_Z12PluggableUSBv>
    2af6:	8e 01       	movw	r16, r28
    2af8:	0f 5f       	subi	r16, 0xFF	; 255
    2afa:	1f 4f       	sbci	r17, 0xFF	; 255
    2afc:	b8 01       	movw	r22, r16
    2afe:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN13PluggableUSB_12getShortNameEPc>
    2b02:	f8 01       	movw	r30, r16
    2b04:	01 90       	ld	r0, Z+
    2b06:	00 20       	and	r0, r0
    2b08:	e9 f7       	brne	.-6      	; 0x2b04 <__vector_11+0x1b8>
    2b0a:	31 97       	sbiw	r30, 0x01	; 1
    2b0c:	bf 01       	movw	r22, r30
    2b0e:	60 1b       	sub	r22, r16
    2b10:	71 0b       	sbc	r23, r17
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	c8 01       	movw	r24, r16
    2b16:	e7 cf       	rjmp	.-50     	; 0x2ae6 <__vector_11+0x19a>
    2b18:	97 30       	cpi	r25, 0x07	; 7
    2b1a:	09 f4       	brne	.+2      	; 0x2b1e <__vector_11+0x1d2>
    2b1c:	4f c0       	rjmp	.+158    	; 0x2bbc <__vector_11+0x270>
    2b1e:	98 30       	cpi	r25, 0x08	; 8
    2b20:	21 f4       	brne	.+8      	; 0x2b2a <__vector_11+0x1de>
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    2b28:	45 c0       	rjmp	.+138    	; 0x2bb4 <__vector_11+0x268>
    2b2a:	99 30       	cpi	r25, 0x09	; 9
    2b2c:	09 f0       	breq	.+2      	; 0x2b30 <__vector_11+0x1e4>
    2b2e:	42 c0       	rjmp	.+132    	; 0x2bb4 <__vector_11+0x268>
    2b30:	83 70       	andi	r24, 0x03	; 3
    2b32:	09 f0       	breq	.+2      	; 0x2b36 <__vector_11+0x1ea>
    2b34:	43 c0       	rjmp	.+134    	; 0x2bbc <__vector_11+0x270>
    2b36:	e6 ed       	ldi	r30, 0xD6	; 214
    2b38:	f1 e0       	ldi	r31, 0x01	; 1
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	31 e0       	ldi	r19, 0x01	; 1
    2b3e:	96 e3       	ldi	r25, 0x36	; 54
    2b40:	20 81       	ld	r18, Z
    2b42:	21 11       	cpse	r18, r1
    2b44:	09 c0       	rjmp	.+18     	; 0x2b58 <__vector_11+0x20c>
    2b46:	8e e7       	ldi	r24, 0x7E	; 126
    2b48:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
    2b4c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
    2b50:	8f 89       	ldd	r24, Y+23	; 0x17
    2b52:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_usbConfiguration>
    2b56:	2e c0       	rjmp	.+92     	; 0x2bb4 <__vector_11+0x268>
    2b58:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    2b5c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    2b60:	21 91       	ld	r18, Z+
    2b62:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    2b66:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    2b6a:	8f 5f       	subi	r24, 0xFF	; 255
    2b6c:	87 30       	cpi	r24, 0x07	; 7
    2b6e:	41 f7       	brne	.-48     	; 0x2b40 <__vector_11+0x1f4>
    2b70:	ea cf       	rjmp	.-44     	; 0x2b46 <__vector_11+0x1fa>
    2b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b76:	0e 94 41 14 	call	0x2882	; 0x2882 <_Z11InitControli>
    2b7a:	89 8d       	ldd	r24, Y+25	; 0x19
    2b7c:	81 11       	cpse	r24, r1
    2b7e:	05 c0       	rjmp	.+10     	; 0x2b8a <__vector_11+0x23e>
    2b80:	ce 01       	movw	r24, r28
    2b82:	45 96       	adiw	r24, 0x15	; 21
    2b84:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_Z9CDC_SetupR8USBSetup>
    2b88:	07 c0       	rjmp	.+14     	; 0x2b98 <__vector_11+0x24c>
    2b8a:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_Z12PluggableUSBv>
    2b8e:	be 01       	movw	r22, r28
    2b90:	6b 5e       	subi	r22, 0xEB	; 235
    2b92:	7f 4f       	sbci	r23, 0xFF	; 255
    2b94:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <_ZN13PluggableUSB_5setupER8USBSetup>
    2b98:	88 23       	and	r24, r24
    2b9a:	81 f0       	breq	.+32     	; 0x2bbc <__vector_11+0x270>
    2b9c:	0b c0       	rjmp	.+22     	; 0x2bb4 <__vector_11+0x268>
    2b9e:	6b e2       	ldi	r22, 0x2B	; 43
    2ba0:	71 e0       	ldi	r23, 0x01	; 1
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <__vector_11+0x25c>
    2ba4:	6a e5       	ldi	r22, 0x5A	; 90
    2ba6:	71 e0       	ldi	r23, 0x01	; 1
    2ba8:	fb 01       	movw	r30, r22
    2baa:	44 91       	lpm	r20, Z
    2bac:	50 e0       	ldi	r21, 0x00	; 0
    2bae:	80 e8       	ldi	r24, 0x80	; 128
    2bb0:	0e 94 4c 14 	call	0x2898	; 0x2898 <_Z15USB_SendControlhPKvi>
    2bb4:	8e ef       	ldi	r24, 0xFE	; 254
    2bb6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2bba:	03 c0       	rjmp	.+6      	; 0x2bc2 <__vector_11+0x276>
    2bbc:	81 e2       	ldi	r24, 0x21	; 33
    2bbe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    2bc2:	6c 96       	adiw	r28, 0x1c	; 28
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	ff 91       	pop	r31
    2bd4:	ef 91       	pop	r30
    2bd6:	bf 91       	pop	r27
    2bd8:	af 91       	pop	r26
    2bda:	9f 91       	pop	r25
    2bdc:	8f 91       	pop	r24
    2bde:	7f 91       	pop	r23
    2be0:	6f 91       	pop	r22
    2be2:	5f 91       	pop	r21
    2be4:	4f 91       	pop	r20
    2be6:	3f 91       	pop	r19
    2be8:	2f 91       	pop	r18
    2bea:	1f 91       	pop	r17
    2bec:	0f 91       	pop	r16
    2bee:	ff 90       	pop	r15
    2bf0:	ef 90       	pop	r14
    2bf2:	df 90       	pop	r13
    2bf4:	cf 90       	pop	r12
    2bf6:	0f 90       	pop	r0
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	0f 90       	pop	r0
    2bfc:	1f 90       	pop	r1
    2bfe:	18 95       	reti

00002c00 <_Z9USB_Flushh>:
    2c00:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    2c04:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    2c08:	88 23       	and	r24, r24
    2c0a:	19 f0       	breq	.+6      	; 0x2c12 <_Z9USB_Flushh+0x12>
    2c0c:	8a e3       	ldi	r24, 0x3A	; 58
    2c0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2c12:	08 95       	ret

00002c14 <__vector_10>:
    2c14:	1f 92       	push	r1
    2c16:	0f 92       	push	r0
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	0f 92       	push	r0
    2c1c:	11 24       	eor	r1, r1
    2c1e:	2f 93       	push	r18
    2c20:	3f 93       	push	r19
    2c22:	4f 93       	push	r20
    2c24:	5f 93       	push	r21
    2c26:	6f 93       	push	r22
    2c28:	7f 93       	push	r23
    2c2a:	8f 93       	push	r24
    2c2c:	9f 93       	push	r25
    2c2e:	af 93       	push	r26
    2c30:	bf 93       	push	r27
    2c32:	cf 93       	push	r28
    2c34:	ef 93       	push	r30
    2c36:	ff 93       	push	r31
    2c38:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    2c3c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    2c40:	83 7f       	andi	r24, 0xF3	; 243
    2c42:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    2c46:	c3 ff       	sbrs	r28, 3
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <__vector_10+0x54>
    2c4a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    2c54:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    2c58:	82 e3       	ldi	r24, 0x32	; 50
    2c5a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    2c5e:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <_usbConfiguration>
    2c62:	88 e0       	ldi	r24, 0x08	; 8
    2c64:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
    2c68:	c2 ff       	sbrs	r28, 2
    2c6a:	19 c0       	rjmp	.+50     	; 0x2c9e <__vector_10+0x8a>
    2c6c:	83 e0       	ldi	r24, 0x03	; 3
    2c6e:	0e 94 00 16 	call	0x2c00	; 0x2c00 <_Z9USB_Flushh>
    2c72:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <TxLEDPulse>
    2c76:	88 23       	and	r24, r24
    2c78:	39 f0       	breq	.+14     	; 0x2c88 <__vector_10+0x74>
    2c7a:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <TxLEDPulse>
    2c7e:	81 50       	subi	r24, 0x01	; 1
    2c80:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <TxLEDPulse>
    2c84:	88 23       	and	r24, r24
    2c86:	89 f1       	breq	.+98     	; 0x2cea <__vector_10+0xd6>
    2c88:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <RxLEDPulse>
    2c8c:	88 23       	and	r24, r24
    2c8e:	39 f0       	breq	.+14     	; 0x2c9e <__vector_10+0x8a>
    2c90:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <RxLEDPulse>
    2c94:	81 50       	subi	r24, 0x01	; 1
    2c96:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <RxLEDPulse>
    2c9a:	88 23       	and	r24, r24
    2c9c:	41 f1       	breq	.+80     	; 0x2cee <__vector_10+0xda>
    2c9e:	c4 ff       	sbrs	r28, 4
    2ca0:	10 c0       	rjmp	.+32     	; 0x2cc2 <__vector_10+0xae>
    2ca2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    2ca6:	8e 7e       	andi	r24, 0xEE	; 238
    2ca8:	81 60       	ori	r24, 0x01	; 1
    2caa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    2cae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    2cb2:	8f 7e       	andi	r24, 0xEF	; 239
    2cb4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    2cb8:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <_usbSuspendState>
    2cbc:	8e 7e       	andi	r24, 0xEE	; 238
    2cbe:	80 61       	ori	r24, 0x10	; 16
    2cc0:	11 c0       	rjmp	.+34     	; 0x2ce4 <__vector_10+0xd0>
    2cc2:	c0 ff       	sbrs	r28, 0
    2cc4:	16 c0       	rjmp	.+44     	; 0x2cf2 <__vector_10+0xde>
    2cc6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    2cca:	8e 7e       	andi	r24, 0xEE	; 238
    2ccc:	80 61       	ori	r24, 0x10	; 16
    2cce:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    2cd2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    2cd6:	8e 7e       	andi	r24, 0xEE	; 238
    2cd8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    2cdc:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <_usbSuspendState>
    2ce0:	8e 7e       	andi	r24, 0xEE	; 238
    2ce2:	81 60       	ori	r24, 0x01	; 1
    2ce4:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <_usbSuspendState>
    2ce8:	04 c0       	rjmp	.+8      	; 0x2cf2 <__vector_10+0xde>
    2cea:	5d 9a       	sbi	0x0b, 5	; 11
    2cec:	cd cf       	rjmp	.-102    	; 0x2c88 <__vector_10+0x74>
    2cee:	28 9a       	sbi	0x05, 0	; 5
    2cf0:	d6 cf       	rjmp	.-84     	; 0x2c9e <__vector_10+0x8a>
    2cf2:	ff 91       	pop	r31
    2cf4:	ef 91       	pop	r30
    2cf6:	cf 91       	pop	r28
    2cf8:	bf 91       	pop	r27
    2cfa:	af 91       	pop	r26
    2cfc:	9f 91       	pop	r25
    2cfe:	8f 91       	pop	r24
    2d00:	7f 91       	pop	r23
    2d02:	6f 91       	pop	r22
    2d04:	5f 91       	pop	r21
    2d06:	4f 91       	pop	r20
    2d08:	3f 91       	pop	r19
    2d0a:	2f 91       	pop	r18
    2d0c:	0f 90       	pop	r0
    2d0e:	0f be       	out	0x3f, r0	; 63
    2d10:	0f 90       	pop	r0
    2d12:	1f 90       	pop	r1
    2d14:	18 95       	reti

00002d16 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    2d16:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <_usbConfiguration>
	_usbCurrentStatus = 0;
    2d1a:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <_usbCurrentStatus>
	_usbSuspendState = 0;
    2d1e:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <_usbSuspendState>
	USB_ClockEnable();
    2d22:	0e 94 d5 12 	call	0x25aa	; 0x25aa <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    2d26:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    2d2a:	8e 7e       	andi	r24, 0xEE	; 238
    2d2c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    2d30:	8d e0       	ldi	r24, 0x0D	; 13
    2d32:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
	
	TX_RX_LED_INIT;
    2d36:	55 9a       	sbi	0x0a, 5	; 10
    2d38:	20 9a       	sbi	0x04, 0	; 4

#if MAGIC_KEY_POS != (RAMEND-1)
	if (pgm_read_word(FLASHEND - 1) == NEW_LUFA_SIGNATURE) {
    2d3a:	ee ef       	ldi	r30, 0xFE	; 254
    2d3c:	ff e7       	ldi	r31, 0x7F	; 127
    2d3e:	85 91       	lpm	r24, Z+
    2d40:	94 91       	lpm	r25, Z
    2d42:	8b 3f       	cpi	r24, 0xFB	; 251
    2d44:	9c 4d       	sbci	r25, 0xDC	; 220
    2d46:	19 f4       	brne	.+6      	; 0x2d4e <_ZN10USBDevice_6attachEv+0x38>
		_updatedLUFAbootloader = true;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <_updatedLUFAbootloader>
    2d4e:	08 95       	ret

00002d50 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    2d50:	08 95       	ret

00002d52 <attachInterrupt>:
    2d52:	85 30       	cpi	r24, 0x05	; 5
    2d54:	08 f0       	brcs	.+2      	; 0x2d58 <attachInterrupt+0x6>
    2d56:	4c c0       	rjmp	.+152    	; 0x2df0 <attachInterrupt+0x9e>
    2d58:	e8 2f       	mov	r30, r24
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	ee 0f       	add	r30, r30
    2d5e:	ff 1f       	adc	r31, r31
    2d60:	e4 52       	subi	r30, 0x24	; 36
    2d62:	fe 4f       	sbci	r31, 0xFE	; 254
    2d64:	71 83       	std	Z+1, r23	; 0x01
    2d66:	60 83       	st	Z, r22
    2d68:	82 30       	cpi	r24, 0x02	; 2
    2d6a:	e1 f0       	breq	.+56     	; 0x2da4 <attachInterrupt+0x52>
    2d6c:	18 f4       	brcc	.+6      	; 0x2d74 <attachInterrupt+0x22>
    2d6e:	81 30       	cpi	r24, 0x01	; 1
    2d70:	69 f0       	breq	.+26     	; 0x2d8c <attachInterrupt+0x3a>
    2d72:	04 c0       	rjmp	.+8      	; 0x2d7c <attachInterrupt+0x2a>
    2d74:	83 30       	cpi	r24, 0x03	; 3
    2d76:	19 f1       	breq	.+70     	; 0x2dbe <attachInterrupt+0x6c>
    2d78:	84 30       	cpi	r24, 0x04	; 4
    2d7a:	71 f1       	breq	.+92     	; 0x2dd8 <attachInterrupt+0x86>
    2d7c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2d80:	8c 7f       	andi	r24, 0xFC	; 252
    2d82:	48 2b       	or	r20, r24
    2d84:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2d88:	e8 9a       	sbi	0x1d, 0	; 29
    2d8a:	08 95       	ret
    2d8c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2d90:	83 7f       	andi	r24, 0xF3	; 243
    2d92:	44 0f       	add	r20, r20
    2d94:	55 1f       	adc	r21, r21
    2d96:	44 0f       	add	r20, r20
    2d98:	55 1f       	adc	r21, r21
    2d9a:	48 2b       	or	r20, r24
    2d9c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2da0:	e9 9a       	sbi	0x1d, 1	; 29
    2da2:	08 95       	ret
    2da4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2da8:	8f 7c       	andi	r24, 0xCF	; 207
    2daa:	34 e0       	ldi	r19, 0x04	; 4
    2dac:	44 0f       	add	r20, r20
    2dae:	55 1f       	adc	r21, r21
    2db0:	3a 95       	dec	r19
    2db2:	e1 f7       	brne	.-8      	; 0x2dac <attachInterrupt+0x5a>
    2db4:	48 2b       	or	r20, r24
    2db6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2dba:	ea 9a       	sbi	0x1d, 2	; 29
    2dbc:	08 95       	ret
    2dbe:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2dc2:	8f 73       	andi	r24, 0x3F	; 63
    2dc4:	26 e0       	ldi	r18, 0x06	; 6
    2dc6:	44 0f       	add	r20, r20
    2dc8:	55 1f       	adc	r21, r21
    2dca:	2a 95       	dec	r18
    2dcc:	e1 f7       	brne	.-8      	; 0x2dc6 <attachInterrupt+0x74>
    2dce:	48 2b       	or	r20, r24
    2dd0:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2dd4:	eb 9a       	sbi	0x1d, 3	; 29
    2dd6:	08 95       	ret
    2dd8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    2ddc:	8f 7c       	andi	r24, 0xCF	; 207
    2dde:	94 e0       	ldi	r25, 0x04	; 4
    2de0:	44 0f       	add	r20, r20
    2de2:	55 1f       	adc	r21, r21
    2de4:	9a 95       	dec	r25
    2de6:	e1 f7       	brne	.-8      	; 0x2de0 <attachInterrupt+0x8e>
    2de8:	48 2b       	or	r20, r24
    2dea:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    2dee:	ee 9a       	sbi	0x1d, 6	; 29
    2df0:	08 95       	ret

00002df2 <__vector_1>:
    intFunc[interrupt](); \
  }

#if defined(__AVR_ATmega32U4__)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2df2:	1f 92       	push	r1
    2df4:	0f 92       	push	r0
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	0f 92       	push	r0
    2dfa:	11 24       	eor	r1, r1
    2dfc:	2f 93       	push	r18
    2dfe:	3f 93       	push	r19
    2e00:	4f 93       	push	r20
    2e02:	5f 93       	push	r21
    2e04:	6f 93       	push	r22
    2e06:	7f 93       	push	r23
    2e08:	8f 93       	push	r24
    2e0a:	9f 93       	push	r25
    2e0c:	af 93       	push	r26
    2e0e:	bf 93       	push	r27
    2e10:	ef 93       	push	r30
    2e12:	ff 93       	push	r31
    2e14:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <intFunc>
    2e18:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <intFunc+0x1>
    2e1c:	09 95       	icall
    2e1e:	ff 91       	pop	r31
    2e20:	ef 91       	pop	r30
    2e22:	bf 91       	pop	r27
    2e24:	af 91       	pop	r26
    2e26:	9f 91       	pop	r25
    2e28:	8f 91       	pop	r24
    2e2a:	7f 91       	pop	r23
    2e2c:	6f 91       	pop	r22
    2e2e:	5f 91       	pop	r21
    2e30:	4f 91       	pop	r20
    2e32:	3f 91       	pop	r19
    2e34:	2f 91       	pop	r18
    2e36:	0f 90       	pop	r0
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	0f 90       	pop	r0
    2e3c:	1f 90       	pop	r1
    2e3e:	18 95       	reti

00002e40 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2e40:	1f 92       	push	r1
    2e42:	0f 92       	push	r0
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	0f 92       	push	r0
    2e48:	11 24       	eor	r1, r1
    2e4a:	2f 93       	push	r18
    2e4c:	3f 93       	push	r19
    2e4e:	4f 93       	push	r20
    2e50:	5f 93       	push	r21
    2e52:	6f 93       	push	r22
    2e54:	7f 93       	push	r23
    2e56:	8f 93       	push	r24
    2e58:	9f 93       	push	r25
    2e5a:	af 93       	push	r26
    2e5c:	bf 93       	push	r27
    2e5e:	ef 93       	push	r30
    2e60:	ff 93       	push	r31
    2e62:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <intFunc+0x2>
    2e66:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <intFunc+0x3>
    2e6a:	09 95       	icall
    2e6c:	ff 91       	pop	r31
    2e6e:	ef 91       	pop	r30
    2e70:	bf 91       	pop	r27
    2e72:	af 91       	pop	r26
    2e74:	9f 91       	pop	r25
    2e76:	8f 91       	pop	r24
    2e78:	7f 91       	pop	r23
    2e7a:	6f 91       	pop	r22
    2e7c:	5f 91       	pop	r21
    2e7e:	4f 91       	pop	r20
    2e80:	3f 91       	pop	r19
    2e82:	2f 91       	pop	r18
    2e84:	0f 90       	pop	r0
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	0f 90       	pop	r0
    2e8a:	1f 90       	pop	r1
    2e8c:	18 95       	reti

00002e8e <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    2e8e:	1f 92       	push	r1
    2e90:	0f 92       	push	r0
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	0f 92       	push	r0
    2e96:	11 24       	eor	r1, r1
    2e98:	2f 93       	push	r18
    2e9a:	3f 93       	push	r19
    2e9c:	4f 93       	push	r20
    2e9e:	5f 93       	push	r21
    2ea0:	6f 93       	push	r22
    2ea2:	7f 93       	push	r23
    2ea4:	8f 93       	push	r24
    2ea6:	9f 93       	push	r25
    2ea8:	af 93       	push	r26
    2eaa:	bf 93       	push	r27
    2eac:	ef 93       	push	r30
    2eae:	ff 93       	push	r31
    2eb0:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <intFunc+0x4>
    2eb4:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <intFunc+0x5>
    2eb8:	09 95       	icall
    2eba:	ff 91       	pop	r31
    2ebc:	ef 91       	pop	r30
    2ebe:	bf 91       	pop	r27
    2ec0:	af 91       	pop	r26
    2ec2:	9f 91       	pop	r25
    2ec4:	8f 91       	pop	r24
    2ec6:	7f 91       	pop	r23
    2ec8:	6f 91       	pop	r22
    2eca:	5f 91       	pop	r21
    2ecc:	4f 91       	pop	r20
    2ece:	3f 91       	pop	r19
    2ed0:	2f 91       	pop	r18
    2ed2:	0f 90       	pop	r0
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	0f 90       	pop	r0
    2ed8:	1f 90       	pop	r1
    2eda:	18 95       	reti

00002edc <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    2edc:	1f 92       	push	r1
    2ede:	0f 92       	push	r0
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	0f 92       	push	r0
    2ee4:	11 24       	eor	r1, r1
    2ee6:	2f 93       	push	r18
    2ee8:	3f 93       	push	r19
    2eea:	4f 93       	push	r20
    2eec:	5f 93       	push	r21
    2eee:	6f 93       	push	r22
    2ef0:	7f 93       	push	r23
    2ef2:	8f 93       	push	r24
    2ef4:	9f 93       	push	r25
    2ef6:	af 93       	push	r26
    2ef8:	bf 93       	push	r27
    2efa:	ef 93       	push	r30
    2efc:	ff 93       	push	r31
    2efe:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <intFunc+0x6>
    2f02:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <intFunc+0x7>
    2f06:	09 95       	icall
    2f08:	ff 91       	pop	r31
    2f0a:	ef 91       	pop	r30
    2f0c:	bf 91       	pop	r27
    2f0e:	af 91       	pop	r26
    2f10:	9f 91       	pop	r25
    2f12:	8f 91       	pop	r24
    2f14:	7f 91       	pop	r23
    2f16:	6f 91       	pop	r22
    2f18:	5f 91       	pop	r21
    2f1a:	4f 91       	pop	r20
    2f1c:	3f 91       	pop	r19
    2f1e:	2f 91       	pop	r18
    2f20:	0f 90       	pop	r0
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	0f 90       	pop	r0
    2f26:	1f 90       	pop	r1
    2f28:	18 95       	reti

00002f2a <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)
    2f2a:	1f 92       	push	r1
    2f2c:	0f 92       	push	r0
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	0f 92       	push	r0
    2f32:	11 24       	eor	r1, r1
    2f34:	2f 93       	push	r18
    2f36:	3f 93       	push	r19
    2f38:	4f 93       	push	r20
    2f3a:	5f 93       	push	r21
    2f3c:	6f 93       	push	r22
    2f3e:	7f 93       	push	r23
    2f40:	8f 93       	push	r24
    2f42:	9f 93       	push	r25
    2f44:	af 93       	push	r26
    2f46:	bf 93       	push	r27
    2f48:	ef 93       	push	r30
    2f4a:	ff 93       	push	r31
    2f4c:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <intFunc+0x8>
    2f50:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <intFunc+0x9>
    2f54:	09 95       	icall
    2f56:	ff 91       	pop	r31
    2f58:	ef 91       	pop	r30
    2f5a:	bf 91       	pop	r27
    2f5c:	af 91       	pop	r26
    2f5e:	9f 91       	pop	r25
    2f60:	8f 91       	pop	r24
    2f62:	7f 91       	pop	r23
    2f64:	6f 91       	pop	r22
    2f66:	5f 91       	pop	r21
    2f68:	4f 91       	pop	r20
    2f6a:	3f 91       	pop	r19
    2f6c:	2f 91       	pop	r18
    2f6e:	0f 90       	pop	r0
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	0f 90       	pop	r0
    2f74:	1f 90       	pop	r1
    2f76:	18 95       	reti

00002f78 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2f78:	1f 92       	push	r1
    2f7a:	0f 92       	push	r0
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	0f 92       	push	r0
    2f80:	11 24       	eor	r1, r1
    2f82:	2f 93       	push	r18
    2f84:	3f 93       	push	r19
    2f86:	8f 93       	push	r24
    2f88:	9f 93       	push	r25
    2f8a:	af 93       	push	r26
    2f8c:	bf 93       	push	r27
    2f8e:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <timer0_millis>
    2f92:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <timer0_millis+0x1>
    2f96:	a0 91 d7 04 	lds	r26, 0x04D7	; 0x8004d7 <timer0_millis+0x2>
    2f9a:	b0 91 d8 04 	lds	r27, 0x04D8	; 0x8004d8 <timer0_millis+0x3>
    2f9e:	30 91 d4 04 	lds	r19, 0x04D4	; 0x8004d4 <timer0_fract>
    2fa2:	23 e0       	ldi	r18, 0x03	; 3
    2fa4:	23 0f       	add	r18, r19
    2fa6:	2d 37       	cpi	r18, 0x7D	; 125
    2fa8:	20 f4       	brcc	.+8      	; 0x2fb2 <__vector_23+0x3a>
    2faa:	01 96       	adiw	r24, 0x01	; 1
    2fac:	a1 1d       	adc	r26, r1
    2fae:	b1 1d       	adc	r27, r1
    2fb0:	05 c0       	rjmp	.+10     	; 0x2fbc <__vector_23+0x44>
    2fb2:	26 e8       	ldi	r18, 0x86	; 134
    2fb4:	23 0f       	add	r18, r19
    2fb6:	02 96       	adiw	r24, 0x02	; 2
    2fb8:	a1 1d       	adc	r26, r1
    2fba:	b1 1d       	adc	r27, r1
    2fbc:	20 93 d4 04 	sts	0x04D4, r18	; 0x8004d4 <timer0_fract>
    2fc0:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <timer0_millis>
    2fc4:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <timer0_millis+0x1>
    2fc8:	a0 93 d7 04 	sts	0x04D7, r26	; 0x8004d7 <timer0_millis+0x2>
    2fcc:	b0 93 d8 04 	sts	0x04D8, r27	; 0x8004d8 <timer0_millis+0x3>
    2fd0:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <timer0_overflow_count>
    2fd4:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <timer0_overflow_count+0x1>
    2fd8:	a0 91 db 04 	lds	r26, 0x04DB	; 0x8004db <timer0_overflow_count+0x2>
    2fdc:	b0 91 dc 04 	lds	r27, 0x04DC	; 0x8004dc <timer0_overflow_count+0x3>
    2fe0:	01 96       	adiw	r24, 0x01	; 1
    2fe2:	a1 1d       	adc	r26, r1
    2fe4:	b1 1d       	adc	r27, r1
    2fe6:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <timer0_overflow_count>
    2fea:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <timer0_overflow_count+0x1>
    2fee:	a0 93 db 04 	sts	0x04DB, r26	; 0x8004db <timer0_overflow_count+0x2>
    2ff2:	b0 93 dc 04 	sts	0x04DC, r27	; 0x8004dc <timer0_overflow_count+0x3>
    2ff6:	bf 91       	pop	r27
    2ff8:	af 91       	pop	r26
    2ffa:	9f 91       	pop	r25
    2ffc:	8f 91       	pop	r24
    2ffe:	3f 91       	pop	r19
    3000:	2f 91       	pop	r18
    3002:	0f 90       	pop	r0
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	0f 90       	pop	r0
    3008:	1f 90       	pop	r1
    300a:	18 95       	reti

0000300c <millis>:
    300c:	2f b7       	in	r18, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	60 91 d5 04 	lds	r22, 0x04D5	; 0x8004d5 <timer0_millis>
    3014:	70 91 d6 04 	lds	r23, 0x04D6	; 0x8004d6 <timer0_millis+0x1>
    3018:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <timer0_millis+0x2>
    301c:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <timer0_millis+0x3>
    3020:	2f bf       	out	0x3f, r18	; 63
    3022:	08 95       	ret

00003024 <micros>:
    3024:	3f b7       	in	r19, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <timer0_overflow_count>
    302c:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <timer0_overflow_count+0x1>
    3030:	a0 91 db 04 	lds	r26, 0x04DB	; 0x8004db <timer0_overflow_count+0x2>
    3034:	b0 91 dc 04 	lds	r27, 0x04DC	; 0x8004dc <timer0_overflow_count+0x3>
    3038:	26 b5       	in	r18, 0x26	; 38
    303a:	a8 9b       	sbis	0x15, 0	; 21
    303c:	05 c0       	rjmp	.+10     	; 0x3048 <micros+0x24>
    303e:	2f 3f       	cpi	r18, 0xFF	; 255
    3040:	19 f0       	breq	.+6      	; 0x3048 <micros+0x24>
    3042:	01 96       	adiw	r24, 0x01	; 1
    3044:	a1 1d       	adc	r26, r1
    3046:	b1 1d       	adc	r27, r1
    3048:	3f bf       	out	0x3f, r19	; 63
    304a:	ba 2f       	mov	r27, r26
    304c:	a9 2f       	mov	r26, r25
    304e:	98 2f       	mov	r25, r24
    3050:	88 27       	eor	r24, r24
    3052:	82 0f       	add	r24, r18
    3054:	91 1d       	adc	r25, r1
    3056:	a1 1d       	adc	r26, r1
    3058:	b1 1d       	adc	r27, r1
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	42 e0       	ldi	r20, 0x02	; 2
    3060:	66 0f       	add	r22, r22
    3062:	77 1f       	adc	r23, r23
    3064:	88 1f       	adc	r24, r24
    3066:	99 1f       	adc	r25, r25
    3068:	4a 95       	dec	r20
    306a:	d1 f7       	brne	.-12     	; 0x3060 <micros+0x3c>
    306c:	08 95       	ret

0000306e <delay>:
    306e:	8f 92       	push	r8
    3070:	9f 92       	push	r9
    3072:	af 92       	push	r10
    3074:	bf 92       	push	r11
    3076:	cf 92       	push	r12
    3078:	df 92       	push	r13
    307a:	ef 92       	push	r14
    307c:	ff 92       	push	r15
    307e:	6b 01       	movw	r12, r22
    3080:	7c 01       	movw	r14, r24
    3082:	0e 94 12 18 	call	0x3024	; 0x3024 <micros>
    3086:	4b 01       	movw	r8, r22
    3088:	5c 01       	movw	r10, r24
    308a:	c1 14       	cp	r12, r1
    308c:	d1 04       	cpc	r13, r1
    308e:	e1 04       	cpc	r14, r1
    3090:	f1 04       	cpc	r15, r1
    3092:	01 f1       	breq	.+64     	; 0x30d4 <delay+0x66>
    3094:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <yield>
    3098:	0e 94 12 18 	call	0x3024	; 0x3024 <micros>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	88 19       	sub	r24, r8
    30a2:	99 09       	sbc	r25, r9
    30a4:	aa 09       	sbc	r26, r10
    30a6:	bb 09       	sbc	r27, r11
    30a8:	88 3e       	cpi	r24, 0xE8	; 232
    30aa:	93 40       	sbci	r25, 0x03	; 3
    30ac:	a1 05       	cpc	r26, r1
    30ae:	b1 05       	cpc	r27, r1
    30b0:	60 f3       	brcs	.-40     	; 0x308a <delay+0x1c>
    30b2:	21 e0       	ldi	r18, 0x01	; 1
    30b4:	c2 1a       	sub	r12, r18
    30b6:	d1 08       	sbc	r13, r1
    30b8:	e1 08       	sbc	r14, r1
    30ba:	f1 08       	sbc	r15, r1
    30bc:	88 ee       	ldi	r24, 0xE8	; 232
    30be:	88 0e       	add	r8, r24
    30c0:	83 e0       	ldi	r24, 0x03	; 3
    30c2:	98 1e       	adc	r9, r24
    30c4:	a1 1c       	adc	r10, r1
    30c6:	b1 1c       	adc	r11, r1
    30c8:	c1 14       	cp	r12, r1
    30ca:	d1 04       	cpc	r13, r1
    30cc:	e1 04       	cpc	r14, r1
    30ce:	f1 04       	cpc	r15, r1
    30d0:	19 f7       	brne	.-58     	; 0x3098 <delay+0x2a>
    30d2:	db cf       	rjmp	.-74     	; 0x308a <delay+0x1c>
    30d4:	ff 90       	pop	r15
    30d6:	ef 90       	pop	r14
    30d8:	df 90       	pop	r13
    30da:	cf 90       	pop	r12
    30dc:	bf 90       	pop	r11
    30de:	af 90       	pop	r10
    30e0:	9f 90       	pop	r9
    30e2:	8f 90       	pop	r8
    30e4:	08 95       	ret

000030e6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    30e6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    30e8:	84 b5       	in	r24, 0x24	; 36
    30ea:	82 60       	ori	r24, 0x02	; 2
    30ec:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    30ee:	84 b5       	in	r24, 0x24	; 36
    30f0:	81 60       	ori	r24, 0x01	; 1
    30f2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    30f4:	85 b5       	in	r24, 0x25	; 37
    30f6:	82 60       	ori	r24, 0x02	; 2
    30f8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    30fa:	85 b5       	in	r24, 0x25	; 37
    30fc:	81 60       	ori	r24, 0x01	; 1
    30fe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3100:	ee e6       	ldi	r30, 0x6E	; 110
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	81 60       	ori	r24, 0x01	; 1
    3108:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    310a:	e1 e8       	ldi	r30, 0x81	; 129
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3110:	80 81       	ld	r24, Z
    3112:	82 60       	ori	r24, 0x02	; 2
    3114:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3116:	80 81       	ld	r24, Z
    3118:	81 60       	ori	r24, 0x01	; 1
    311a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    311c:	e0 e8       	ldi	r30, 0x80	; 128
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	80 81       	ld	r24, Z
    3122:	81 60       	ori	r24, 0x01	; 1
    3124:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    3126:	e1 e9       	ldi	r30, 0x91	; 145
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	82 60       	ori	r24, 0x02	; 2
    312e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    3130:	80 81       	ld	r24, Z
    3132:	81 60       	ori	r24, 0x01	; 1
    3134:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    3136:	e0 e9       	ldi	r30, 0x90	; 144
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	81 60       	ori	r24, 0x01	; 1
    313e:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    3140:	e1 ec       	ldi	r30, 0xC1	; 193
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	84 60       	ori	r24, 0x04	; 4
    3148:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    314a:	80 81       	ld	r24, Z
    314c:	82 60       	ori	r24, 0x02	; 2
    314e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    3150:	80 81       	ld	r24, Z
    3152:	81 60       	ori	r24, 0x01	; 1
    3154:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    3156:	e3 ec       	ldi	r30, 0xC3	; 195
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	81 60       	ori	r24, 0x01	; 1
    315e:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    3160:	e0 ec       	ldi	r30, 0xC0	; 192
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	82 60       	ori	r24, 0x02	; 2
    3168:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    316a:	e2 ec       	ldi	r30, 0xC2	; 194
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	81 60       	ori	r24, 0x01	; 1
    3172:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3174:	ea e7       	ldi	r30, 0x7A	; 122
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	84 60       	ori	r24, 0x04	; 4
    317c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    317e:	80 81       	ld	r24, Z
    3180:	82 60       	ori	r24, 0x02	; 2
    3182:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3184:	80 81       	ld	r24, Z
    3186:	81 60       	ori	r24, 0x01	; 1
    3188:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    318a:	80 81       	ld	r24, Z
    318c:	80 68       	ori	r24, 0x80	; 128
    318e:	80 83       	st	Z, r24
    3190:	08 95       	ret

00003192 <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    3192:	82 31       	cpi	r24, 0x12	; 18
    3194:	08 f0       	brcs	.+2      	; 0x3198 <analogRead+0x6>
    3196:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    3198:	e8 2f       	mov	r30, r24
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	e2 5a       	subi	r30, 0xA2	; 162
    319e:	fe 4f       	sbci	r31, 0xFE	; 254
    31a0:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    31a2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
    31a6:	e3 fb       	bst	r30, 3
    31a8:	22 27       	eor	r18, r18
    31aa:	20 f9       	bld	r18, 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	95 e0       	ldi	r25, 0x05	; 5
    31b0:	22 0f       	add	r18, r18
    31b2:	33 1f       	adc	r19, r19
    31b4:	9a 95       	dec	r25
    31b6:	e1 f7       	brne	.-8      	; 0x31b0 <analogRead+0x1e>
    31b8:	8f 7d       	andi	r24, 0xDF	; 223
    31ba:	28 2b       	or	r18, r24
    31bc:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    31c0:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <analog_reference>
    31c4:	20 e4       	ldi	r18, 0x40	; 64
    31c6:	82 9f       	mul	r24, r18
    31c8:	c0 01       	movw	r24, r0
    31ca:	11 24       	eor	r1, r1
    31cc:	e7 70       	andi	r30, 0x07	; 7
    31ce:	e8 2b       	or	r30, r24
    31d0:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    31d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    31d8:	80 64       	ori	r24, 0x40	; 64
    31da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    31de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    31e2:	86 fd       	sbrc	r24, 6
    31e4:	fc cf       	rjmp	.-8      	; 0x31de <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    31e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    31ea:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    31ee:	90 e0       	ldi	r25, 0x00	; 0
}
    31f0:	92 2b       	or	r25, r18
    31f2:	08 95       	ret

000031f4 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    31f4:	1f 93       	push	r17
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	18 2f       	mov	r17, r24
    31fc:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    31fe:	61 e0       	ldi	r22, 0x01	; 1
    3200:	0e 94 cf 19 	call	0x339e	; 0x339e <pinMode>
	if (val == 0)
    3204:	20 97       	sbiw	r28, 0x00	; 0
    3206:	11 f4       	brne	.+4      	; 0x320c <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    3208:	60 e0       	ldi	r22, 0x00	; 0
    320a:	04 c0       	rjmp	.+8      	; 0x3214 <analogWrite+0x20>
	}
	else if (val == 255)
    320c:	cf 3f       	cpi	r28, 0xFF	; 255
    320e:	d1 05       	cpc	r29, r1
    3210:	39 f4       	brne	.+14     	; 0x3220 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    3212:	61 e0       	ldi	r22, 0x01	; 1
    3214:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    3216:	df 91       	pop	r29
    3218:	cf 91       	pop	r28
    321a:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    321c:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    3220:	e1 2f       	mov	r30, r17
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	e6 59       	subi	r30, 0x96	; 150
    3226:	fe 4f       	sbci	r31, 0xFE	; 254
    3228:	e4 91       	lpm	r30, Z
    322a:	8e 2f       	mov	r24, r30
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	fc 01       	movw	r30, r24
    3230:	31 97       	sbiw	r30, 0x01	; 1
    3232:	ef 30       	cpi	r30, 0x0F	; 15
    3234:	f1 05       	cpc	r31, r1
    3236:	08 f0       	brcs	.+2      	; 0x323a <analogWrite+0x46>
    3238:	6c c0       	rjmp	.+216    	; 0x3312 <analogWrite+0x11e>
    323a:	ea 5a       	subi	r30, 0xAA	; 170
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	0c 94 7f 21 	jmp	0x42fe	; 0x42fe <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    3242:	84 b5       	in	r24, 0x24	; 36
    3244:	80 68       	ori	r24, 0x80	; 128
    3246:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    3248:	c7 bd       	out	0x27, r28	; 39
				break;
    324a:	68 c0       	rjmp	.+208    	; 0x331c <analogWrite+0x128>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    324c:	84 b5       	in	r24, 0x24	; 36
    324e:	80 62       	ori	r24, 0x20	; 32
    3250:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    3252:	c8 bd       	out	0x28, r28	; 40
				break;
    3254:	63 c0       	rjmp	.+198    	; 0x331c <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    3256:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    325a:	80 68       	ori	r24, 0x80	; 128
    325c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1A = val; // set pwm duty
    3260:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    3264:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
				break;
    3268:	59 c0       	rjmp	.+178    	; 0x331c <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    326a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    326e:	80 62       	ori	r24, 0x20	; 32
    3270:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1B = val; // set pwm duty
    3274:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    3278:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
				break;
    327c:	4f c0       	rjmp	.+158    	; 0x331c <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1C1);
    327e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3282:	88 60       	ori	r24, 0x08	; 8
    3284:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1C = val; // set pwm duty
    3288:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__DATA_REGION_ORIGIN__+0x2d>
    328c:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__DATA_REGION_ORIGIN__+0x2c>
				break;
    3290:	45 c0       	rjmp	.+138    	; 0x331c <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    3292:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    3296:	80 68       	ori	r24, 0x80	; 128
    3298:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
				OCR3A = val; // set pwm duty
    329c:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__DATA_REGION_ORIGIN__+0x39>
    32a0:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__DATA_REGION_ORIGIN__+0x38>
				break;
    32a4:	3b c0       	rjmp	.+118    	; 0x331c <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    32a6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    32aa:	80 62       	ori	r24, 0x20	; 32
    32ac:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
				OCR3B = val; // set pwm duty
    32b0:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__DATA_REGION_ORIGIN__+0x3b>
    32b4:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__DATA_REGION_ORIGIN__+0x3a>
				break;
    32b8:	31 c0       	rjmp	.+98     	; 0x331c <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    32ba:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    32be:	88 60       	ori	r24, 0x08	; 8
    32c0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
				OCR3C = val; // set pwm duty
    32c4:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__DATA_REGION_ORIGIN__+0x3d>
    32c8:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
				break;
    32cc:	27 c0       	rjmp	.+78     	; 0x331c <analogWrite+0x128>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    32ce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    32d2:	80 68       	ori	r24, 0x80	; 128
    32d4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    32d8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    32dc:	8f 7b       	andi	r24, 0xBF	; 191
    32de:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
				#endif
				OCR4A = val;	// set pwm duty
    32e2:	c0 93 cf 00 	sts	0x00CF, r28	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
				break;
    32e6:	1a c0       	rjmp	.+52     	; 0x331c <analogWrite+0x128>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    32e8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    32ec:	80 62       	ori	r24, 0x20	; 32
    32ee:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
				OCR4B = val; // set pwm duty
    32f2:	c0 93 d0 00 	sts	0x00D0, r28	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>
				break;
    32f6:	12 c0       	rjmp	.+36     	; 0x331c <analogWrite+0x128>
			#endif
				
			#if defined(TCCR4C) && defined(COM4D1)
			case TIMER4D:				
				// connect pwm to pin on timer 4, channel D
				sbi(TCCR4C, COM4D1);
    32f8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    32fc:	88 60       	ori	r24, 0x08	; 8
    32fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
				#if defined(COM4D0)		// only used on 32U4
				cbi(TCCR4C, COM4D0);
    3302:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    3306:	8b 7f       	andi	r24, 0xFB	; 251
    3308:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
				#endif
				OCR4D = val;	// set pwm duty
    330c:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
				break;
    3310:	05 c0       	rjmp	.+10     	; 0x331c <analogWrite+0x128>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    3312:	c0 38       	cpi	r28, 0x80	; 128
    3314:	d1 05       	cpc	r29, r1
    3316:	0c f0       	brlt	.+2      	; 0x331a <analogWrite+0x126>
    3318:	7c cf       	rjmp	.-264    	; 0x3212 <analogWrite+0x1e>
    331a:	76 cf       	rjmp	.-276    	; 0x3208 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    331c:	df 91       	pop	r29
    331e:	cf 91       	pop	r28
    3320:	1f 91       	pop	r17
    3322:	08 95       	ret

00003324 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	fc 01       	movw	r30, r24
    3328:	31 97       	sbiw	r30, 0x01	; 1
    332a:	ef 30       	cpi	r30, 0x0F	; 15
    332c:	f1 05       	cpc	r31, r1
    332e:	b0 f5       	brcc	.+108    	; 0x339c <turnOffPWM+0x78>
    3330:	eb 59       	subi	r30, 0x9B	; 155
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	0c 94 7f 21 	jmp	0x42fe	; 0x42fe <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3338:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    333c:	8f 77       	andi	r24, 0x7F	; 127
    333e:	03 c0       	rjmp	.+6      	; 0x3346 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3340:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3344:	8f 7d       	andi	r24, 0xDF	; 223
    3346:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    334a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    334c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3350:	87 7f       	andi	r24, 0xF7	; 247
    3352:	f9 cf       	rjmp	.-14     	; 0x3346 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3354:	84 b5       	in	r24, 0x24	; 36
    3356:	8f 77       	andi	r24, 0x7F	; 127
    3358:	02 c0       	rjmp	.+4      	; 0x335e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    335a:	84 b5       	in	r24, 0x24	; 36
    335c:	8f 7d       	andi	r24, 0xDF	; 223
    335e:	84 bd       	out	0x24, r24	; 36
    3360:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3362:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    3366:	8f 77       	andi	r24, 0x7F	; 127
    3368:	07 c0       	rjmp	.+14     	; 0x3378 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    336a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    336e:	8f 7d       	andi	r24, 0xDF	; 223
    3370:	03 c0       	rjmp	.+6      	; 0x3378 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3372:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    3376:	87 7f       	andi	r24, 0xF7	; 247
    3378:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    337c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    337e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    3382:	8f 77       	andi	r24, 0x7F	; 127
    3384:	03 c0       	rjmp	.+6      	; 0x338c <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    3386:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    338a:	8f 7d       	andi	r24, 0xDF	; 223
    338c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    3390:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    3392:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    3396:	87 7f       	andi	r24, 0xF7	; 247
    3398:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    339c:	08 95       	ret

0000339e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	fc 01       	movw	r30, r24
    33a6:	e7 57       	subi	r30, 0x77	; 119
    33a8:	fe 4f       	sbci	r31, 0xFE	; 254
    33aa:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    33ac:	fc 01       	movw	r30, r24
    33ae:	e8 55       	subi	r30, 0x58	; 88
    33b0:	fe 4f       	sbci	r31, 0xFE	; 254
    33b2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    33b4:	88 23       	and	r24, r24
    33b6:	61 f1       	breq	.+88     	; 0x3410 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	88 0f       	add	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	fc 01       	movw	r30, r24
    33c0:	ed 51       	subi	r30, 0x1D	; 29
    33c2:	fe 4f       	sbci	r31, 0xFE	; 254
    33c4:	c5 91       	lpm	r28, Z+
    33c6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    33c8:	fc 01       	movw	r30, r24
    33ca:	eb 52       	subi	r30, 0x2B	; 43
    33cc:	fe 4f       	sbci	r31, 0xFE	; 254
    33ce:	a5 91       	lpm	r26, Z+
    33d0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    33d2:	61 11       	cpse	r22, r1
    33d4:	09 c0       	rjmp	.+18     	; 0x33e8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    33d6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    33d8:	f8 94       	cli
		*reg &= ~bit;
    33da:	88 81       	ld	r24, Y
    33dc:	20 95       	com	r18
    33de:	82 23       	and	r24, r18
    33e0:	88 83       	st	Y, r24
		*out &= ~bit;
    33e2:	ec 91       	ld	r30, X
    33e4:	2e 23       	and	r18, r30
    33e6:	0b c0       	rjmp	.+22     	; 0x33fe <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    33e8:	62 30       	cpi	r22, 0x02	; 2
    33ea:	61 f4       	brne	.+24     	; 0x3404 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    33ec:	9f b7       	in	r25, 0x3f	; 63
                cli();
    33ee:	f8 94       	cli
		*reg &= ~bit;
    33f0:	88 81       	ld	r24, Y
    33f2:	32 2f       	mov	r19, r18
    33f4:	30 95       	com	r19
    33f6:	83 23       	and	r24, r19
    33f8:	88 83       	st	Y, r24
		*out |= bit;
    33fa:	ec 91       	ld	r30, X
    33fc:	2e 2b       	or	r18, r30
    33fe:	2c 93       	st	X, r18
		SREG = oldSREG;
    3400:	9f bf       	out	0x3f, r25	; 63
    3402:	06 c0       	rjmp	.+12     	; 0x3410 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3404:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3406:	f8 94       	cli
		*reg |= bit;
    3408:	e8 81       	ld	r30, Y
    340a:	2e 2b       	or	r18, r30
    340c:	28 83       	st	Y, r18
		SREG = oldSREG;
    340e:	8f bf       	out	0x3f, r24	; 63
	}
}
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	08 95       	ret

00003416 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3416:	1f 93       	push	r17
    3418:	cf 93       	push	r28
    341a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	f9 01       	movw	r30, r18
    3422:	e6 59       	subi	r30, 0x96	; 150
    3424:	fe 4f       	sbci	r31, 0xFE	; 254
    3426:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3428:	f9 01       	movw	r30, r18
    342a:	e7 57       	subi	r30, 0x77	; 119
    342c:	fe 4f       	sbci	r31, 0xFE	; 254
    342e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3430:	f9 01       	movw	r30, r18
    3432:	e8 55       	subi	r30, 0x58	; 88
    3434:	fe 4f       	sbci	r31, 0xFE	; 254
    3436:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3438:	cc 23       	and	r28, r28
    343a:	c1 f0       	breq	.+48     	; 0x346c <digitalWrite+0x56>
    343c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    343e:	81 11       	cpse	r24, r1
    3440:	0e 94 92 19 	call	0x3324	; 0x3324 <turnOffPWM>

	out = portOutputRegister(port);
    3444:	ec 2f       	mov	r30, r28
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	ee 0f       	add	r30, r30
    344a:	ff 1f       	adc	r31, r31
    344c:	eb 52       	subi	r30, 0x2B	; 43
    344e:	fe 4f       	sbci	r31, 0xFE	; 254
    3450:	a5 91       	lpm	r26, Z+
    3452:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3454:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3456:	f8 94       	cli

	if (val == LOW) {
    3458:	11 11       	cpse	r17, r1
    345a:	04 c0       	rjmp	.+8      	; 0x3464 <digitalWrite+0x4e>
		*out &= ~bit;
    345c:	8c 91       	ld	r24, X
    345e:	d0 95       	com	r29
    3460:	d8 23       	and	r29, r24
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3464:	ec 91       	ld	r30, X
    3466:	de 2b       	or	r29, r30
    3468:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    346a:	9f bf       	out	0x3f, r25	; 63
}
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	1f 91       	pop	r17
    3472:	08 95       	ret

00003474 <digitalRead>:

int digitalRead(uint8_t pin)
{
    3474:	cf 93       	push	r28
    3476:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3478:	28 2f       	mov	r18, r24
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	f9 01       	movw	r30, r18
    347e:	e6 59       	subi	r30, 0x96	; 150
    3480:	fe 4f       	sbci	r31, 0xFE	; 254
    3482:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3484:	f9 01       	movw	r30, r18
    3486:	e7 57       	subi	r30, 0x77	; 119
    3488:	fe 4f       	sbci	r31, 0xFE	; 254
    348a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    348c:	f9 01       	movw	r30, r18
    348e:	e8 55       	subi	r30, 0x58	; 88
    3490:	fe 4f       	sbci	r31, 0xFE	; 254
    3492:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    3494:	cc 23       	and	r28, r28
    3496:	91 f0       	breq	.+36     	; 0x34bc <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3498:	81 11       	cpse	r24, r1
    349a:	0e 94 92 19 	call	0x3324	; 0x3324 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    349e:	ec 2f       	mov	r30, r28
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	ee 0f       	add	r30, r30
    34a4:	ff 1f       	adc	r31, r31
    34a6:	e9 53       	subi	r30, 0x39	; 57
    34a8:	fe 4f       	sbci	r31, 0xFE	; 254
    34aa:	a5 91       	lpm	r26, Z+
    34ac:	b4 91       	lpm	r27, Z
    34ae:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    34b0:	ed 23       	and	r30, r29
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	21 f4       	brne	.+8      	; 0x34c0 <digitalRead+0x4c>
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	02 c0       	rjmp	.+4      	; 0x34c0 <digitalRead+0x4c>
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    34c0:	df 91       	pop	r29
    34c2:	cf 91       	pop	r28
    34c4:	08 95       	ret

000034c6 <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	fc 01       	movw	r30, r24
    34ce:	e7 57       	subi	r30, 0x77	; 119
    34d0:	fe 4f       	sbci	r31, 0xFE	; 254
    34d2:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
    34d4:	fc 01       	movw	r30, r24
    34d6:	e8 55       	subi	r30, 0x58	; 88
    34d8:	fe 4f       	sbci	r31, 0xFE	; 254
    34da:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
    34dc:	66 23       	and	r22, r22
    34de:	11 f0       	breq	.+4      	; 0x34e4 <pulseIn+0x1e>
    34e0:	67 2f       	mov	r22, r23
    34e2:	01 c0       	rjmp	.+2      	; 0x34e6 <pulseIn+0x20>
    34e4:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	ee 0f       	add	r30, r30
    34ea:	ff 1f       	adc	r31, r31
    34ec:	e9 53       	subi	r30, 0x39	; 57
    34ee:	fe 4f       	sbci	r31, 0xFE	; 254
    34f0:	85 91       	lpm	r24, Z+
    34f2:	94 91       	lpm	r25, Z
    34f4:	89 01       	movw	r16, r18
    34f6:	9a 01       	movw	r18, r20
    34f8:	3f 70       	andi	r19, 0x0F	; 15
    34fa:	46 2f       	mov	r20, r22
    34fc:	67 2f       	mov	r22, r23
    34fe:	0e 94 27 01 	call	0x24e	; 0x24e <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    3502:	61 15       	cp	r22, r1
    3504:	71 05       	cpc	r23, r1
    3506:	81 05       	cpc	r24, r1
    3508:	91 05       	cpc	r25, r1
    350a:	49 f0       	breq	.+18     	; 0x351e <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	01 96       	adiw	r24, 0x01	; 1
    3512:	a1 1d       	adc	r26, r1
    3514:	b1 1d       	adc	r27, r1
    3516:	bc 01       	movw	r22, r24
    3518:	cd 01       	movw	r24, r26
    351a:	9f 70       	andi	r25, 0x0F	; 15
    351c:	03 c0       	rjmp	.+6      	; 0x3524 <pulseIn+0x5e>
	else
		return 0;
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	70 e0       	ldi	r23, 0x00	; 0
    3522:	cb 01       	movw	r24, r22
}
    3524:	1f 91       	pop	r17
    3526:	0f 91       	pop	r16
    3528:	08 95       	ret

0000352a <pulseInLong>:
 *
 * ATTENTION:
 * this function relies on micros() so cannot be used in noInterrupt() context
 */
unsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout)
{
    352a:	4f 92       	push	r4
    352c:	5f 92       	push	r5
    352e:	6f 92       	push	r6
    3530:	7f 92       	push	r7
    3532:	8f 92       	push	r8
    3534:	9f 92       	push	r9
    3536:	af 92       	push	r10
    3538:	bf 92       	push	r11
    353a:	cf 92       	push	r12
    353c:	df 92       	push	r13
    353e:	ef 92       	push	r14
    3540:	ff 92       	push	r15
    3542:	0f 93       	push	r16
    3544:	1f 93       	push	r17
    3546:	cf 93       	push	r28
    3548:	df 93       	push	r29
    354a:	49 01       	movw	r8, r18
    354c:	5a 01       	movw	r10, r20
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	fc 01       	movw	r30, r24
    3552:	e7 57       	subi	r30, 0x77	; 119
    3554:	fe 4f       	sbci	r31, 0xFE	; 254
    3556:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    3558:	fc 01       	movw	r30, r24
    355a:	e8 55       	subi	r30, 0x58	; 88
    355c:	fe 4f       	sbci	r31, 0xFE	; 254
    355e:	c4 91       	lpm	r28, Z
	uint8_t stateMask = (state ? bit : 0);
    3560:	66 23       	and	r22, r22
    3562:	11 f0       	breq	.+4      	; 0x3568 <pulseInLong+0x3e>
    3564:	01 2f       	mov	r16, r17
    3566:	01 c0       	rjmp	.+2      	; 0x356a <pulseInLong+0x40>
    3568:	00 e0       	ldi	r16, 0x00	; 0

	unsigned long startMicros = micros();
    356a:	0e 94 12 18 	call	0x3024	; 0x3024 <micros>
    356e:	6b 01       	movw	r12, r22
    3570:	7c 01       	movw	r14, r24

	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask) {
    3572:	d0 e0       	ldi	r29, 0x00	; 0
    3574:	cc 0f       	add	r28, r28
    3576:	dd 1f       	adc	r29, r29
    3578:	c9 53       	subi	r28, 0x39	; 57
    357a:	de 4f       	sbci	r29, 0xFE	; 254
    357c:	fe 01       	movw	r30, r28
    357e:	a5 91       	lpm	r26, Z+
    3580:	b4 91       	lpm	r27, Z
    3582:	8c 91       	ld	r24, X
    3584:	81 23       	and	r24, r17
    3586:	08 13       	cpse	r16, r24
    3588:	1e c0       	rjmp	.+60     	; 0x35c6 <pulseInLong+0x9c>
		if (micros() - startMicros > timeout)
    358a:	0e 94 12 18 	call	0x3024	; 0x3024 <micros>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	8c 19       	sub	r24, r12
    3594:	9d 09       	sbc	r25, r13
    3596:	ae 09       	sbc	r26, r14
    3598:	bf 09       	sbc	r27, r15
    359a:	88 16       	cp	r8, r24
    359c:	99 06       	cpc	r9, r25
    359e:	aa 06       	cpc	r10, r26
    35a0:	bb 06       	cpc	r11, r27
    35a2:	60 f7       	brcc	.-40     	; 0x357c <pulseInLong+0x52>
			return 0;
    35a4:	60 e0       	ldi	r22, 0x00	; 0
    35a6:	70 e0       	ldi	r23, 0x00	; 0
    35a8:	cb 01       	movw	r24, r22
    35aa:	33 c0       	rjmp	.+102    	; 0x3612 <pulseInLong+0xe8>
	}

	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask) {
		if (micros() - startMicros > timeout)
    35ac:	0e 94 12 18 	call	0x3024	; 0x3024 <micros>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	8c 19       	sub	r24, r12
    35b6:	9d 09       	sbc	r25, r13
    35b8:	ae 09       	sbc	r26, r14
    35ba:	bf 09       	sbc	r27, r15
    35bc:	88 16       	cp	r8, r24
    35be:	99 06       	cpc	r9, r25
    35c0:	aa 06       	cpc	r10, r26
    35c2:	bb 06       	cpc	r11, r27
    35c4:	78 f3       	brcs	.-34     	; 0x35a4 <pulseInLong+0x7a>
		if (micros() - startMicros > timeout)
			return 0;
	}

	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask) {
    35c6:	fe 01       	movw	r30, r28
    35c8:	a5 91       	lpm	r26, Z+
    35ca:	b4 91       	lpm	r27, Z
    35cc:	8c 91       	ld	r24, X
    35ce:	81 23       	and	r24, r17
    35d0:	08 13       	cpse	r16, r24
    35d2:	ec cf       	rjmp	.-40     	; 0x35ac <pulseInLong+0x82>
		if (micros() - startMicros > timeout)
			return 0;
	}

	unsigned long start = micros();
    35d4:	0e 94 12 18 	call	0x3024	; 0x3024 <micros>
    35d8:	2b 01       	movw	r4, r22
    35da:	3c 01       	movw	r6, r24
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    35dc:	fe 01       	movw	r30, r28
    35de:	a5 91       	lpm	r26, Z+
    35e0:	b4 91       	lpm	r27, Z
    35e2:	8c 91       	ld	r24, X
    35e4:	81 23       	and	r24, r17
    35e6:	08 13       	cpse	r16, r24
    35e8:	0e c0       	rjmp	.+28     	; 0x3606 <pulseInLong+0xdc>
		if (micros() - startMicros > timeout)
    35ea:	0e 94 12 18 	call	0x3024	; 0x3024 <micros>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	8c 19       	sub	r24, r12
    35f4:	9d 09       	sbc	r25, r13
    35f6:	ae 09       	sbc	r26, r14
    35f8:	bf 09       	sbc	r27, r15
    35fa:	88 16       	cp	r8, r24
    35fc:	99 06       	cpc	r9, r25
    35fe:	aa 06       	cpc	r10, r26
    3600:	bb 06       	cpc	r11, r27
    3602:	60 f7       	brcc	.-40     	; 0x35dc <pulseInLong+0xb2>
    3604:	cf cf       	rjmp	.-98     	; 0x35a4 <pulseInLong+0x7a>
			return 0;
	}
	return micros() - start;
    3606:	0e 94 12 18 	call	0x3024	; 0x3024 <micros>
    360a:	64 19       	sub	r22, r4
    360c:	75 09       	sbc	r23, r5
    360e:	86 09       	sbc	r24, r6
    3610:	97 09       	sbc	r25, r7
}
    3612:	df 91       	pop	r29
    3614:	cf 91       	pop	r28
    3616:	1f 91       	pop	r17
    3618:	0f 91       	pop	r16
    361a:	ff 90       	pop	r15
    361c:	ef 90       	pop	r14
    361e:	df 90       	pop	r13
    3620:	cf 90       	pop	r12
    3622:	bf 90       	pop	r11
    3624:	af 90       	pop	r10
    3626:	9f 90       	pop	r9
    3628:	8f 90       	pop	r8
    362a:	7f 90       	pop	r7
    362c:	6f 90       	pop	r6
    362e:	5f 90       	pop	r5
    3630:	4f 90       	pop	r4
    3632:	08 95       	ret

00003634 <shiftIn>:
  Boston, MA  02111-1307  USA
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    3634:	cf 92       	push	r12
    3636:	df 92       	push	r13
    3638:	ef 92       	push	r14
    363a:	ff 92       	push	r15
    363c:	0f 93       	push	r16
    363e:	1f 93       	push	r17
    3640:	cf 93       	push	r28
    3642:	df 93       	push	r29
    3644:	f8 2e       	mov	r15, r24
    3646:	d6 2f       	mov	r29, r22
    3648:	e4 2e       	mov	r14, r20
    364a:	07 e0       	ldi	r16, 0x07	; 7
    364c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t value = 0;
    364e:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    3650:	87 e0       	ldi	r24, 0x07	; 7
    3652:	c8 2e       	mov	r12, r24
    3654:	d1 2c       	mov	r13, r1
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
    3656:	61 e0       	ldi	r22, 0x01	; 1
    3658:	8d 2f       	mov	r24, r29
    365a:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    365e:	8f 2d       	mov	r24, r15
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
    3660:	e1 10       	cpse	r14, r1
    3662:	0a c0       	rjmp	.+20     	; 0x3678 <shiftIn+0x44>
			value |= digitalRead(dataPin) << i;
    3664:	0e 94 3a 1a 	call	0x3474	; 0x3474 <digitalRead>
    3668:	96 01       	movw	r18, r12
    366a:	20 1b       	sub	r18, r16
    366c:	31 0b       	sbc	r19, r17
    366e:	01 c0       	rjmp	.+2      	; 0x3672 <shiftIn+0x3e>
    3670:	88 0f       	add	r24, r24
    3672:	2a 95       	dec	r18
    3674:	ea f7       	brpl	.-6      	; 0x3670 <shiftIn+0x3c>
    3676:	07 c0       	rjmp	.+14     	; 0x3686 <shiftIn+0x52>
		else
			value |= digitalRead(dataPin) << (7 - i);
    3678:	0e 94 3a 1a 	call	0x3474	; 0x3474 <digitalRead>
    367c:	00 2e       	mov	r0, r16
    367e:	01 c0       	rjmp	.+2      	; 0x3682 <shiftIn+0x4e>
    3680:	88 0f       	add	r24, r24
    3682:	0a 94       	dec	r0
    3684:	ea f7       	brpl	.-6      	; 0x3680 <shiftIn+0x4c>
    3686:	c8 2b       	or	r28, r24
		digitalWrite(clockPin, LOW);
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	8d 2f       	mov	r24, r29
    368c:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
    3690:	01 50       	subi	r16, 0x01	; 1
    3692:	11 09       	sbc	r17, r1
    3694:	00 f7       	brcc	.-64     	; 0x3656 <shiftIn+0x22>
	}
	return value;
}
    3696:	8c 2f       	mov	r24, r28
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	ff 90       	pop	r15
    36a2:	ef 90       	pop	r14
    36a4:	df 90       	pop	r13
    36a6:	cf 90       	pop	r12
    36a8:	08 95       	ret

000036aa <shiftOut>:

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    36aa:	bf 92       	push	r11
    36ac:	cf 92       	push	r12
    36ae:	df 92       	push	r13
    36b0:	ef 92       	push	r14
    36b2:	ff 92       	push	r15
    36b4:	0f 93       	push	r16
    36b6:	1f 93       	push	r17
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
    36bc:	c8 2e       	mov	r12, r24
    36be:	d6 2e       	mov	r13, r22
    36c0:	b4 2e       	mov	r11, r20
    36c2:	c7 e0       	ldi	r28, 0x07	; 7
    36c4:	d0 e0       	ldi	r29, 0x00	; 0
    36c6:	02 2f       	mov	r16, r18
    36c8:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    36ca:	87 e0       	ldi	r24, 0x07	; 7
    36cc:	e8 2e       	mov	r14, r24
    36ce:	f1 2c       	mov	r15, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    36d0:	b1 10       	cpse	r11, r1
    36d2:	05 c0       	rjmp	.+10     	; 0x36de <shiftOut+0x34>
			digitalWrite(dataPin, !!(val & (1 << i)));
    36d4:	c7 01       	movw	r24, r14
    36d6:	8c 1b       	sub	r24, r28
    36d8:	9d 0b       	sbc	r25, r29
    36da:	b8 01       	movw	r22, r16
    36dc:	02 c0       	rjmp	.+4      	; 0x36e2 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    36de:	b8 01       	movw	r22, r16
    36e0:	8c 2f       	mov	r24, r28
    36e2:	02 c0       	rjmp	.+4      	; 0x36e8 <shiftOut+0x3e>
    36e4:	75 95       	asr	r23
    36e6:	67 95       	ror	r22
    36e8:	8a 95       	dec	r24
    36ea:	e2 f7       	brpl	.-8      	; 0x36e4 <shiftOut+0x3a>
    36ec:	61 70       	andi	r22, 0x01	; 1
    36ee:	8c 2d       	mov	r24, r12
    36f0:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    36f4:	61 e0       	ldi	r22, 0x01	; 1
    36f6:	8d 2d       	mov	r24, r13
    36f8:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    36fc:	60 e0       	ldi	r22, 0x00	; 0
    36fe:	8d 2d       	mov	r24, r13
    3700:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
    3704:	21 97       	sbiw	r28, 0x01	; 1
    3706:	20 f7       	brcc	.-56     	; 0x36d0 <shiftOut+0x26>
	}
}
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	ff 90       	pop	r15
    3712:	ef 90       	pop	r14
    3714:	df 90       	pop	r13
    3716:	cf 90       	pop	r12
    3718:	bf 90       	pop	r11
    371a:	08 95       	ret

0000371c <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    371c:	cf 92       	push	r12
    371e:	df 92       	push	r13
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
  if (howbig == 0) {
    3724:	61 15       	cp	r22, r1
    3726:	71 05       	cpc	r23, r1
    3728:	81 05       	cpc	r24, r1
    372a:	91 05       	cpc	r25, r1
    372c:	49 f0       	breq	.+18     	; 0x3740 <_Z6randoml+0x24>
    372e:	6b 01       	movw	r12, r22
    3730:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    3732:	0e 94 fe 21 	call	0x43fc	; 0x43fc <random>
    3736:	a7 01       	movw	r20, r14
    3738:	96 01       	movw	r18, r12
    373a:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    373e:	03 c0       	rjmp	.+6      	; 0x3746 <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	70 e0       	ldi	r23, 0x00	; 0
    3744:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    3746:	ff 90       	pop	r15
    3748:	ef 90       	pop	r14
    374a:	df 90       	pop	r13
    374c:	cf 90       	pop	r12
    374e:	08 95       	ret

00003750 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    3750:	cf 92       	push	r12
    3752:	df 92       	push	r13
    3754:	ef 92       	push	r14
    3756:	ff 92       	push	r15
    3758:	0f 93       	push	r16
    375a:	1f 93       	push	r17
  if (howsmall >= howbig) {
    375c:	62 17       	cp	r22, r18
    375e:	73 07       	cpc	r23, r19
    3760:	84 07       	cpc	r24, r20
    3762:	95 07       	cpc	r25, r21
    3764:	84 f4       	brge	.+32     	; 0x3786 <_Z6randomll+0x36>
    3766:	89 01       	movw	r16, r18
    3768:	9a 01       	movw	r18, r20
    376a:	6b 01       	movw	r12, r22
    376c:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    376e:	c9 01       	movw	r24, r18
    3770:	b8 01       	movw	r22, r16
    3772:	6c 19       	sub	r22, r12
    3774:	7d 09       	sbc	r23, r13
    3776:	8e 09       	sbc	r24, r14
    3778:	9f 09       	sbc	r25, r15
    377a:	0e 94 8e 1b 	call	0x371c	; 0x371c <_Z6randoml>
    377e:	6c 0d       	add	r22, r12
    3780:	7d 1d       	adc	r23, r13
    3782:	8e 1d       	adc	r24, r14
    3784:	9f 1d       	adc	r25, r15
}
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
    378a:	ff 90       	pop	r15
    378c:	ef 90       	pop	r14
    378e:	df 90       	pop	r13
    3790:	cf 90       	pop	r12
    3792:	08 95       	ret

00003794 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3794:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
    3798:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
    379c:	28 17       	cp	r18, r24
    379e:	39 07       	cpc	r19, r25
    37a0:	b9 f4       	brne	.+46     	; 0x37d0 <_ZN14SoftwareSerial4readEv+0x3c>
    37a2:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial20_receive_buffer_headE>
    37a6:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZN14SoftwareSerial20_receive_buffer_tailE>
    37aa:	98 17       	cp	r25, r24
    37ac:	89 f0       	breq	.+34     	; 0x37d0 <_ZN14SoftwareSerial4readEv+0x3c>
    37ae:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial20_receive_buffer_headE>
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	e1 52       	subi	r30, 0x21	; 33
    37b6:	fb 4f       	sbci	r31, 0xFB	; 251
    37b8:	80 81       	ld	r24, Z
    37ba:	20 91 dd 04 	lds	r18, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial20_receive_buffer_headE>
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	2f 5f       	subi	r18, 0xFF	; 255
    37c2:	3f 4f       	sbci	r19, 0xFF	; 255
    37c4:	2f 73       	andi	r18, 0x3F	; 63
    37c6:	33 27       	eor	r19, r19
    37c8:	20 93 dd 04 	sts	0x04DD, r18	; 0x8004dd <_ZN14SoftwareSerial20_receive_buffer_headE>
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	08 95       	ret
    37d0:	8f ef       	ldi	r24, 0xFF	; 255
    37d2:	9f ef       	ldi	r25, 0xFF	; 255
    37d4:	08 95       	ret

000037d6 <_ZN14SoftwareSerial5writeEh>:
    37d6:	1f 93       	push	r17
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	dc 01       	movw	r26, r24
    37de:	5c 96       	adiw	r26, 0x1c	; 28
    37e0:	8d 91       	ld	r24, X+
    37e2:	9c 91       	ld	r25, X
    37e4:	5d 97       	sbiw	r26, 0x1d	; 29
    37e6:	00 97       	sbiw	r24, 0x00	; 0
    37e8:	39 f4       	brne	.+14     	; 0x37f8 <_ZN14SoftwareSerial5writeEh+0x22>
    37ea:	21 e0       	ldi	r18, 0x01	; 1
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	13 96       	adiw	r26, 0x03	; 3
    37f0:	3c 93       	st	X, r19
    37f2:	2e 93       	st	-X, r18
    37f4:	12 97       	sbiw	r26, 0x02	; 2
    37f6:	3b c0       	rjmp	.+118    	; 0x386e <_ZN14SoftwareSerial5writeEh+0x98>
    37f8:	51 96       	adiw	r26, 0x11	; 17
    37fa:	ed 91       	ld	r30, X+
    37fc:	fc 91       	ld	r31, X
    37fe:	52 97       	sbiw	r26, 0x12	; 18
    3800:	50 96       	adiw	r26, 0x10	; 16
    3802:	2c 91       	ld	r18, X
    3804:	50 97       	sbiw	r26, 0x10	; 16
    3806:	32 2f       	mov	r19, r18
    3808:	30 95       	com	r19
    380a:	1f b7       	in	r17, 0x3f	; 63
    380c:	5e 96       	adiw	r26, 0x1e	; 30
    380e:	4c 91       	ld	r20, X
    3810:	5e 97       	sbiw	r26, 0x1e	; 30
    3812:	74 2f       	mov	r23, r20
    3814:	72 70       	andi	r23, 0x02	; 2
    3816:	41 fd       	sbrc	r20, 1
    3818:	60 95       	com	r22
    381a:	f8 94       	cli
    381c:	40 81       	ld	r20, Z
    381e:	77 23       	and	r23, r23
    3820:	11 f0       	breq	.+4      	; 0x3826 <_ZN14SoftwareSerial5writeEh+0x50>
    3822:	42 2b       	or	r20, r18
    3824:	01 c0       	rjmp	.+2      	; 0x3828 <_ZN14SoftwareSerial5writeEh+0x52>
    3826:	43 23       	and	r20, r19
    3828:	40 83       	st	Z, r20
    382a:	ec 01       	movw	r28, r24
    382c:	21 97       	sbiw	r28, 0x01	; 1
    382e:	f1 f7       	brne	.-4      	; 0x382c <_ZN14SoftwareSerial5writeEh+0x56>
    3830:	48 e0       	ldi	r20, 0x08	; 8
    3832:	50 81       	ld	r21, Z
    3834:	60 ff       	sbrs	r22, 0
    3836:	02 c0       	rjmp	.+4      	; 0x383c <_ZN14SoftwareSerial5writeEh+0x66>
    3838:	52 2b       	or	r21, r18
    383a:	01 c0       	rjmp	.+2      	; 0x383e <_ZN14SoftwareSerial5writeEh+0x68>
    383c:	53 23       	and	r21, r19
    383e:	50 83       	st	Z, r21
    3840:	ec 01       	movw	r28, r24
    3842:	21 97       	sbiw	r28, 0x01	; 1
    3844:	f1 f7       	brne	.-4      	; 0x3842 <_ZN14SoftwareSerial5writeEh+0x6c>
    3846:	66 95       	lsr	r22
    3848:	41 50       	subi	r20, 0x01	; 1
    384a:	99 f7       	brne	.-26     	; 0x3832 <_ZN14SoftwareSerial5writeEh+0x5c>
    384c:	80 81       	ld	r24, Z
    384e:	77 23       	and	r23, r23
    3850:	19 f0       	breq	.+6      	; 0x3858 <_ZN14SoftwareSerial5writeEh+0x82>
    3852:	83 23       	and	r24, r19
    3854:	80 83       	st	Z, r24
    3856:	02 c0       	rjmp	.+4      	; 0x385c <_ZN14SoftwareSerial5writeEh+0x86>
    3858:	28 2b       	or	r18, r24
    385a:	20 83       	st	Z, r18
    385c:	1f bf       	out	0x3f, r17	; 63
    385e:	5c 96       	adiw	r26, 0x1c	; 28
    3860:	8d 91       	ld	r24, X+
    3862:	9c 91       	ld	r25, X
    3864:	5d 97       	sbiw	r26, 0x1d	; 29
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <_ZN14SoftwareSerial5writeEh+0x90>
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	df 91       	pop	r29
    3870:	cf 91       	pop	r28
    3872:	1f 91       	pop	r17
    3874:	08 95       	ret

00003876 <_ZN14SoftwareSerial5flushEv>:
    3876:	08 95       	ret

00003878 <_ZN14SoftwareSerial4peekEv>:
    3878:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
    387c:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
    3880:	28 17       	cp	r18, r24
    3882:	39 07       	cpc	r19, r25
    3884:	71 f4       	brne	.+28     	; 0x38a2 <_ZN14SoftwareSerial4peekEv+0x2a>
    3886:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial20_receive_buffer_headE>
    388a:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZN14SoftwareSerial20_receive_buffer_tailE>
    388e:	98 17       	cp	r25, r24
    3890:	41 f0       	breq	.+16     	; 0x38a2 <_ZN14SoftwareSerial4peekEv+0x2a>
    3892:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial20_receive_buffer_headE>
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	e1 52       	subi	r30, 0x21	; 33
    389a:	fb 4f       	sbci	r31, 0xFB	; 251
    389c:	80 81       	ld	r24, Z
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	08 95       	ret
    38a2:	8f ef       	ldi	r24, 0xFF	; 255
    38a4:	9f ef       	ldi	r25, 0xFF	; 255
    38a6:	08 95       	ret

000038a8 <_ZN14SoftwareSerial9availableEv>:
    38a8:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
    38ac:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
    38b0:	28 17       	cp	r18, r24
    38b2:	39 07       	cpc	r19, r25
    38b4:	71 f4       	brne	.+28     	; 0x38d2 <_ZN14SoftwareSerial9availableEv+0x2a>
    38b6:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZN14SoftwareSerial20_receive_buffer_tailE>
    38ba:	20 91 dd 04 	lds	r18, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial20_receive_buffer_headE>
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	80 5c       	subi	r24, 0xC0	; 192
    38c2:	9f 4f       	sbci	r25, 0xFF	; 255
    38c4:	82 1b       	sub	r24, r18
    38c6:	91 09       	sbc	r25, r1
    38c8:	60 e4       	ldi	r22, 0x40	; 64
    38ca:	70 e0       	ldi	r23, 0x00	; 0
    38cc:	0e 94 2a 21 	call	0x4254	; 0x4254 <__divmodhi4>
    38d0:	08 95       	ret
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	08 95       	ret

000038d8 <_ZN14SoftwareSerial13stopListeningEv>:
    38d8:	e0 91 1f 05 	lds	r30, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
    38dc:	f0 91 20 05 	lds	r31, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
    38e0:	e8 17       	cp	r30, r24
    38e2:	f9 07       	cpc	r31, r25
    38e4:	69 f4       	brne	.+26     	; 0x3900 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    38e6:	a3 89       	ldd	r26, Z+19	; 0x13
    38e8:	b4 89       	ldd	r27, Z+20	; 0x14
    38ea:	9c 91       	ld	r25, X
    38ec:	85 89       	ldd	r24, Z+21	; 0x15
    38ee:	80 95       	com	r24
    38f0:	89 23       	and	r24, r25
    38f2:	8c 93       	st	X, r24
    38f4:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
    38f8:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	08 95       	ret
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	08 95       	ret

00003904 <_ZN14SoftwareSerial6listenEv>:
    3904:	cf 93       	push	r28
    3906:	df 93       	push	r29
    3908:	ec 01       	movw	r28, r24
    390a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    390c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    390e:	89 2b       	or	r24, r25
    3910:	f1 f0       	breq	.+60     	; 0x394e <_ZN14SoftwareSerial6listenEv+0x4a>
    3912:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
    3916:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
    391a:	c8 17       	cp	r28, r24
    391c:	d9 07       	cpc	r29, r25
    391e:	b9 f0       	breq	.+46     	; 0x394e <_ZN14SoftwareSerial6listenEv+0x4a>
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	11 f0       	breq	.+4      	; 0x3928 <_ZN14SoftwareSerial6listenEv+0x24>
    3924:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <_ZN14SoftwareSerial13stopListeningEv>
    3928:	8e 8d       	ldd	r24, Y+30	; 0x1e
    392a:	8e 7f       	andi	r24, 0xFE	; 254
    392c:	8e 8f       	std	Y+30, r24	; 0x1e
    392e:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3932:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <_ZN14SoftwareSerial20_receive_buffer_headE>
    3936:	d0 93 20 05 	sts	0x0520, r29	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
    393a:	c0 93 1f 05 	sts	0x051F, r28	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
    393e:	eb 89       	ldd	r30, Y+19	; 0x13
    3940:	fc 89       	ldd	r31, Y+20	; 0x14
    3942:	90 81       	ld	r25, Z
    3944:	8d 89       	ldd	r24, Y+21	; 0x15
    3946:	89 2b       	or	r24, r25
    3948:	80 83       	st	Z, r24
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	01 c0       	rjmp	.+2      	; 0x3950 <_ZN14SoftwareSerial6listenEv+0x4c>
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	08 95       	ret

00003956 <__vector_9>:
    3956:	1f 92       	push	r1
    3958:	0f 92       	push	r0
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	0f 92       	push	r0
    395e:	11 24       	eor	r1, r1
    3960:	2f 93       	push	r18
    3962:	3f 93       	push	r19
    3964:	4f 93       	push	r20
    3966:	5f 93       	push	r21
    3968:	6f 93       	push	r22
    396a:	7f 93       	push	r23
    396c:	8f 93       	push	r24
    396e:	9f 93       	push	r25
    3970:	af 93       	push	r26
    3972:	bf 93       	push	r27
    3974:	ef 93       	push	r30
    3976:	ff 93       	push	r31
    3978:	e0 91 1f 05 	lds	r30, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
    397c:	f0 91 20 05 	lds	r31, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
    3980:	30 97       	sbiw	r30, 0x00	; 0
    3982:	09 f4       	brne	.+2      	; 0x3986 <__vector_9+0x30>
    3984:	51 c0       	rjmp	.+162    	; 0x3a28 <__vector_9+0xd2>
    3986:	96 8d       	ldd	r25, Z+30	; 0x1e
    3988:	a6 85       	ldd	r26, Z+14	; 0x0e
    398a:	b7 85       	ldd	r27, Z+15	; 0x0f
    398c:	85 85       	ldd	r24, Z+13	; 0x0d
    398e:	91 ff       	sbrs	r25, 1
    3990:	04 c0       	rjmp	.+8      	; 0x399a <__vector_9+0x44>
    3992:	9c 91       	ld	r25, X
    3994:	89 23       	and	r24, r25
    3996:	29 f4       	brne	.+10     	; 0x39a2 <__vector_9+0x4c>
    3998:	47 c0       	rjmp	.+142    	; 0x3a28 <__vector_9+0xd2>
    399a:	9c 91       	ld	r25, X
    399c:	89 23       	and	r24, r25
    399e:	09 f0       	breq	.+2      	; 0x39a2 <__vector_9+0x4c>
    39a0:	43 c0       	rjmp	.+134    	; 0x3a28 <__vector_9+0xd2>
    39a2:	a3 89       	ldd	r26, Z+19	; 0x13
    39a4:	b4 89       	ldd	r27, Z+20	; 0x14
    39a6:	9c 91       	ld	r25, X
    39a8:	85 89       	ldd	r24, Z+21	; 0x15
    39aa:	80 95       	com	r24
    39ac:	89 23       	and	r24, r25
    39ae:	8c 93       	st	X, r24
    39b0:	86 89       	ldd	r24, Z+22	; 0x16
    39b2:	97 89       	ldd	r25, Z+23	; 0x17
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	f1 f7       	brne	.-4      	; 0x39b4 <__vector_9+0x5e>
    39b8:	60 8d       	ldd	r22, Z+24	; 0x18
    39ba:	71 8d       	ldd	r23, Z+25	; 0x19
    39bc:	a6 85       	ldd	r26, Z+14	; 0x0e
    39be:	b7 85       	ldd	r27, Z+15	; 0x0f
    39c0:	55 85       	ldd	r21, Z+13	; 0x0d
    39c2:	38 e0       	ldi	r19, 0x08	; 8
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	cb 01       	movw	r24, r22
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <__vector_9+0x72>
    39cc:	82 2f       	mov	r24, r18
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	95 95       	asr	r25
    39d2:	87 95       	ror	r24
    39d4:	28 2f       	mov	r18, r24
    39d6:	4c 91       	ld	r20, X
    39d8:	45 23       	and	r20, r21
    39da:	09 f0       	breq	.+2      	; 0x39de <__vector_9+0x88>
    39dc:	20 68       	ori	r18, 0x80	; 128
    39de:	31 50       	subi	r19, 0x01	; 1
    39e0:	91 f7       	brne	.-28     	; 0x39c6 <__vector_9+0x70>
    39e2:	86 8d       	ldd	r24, Z+30	; 0x1e
    39e4:	81 fd       	sbrc	r24, 1
    39e6:	20 95       	com	r18
    39e8:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZN14SoftwareSerial20_receive_buffer_tailE>
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	01 96       	adiw	r24, 0x01	; 1
    39f0:	8f 73       	andi	r24, 0x3F	; 63
    39f2:	99 27       	eor	r25, r25
    39f4:	30 91 dd 04 	lds	r19, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial20_receive_buffer_headE>
    39f8:	38 17       	cp	r19, r24
    39fa:	49 f0       	breq	.+18     	; 0x3a0e <__vector_9+0xb8>
    39fc:	a0 91 de 04 	lds	r26, 0x04DE	; 0x8004de <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	a1 52       	subi	r26, 0x21	; 33
    3a04:	bb 4f       	sbci	r27, 0xFB	; 251
    3a06:	2c 93       	st	X, r18
    3a08:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3a0c:	03 c0       	rjmp	.+6      	; 0x3a14 <__vector_9+0xbe>
    3a0e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a10:	81 60       	ori	r24, 0x01	; 1
    3a12:	86 8f       	std	Z+30, r24	; 0x1e
    3a14:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a16:	93 8d       	ldd	r25, Z+27	; 0x1b
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <__vector_9+0xc2>
    3a1c:	a3 89       	ldd	r26, Z+19	; 0x13
    3a1e:	b4 89       	ldd	r27, Z+20	; 0x14
    3a20:	9c 91       	ld	r25, X
    3a22:	85 89       	ldd	r24, Z+21	; 0x15
    3a24:	89 2b       	or	r24, r25
    3a26:	8c 93       	st	X, r24
    3a28:	ff 91       	pop	r31
    3a2a:	ef 91       	pop	r30
    3a2c:	bf 91       	pop	r27
    3a2e:	af 91       	pop	r26
    3a30:	9f 91       	pop	r25
    3a32:	8f 91       	pop	r24
    3a34:	7f 91       	pop	r23
    3a36:	6f 91       	pop	r22
    3a38:	5f 91       	pop	r21
    3a3a:	4f 91       	pop	r20
    3a3c:	3f 91       	pop	r19
    3a3e:	2f 91       	pop	r18
    3a40:	0f 90       	pop	r0
    3a42:	0f be       	out	0x3f, r0	; 63
    3a44:	0f 90       	pop	r0
    3a46:	1f 90       	pop	r1
    3a48:	18 95       	reti

00003a4a <_ZN14SoftwareSerialD1Ev>:
    3a4a:	2e e1       	ldi	r18, 0x1E	; 30
    3a4c:	32 e0       	ldi	r19, 0x02	; 2
    3a4e:	fc 01       	movw	r30, r24
    3a50:	31 83       	std	Z+1, r19	; 0x01
    3a52:	20 83       	st	Z, r18
    3a54:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <_ZN14SoftwareSerial13stopListeningEv>

00003a58 <_ZN14SoftwareSerial5setTXEh>:
    3a58:	1f 93       	push	r17
    3a5a:	cf 93       	push	r28
    3a5c:	df 93       	push	r29
    3a5e:	ec 01       	movw	r28, r24
    3a60:	16 2f       	mov	r17, r22
    3a62:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3a64:	66 95       	lsr	r22
    3a66:	61 70       	andi	r22, 0x01	; 1
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	68 27       	eor	r22, r24
    3a6c:	81 2f       	mov	r24, r17
    3a6e:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
    3a72:	61 e0       	ldi	r22, 0x01	; 1
    3a74:	81 2f       	mov	r24, r17
    3a76:	0e 94 cf 19 	call	0x339e	; 0x339e <pinMode>
    3a7a:	81 2f       	mov	r24, r17
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	fc 01       	movw	r30, r24
    3a80:	e7 57       	subi	r30, 0x77	; 119
    3a82:	fe 4f       	sbci	r31, 0xFE	; 254
    3a84:	e4 91       	lpm	r30, Z
    3a86:	e8 8b       	std	Y+16, r30	; 0x10
    3a88:	fc 01       	movw	r30, r24
    3a8a:	e8 55       	subi	r30, 0x58	; 88
    3a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a8e:	e4 91       	lpm	r30, Z
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	ee 0f       	add	r30, r30
    3a94:	ff 1f       	adc	r31, r31
    3a96:	eb 52       	subi	r30, 0x2B	; 43
    3a98:	fe 4f       	sbci	r31, 0xFE	; 254
    3a9a:	85 91       	lpm	r24, Z+
    3a9c:	94 91       	lpm	r25, Z
    3a9e:	9a 8b       	std	Y+18, r25	; 0x12
    3aa0:	89 8b       	std	Y+17, r24	; 0x11
    3aa2:	df 91       	pop	r29
    3aa4:	cf 91       	pop	r28
    3aa6:	1f 91       	pop	r17
    3aa8:	08 95       	ret

00003aaa <_ZN14SoftwareSerial5setRXEh>:
    3aaa:	1f 93       	push	r17
    3aac:	cf 93       	push	r28
    3aae:	df 93       	push	r29
    3ab0:	ec 01       	movw	r28, r24
    3ab2:	16 2f       	mov	r17, r22
    3ab4:	60 e0       	ldi	r22, 0x00	; 0
    3ab6:	81 2f       	mov	r24, r17
    3ab8:	0e 94 cf 19 	call	0x339e	; 0x339e <pinMode>
    3abc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3abe:	81 fd       	sbrc	r24, 1
    3ac0:	04 c0       	rjmp	.+8      	; 0x3aca <_ZN14SoftwareSerial5setRXEh+0x20>
    3ac2:	61 e0       	ldi	r22, 0x01	; 1
    3ac4:	81 2f       	mov	r24, r17
    3ac6:	0e 94 0b 1a 	call	0x3416	; 0x3416 <digitalWrite>
    3aca:	1c 87       	std	Y+12, r17	; 0x0c
    3acc:	81 2f       	mov	r24, r17
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	fc 01       	movw	r30, r24
    3ad2:	e7 57       	subi	r30, 0x77	; 119
    3ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad6:	e4 91       	lpm	r30, Z
    3ad8:	ed 87       	std	Y+13, r30	; 0x0d
    3ada:	fc 01       	movw	r30, r24
    3adc:	e8 55       	subi	r30, 0x58	; 88
    3ade:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae0:	e4 91       	lpm	r30, Z
    3ae2:	f0 e0       	ldi	r31, 0x00	; 0
    3ae4:	ee 0f       	add	r30, r30
    3ae6:	ff 1f       	adc	r31, r31
    3ae8:	e9 53       	subi	r30, 0x39	; 57
    3aea:	fe 4f       	sbci	r31, 0xFE	; 254
    3aec:	85 91       	lpm	r24, Z+
    3aee:	94 91       	lpm	r25, Z
    3af0:	9f 87       	std	Y+15, r25	; 0x0f
    3af2:	8e 87       	std	Y+14, r24	; 0x0e
    3af4:	df 91       	pop	r29
    3af6:	cf 91       	pop	r28
    3af8:	1f 91       	pop	r17
    3afa:	08 95       	ret

00003afc <_ZN14SoftwareSerialC1Ehhb>:
    3afc:	1f 93       	push	r17
    3afe:	cf 93       	push	r28
    3b00:	df 93       	push	r29
    3b02:	ec 01       	movw	r28, r24
    3b04:	16 2f       	mov	r17, r22
    3b06:	1b 82       	std	Y+3, r1	; 0x03
    3b08:	1a 82       	std	Y+2, r1	; 0x02
    3b0a:	88 ee       	ldi	r24, 0xE8	; 232
    3b0c:	93 e0       	ldi	r25, 0x03	; 3
    3b0e:	a0 e0       	ldi	r26, 0x00	; 0
    3b10:	b0 e0       	ldi	r27, 0x00	; 0
    3b12:	8c 83       	std	Y+4, r24	; 0x04
    3b14:	9d 83       	std	Y+5, r25	; 0x05
    3b16:	ae 83       	std	Y+6, r26	; 0x06
    3b18:	bf 83       	std	Y+7, r27	; 0x07
    3b1a:	8e e1       	ldi	r24, 0x1E	; 30
    3b1c:	92 e0       	ldi	r25, 0x02	; 2
    3b1e:	99 83       	std	Y+1, r25	; 0x01
    3b20:	88 83       	st	Y, r24
    3b22:	1f 8a       	std	Y+23, r1	; 0x17
    3b24:	1e 8a       	std	Y+22, r1	; 0x16
    3b26:	19 8e       	std	Y+25, r1	; 0x19
    3b28:	18 8e       	std	Y+24, r1	; 0x18
    3b2a:	1b 8e       	std	Y+27, r1	; 0x1b
    3b2c:	1a 8e       	std	Y+26, r1	; 0x1a
    3b2e:	1d 8e       	std	Y+29, r1	; 0x1d
    3b30:	1c 8e       	std	Y+28, r1	; 0x1c
    3b32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b34:	8e 7f       	andi	r24, 0xFE	; 254
    3b36:	20 fb       	bst	r18, 0
    3b38:	81 f9       	bld	r24, 1
    3b3a:	8e 8f       	std	Y+30, r24	; 0x1e
    3b3c:	64 2f       	mov	r22, r20
    3b3e:	ce 01       	movw	r24, r28
    3b40:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <_ZN14SoftwareSerial5setTXEh>
    3b44:	61 2f       	mov	r22, r17
    3b46:	ce 01       	movw	r24, r28
    3b48:	df 91       	pop	r29
    3b4a:	cf 91       	pop	r28
    3b4c:	1f 91       	pop	r17
    3b4e:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <_ZN14SoftwareSerial5setRXEh>

00003b52 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	ec 01       	movw	r28, r24
    3b58:	9a 01       	movw	r18, r20
    3b5a:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    3b5c:	1b 8e       	std	Y+27, r1	; 0x1b
    3b5e:	1a 8e       	std	Y+26, r1	; 0x1a
    3b60:	19 8e       	std	Y+25, r1	; 0x19
    3b62:	18 8e       	std	Y+24, r1	; 0x18
    3b64:	1f 8a       	std	Y+23, r1	; 0x17
    3b66:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    3b68:	60 e0       	ldi	r22, 0x00	; 0
    3b6a:	79 e0       	ldi	r23, 0x09	; 9
    3b6c:	8d e3       	ldi	r24, 0x3D	; 61
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    3b74:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3b76:	24 30       	cpi	r18, 0x04	; 4
    3b78:	31 05       	cpc	r19, r1
    3b7a:	18 f0       	brcs	.+6      	; 0x3b82 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    3b7c:	c9 01       	movw	r24, r18
    3b7e:	03 97       	sbiw	r24, 0x03	; 3
    3b80:	02 c0       	rjmp	.+4      	; 0x3b86 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    3b86:	9d 8f       	std	Y+29, r25	; 0x1d
    3b88:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    3b8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b8c:	98 ef       	ldi	r25, 0xF8	; 248
    3b8e:	98 0f       	add	r25, r24
    3b90:	94 30       	cpi	r25, 0x04	; 4
    3b92:	48 f0       	brcs	.+18     	; 0x3ba6 <_ZN14SoftwareSerial5beginEl+0x54>
    3b94:	62 ef       	ldi	r22, 0xF2	; 242
    3b96:	68 0f       	add	r22, r24
    3b98:	64 30       	cpi	r22, 0x04	; 4
    3b9a:	28 f0       	brcs	.+10     	; 0x3ba6 <_ZN14SoftwareSerial5beginEl+0x54>
    3b9c:	66 ee       	ldi	r22, 0xE6	; 230
    3b9e:	68 0f       	add	r22, r24
    3ba0:	63 30       	cpi	r22, 0x03	; 3
    3ba2:	08 f0       	brcs	.+2      	; 0x3ba6 <_ZN14SoftwareSerial5beginEl+0x54>
    3ba4:	72 c0       	rjmp	.+228    	; 0x3c8a <_ZN14SoftwareSerial5beginEl+0x138>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3ba6:	b9 01       	movw	r22, r18
    3ba8:	76 95       	lsr	r23
    3baa:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3bac:	64 31       	cpi	r22, 0x14	; 20
    3bae:	71 05       	cpc	r23, r1
    3bb0:	18 f0       	brcs	.+6      	; 0x3bb8 <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
    3bb2:	63 51       	subi	r22, 0x13	; 19
    3bb4:	71 09       	sbc	r23, r1
    3bb6:	02 c0       	rjmp	.+4      	; 0x3bbc <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
    3bb8:	61 e0       	ldi	r22, 0x01	; 1
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3bbc:	7f 8b       	std	Y+23, r23	; 0x17
    3bbe:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3bc0:	36 97       	sbiw	r30, 0x06	; 6
    3bc2:	20 f0       	brcs	.+8      	; 0x3bcc <_ZN14SoftwareSerial5beginEl+0x7a>
    return num - sub;
    3bc4:	b9 01       	movw	r22, r18
    3bc6:	65 50       	subi	r22, 0x05	; 5
    3bc8:	71 09       	sbc	r23, r1
    3bca:	02 c0       	rjmp	.+4      	; 0x3bd0 <_ZN14SoftwareSerial5beginEl+0x7e>
  else
    return 1;
    3bcc:	61 e0       	ldi	r22, 0x01	; 1
    3bce:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    3bd0:	79 8f       	std	Y+25, r23	; 0x19
    3bd2:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3bd4:	b9 01       	movw	r22, r18
    3bd6:	66 0f       	add	r22, r22
    3bd8:	77 1f       	adc	r23, r23
    3bda:	26 0f       	add	r18, r22
    3bdc:	37 1f       	adc	r19, r23
    3bde:	36 95       	lsr	r19
    3be0:	27 95       	ror	r18
    3be2:	36 95       	lsr	r19
    3be4:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3be6:	2d 30       	cpi	r18, 0x0D	; 13
    3be8:	31 05       	cpc	r19, r1
    3bea:	18 f0       	brcs	.+6      	; 0x3bf2 <_ZN14SoftwareSerial5beginEl+0xa0>
    return num - sub;
    3bec:	2c 50       	subi	r18, 0x0C	; 12
    3bee:	31 09       	sbc	r19, r1
    3bf0:	02 c0       	rjmp	.+4      	; 0x3bf6 <_ZN14SoftwareSerial5beginEl+0xa4>
  else
    return 1;
    3bf2:	21 e0       	ldi	r18, 0x01	; 1
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3bf6:	3b 8f       	std	Y+27, r19	; 0x1b
    3bf8:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    3bfa:	94 30       	cpi	r25, 0x04	; 4
    3bfc:	58 f0       	brcs	.+22     	; 0x3c14 <_ZN14SoftwareSerial5beginEl+0xc2>
    3bfe:	92 ef       	ldi	r25, 0xF2	; 242
    3c00:	98 0f       	add	r25, r24
    3c02:	94 30       	cpi	r25, 0x04	; 4
    3c04:	38 f0       	brcs	.+14     	; 0x3c14 <_ZN14SoftwareSerial5beginEl+0xc2>
    3c06:	8a 51       	subi	r24, 0x1A	; 26
    3c08:	83 30       	cpi	r24, 0x03	; 3
    3c0a:	08 f0       	brcs	.+2      	; 0x3c0e <_ZN14SoftwareSerial5beginEl+0xbc>
    3c0c:	43 c0       	rjmp	.+134    	; 0x3c94 <_ZN14SoftwareSerial5beginEl+0x142>
    3c0e:	a8 e6       	ldi	r26, 0x68	; 104
    3c10:	b0 e0       	ldi	r27, 0x00	; 0
    3c12:	42 c0       	rjmp	.+132    	; 0x3c98 <_ZN14SoftwareSerial5beginEl+0x146>
    3c14:	a8 e6       	ldi	r26, 0x68	; 104
    3c16:	b0 e0       	ldi	r27, 0x00	; 0
    3c18:	e8 e6       	ldi	r30, 0x68	; 104
    3c1a:	f0 e0       	ldi	r31, 0x00	; 0
    3c1c:	80 81       	ld	r24, Z
    3c1e:	81 60       	ori	r24, 0x01	; 1
    3c20:	8c 93       	st	X, r24
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    3c22:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c24:	98 ef       	ldi	r25, 0xF8	; 248
    3c26:	98 0f       	add	r25, r24
    3c28:	94 30       	cpi	r25, 0x04	; 4
    3c2a:	40 f0       	brcs	.+16     	; 0x3c3c <_ZN14SoftwareSerial5beginEl+0xea>
    3c2c:	22 ef       	ldi	r18, 0xF2	; 242
    3c2e:	28 0f       	add	r18, r24
    3c30:	24 30       	cpi	r18, 0x04	; 4
    3c32:	20 f0       	brcs	.+8      	; 0x3c3c <_ZN14SoftwareSerial5beginEl+0xea>
    3c34:	26 ee       	ldi	r18, 0xE6	; 230
    3c36:	28 0f       	add	r18, r24
    3c38:	23 30       	cpi	r18, 0x03	; 3
    3c3a:	18 f4       	brcc	.+6      	; 0x3c42 <_ZN14SoftwareSerial5beginEl+0xf0>
    3c3c:	2b e6       	ldi	r18, 0x6B	; 107
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	02 c0       	rjmp	.+4      	; 0x3c46 <_ZN14SoftwareSerial5beginEl+0xf4>
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	3c 8b       	std	Y+20, r19	; 0x14
    3c48:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    3c4a:	94 30       	cpi	r25, 0x04	; 4
    3c4c:	10 f4       	brcc	.+4      	; 0x3c52 <_ZN14SoftwareSerial5beginEl+0x100>
    3c4e:	9c ef       	ldi	r25, 0xFC	; 252
    3c50:	09 c0       	rjmp	.+18     	; 0x3c64 <_ZN14SoftwareSerial5beginEl+0x112>
    3c52:	8e 30       	cpi	r24, 0x0E	; 14
    3c54:	71 f0       	breq	.+28     	; 0x3c72 <_ZN14SoftwareSerial5beginEl+0x120>
    3c56:	8f 30       	cpi	r24, 0x0F	; 15
    3c58:	71 f0       	breq	.+28     	; 0x3c76 <_ZN14SoftwareSerial5beginEl+0x124>
    3c5a:	80 31       	cpi	r24, 0x10	; 16
    3c5c:	71 f0       	breq	.+28     	; 0x3c7a <_ZN14SoftwareSerial5beginEl+0x128>
    3c5e:	81 31       	cpi	r24, 0x11	; 17
    3c60:	71 f0       	breq	.+28     	; 0x3c7e <_ZN14SoftwareSerial5beginEl+0x12c>
    3c62:	9a ee       	ldi	r25, 0xEA	; 234
    3c64:	98 0f       	add	r25, r24
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	01 c0       	rjmp	.+2      	; 0x3c6c <_ZN14SoftwareSerial5beginEl+0x11a>
    3c6a:	88 0f       	add	r24, r24
    3c6c:	9a 95       	dec	r25
    3c6e:	ea f7       	brpl	.-6      	; 0x3c6a <_ZN14SoftwareSerial5beginEl+0x118>
    3c70:	07 c0       	rjmp	.+14     	; 0x3c80 <_ZN14SoftwareSerial5beginEl+0x12e>
    3c72:	88 e0       	ldi	r24, 0x08	; 8
    3c74:	05 c0       	rjmp	.+10     	; 0x3c80 <_ZN14SoftwareSerial5beginEl+0x12e>
    3c76:	82 e0       	ldi	r24, 0x02	; 2
    3c78:	03 c0       	rjmp	.+6      	; 0x3c80 <_ZN14SoftwareSerial5beginEl+0x12e>
    3c7a:	84 e0       	ldi	r24, 0x04	; 4
    3c7c:	01 c0       	rjmp	.+2      	; 0x3c80 <_ZN14SoftwareSerial5beginEl+0x12e>
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    3c82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c84:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <_ZN14SoftwareSerial5beginEl+0x134>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3c8a:	ce 01       	movw	r24, r28
}
    3c8c:	df 91       	pop	r29
    3c8e:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3c90:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <_ZN14SoftwareSerial6listenEv>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    3c94:	a0 e0       	ldi	r26, 0x00	; 0
    3c96:	b0 e0       	ldi	r27, 0x00	; 0
    3c98:	83 30       	cpi	r24, 0x03	; 3
    3c9a:	08 f4       	brcc	.+2      	; 0x3c9e <_ZN14SoftwareSerial5beginEl+0x14c>
    3c9c:	bd cf       	rjmp	.-134    	; 0x3c18 <_ZN14SoftwareSerial5beginEl+0xc6>
    3c9e:	e0 e0       	ldi	r30, 0x00	; 0
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	bc cf       	rjmp	.-136    	; 0x3c1c <_ZN14SoftwareSerial5beginEl+0xca>

00003ca4 <_ZN14SoftwareSerial3endEv>:
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
    3ca4:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <_ZN14SoftwareSerial13stopListeningEv>

00003ca8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3ca8:	08 95       	ret

00003caa <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    3caa:	ef 92       	push	r14
    3cac:	ff 92       	push	r15
    3cae:	0f 93       	push	r16
    3cb0:	1f 93       	push	r17
    3cb2:	cf 93       	push	r28
    3cb4:	df 93       	push	r29
    3cb6:	7b 01       	movw	r14, r22
    3cb8:	fc 01       	movw	r30, r24
    3cba:	c2 81       	ldd	r28, Z+2	; 0x02
    3cbc:	d3 81       	ldd	r29, Z+3	; 0x03
    3cbe:	00 e0       	ldi	r16, 0x00	; 0
    3cc0:	10 e0       	ldi	r17, 0x00	; 0
    3cc2:	20 97       	sbiw	r28, 0x00	; 0
    3cc4:	81 f0       	breq	.+32     	; 0x3ce6 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    3cc6:	e8 81       	ld	r30, Y
    3cc8:	f9 81       	ldd	r31, Y+1	; 0x01
    3cca:	02 80       	ldd	r0, Z+2	; 0x02
    3ccc:	f3 81       	ldd	r31, Z+3	; 0x03
    3cce:	e0 2d       	mov	r30, r0
    3cd0:	b7 01       	movw	r22, r14
    3cd2:	ce 01       	movw	r24, r28
    3cd4:	09 95       	icall
    3cd6:	97 fd       	sbrc	r25, 7
    3cd8:	08 c0       	rjmp	.+16     	; 0x3cea <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    3cda:	08 0f       	add	r16, r24
    3cdc:	19 1f       	adc	r17, r25
    3cde:	08 84       	ldd	r0, Y+8	; 0x08
    3ce0:	d9 85       	ldd	r29, Y+9	; 0x09
    3ce2:	c0 2d       	mov	r28, r0
    3ce4:	ee cf       	rjmp	.-36     	; 0x3cc2 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    3ce6:	c8 01       	movw	r24, r16
    3ce8:	02 c0       	rjmp	.+4      	; 0x3cee <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    3cea:	8f ef       	ldi	r24, 0xFF	; 255
    3cec:	9f ef       	ldi	r25, 0xFF	; 255
    3cee:	df 91       	pop	r29
    3cf0:	cf 91       	pop	r28
    3cf2:	1f 91       	pop	r17
    3cf4:	0f 91       	pop	r16
    3cf6:	ff 90       	pop	r15
    3cf8:	ef 90       	pop	r14
    3cfa:	08 95       	ret

00003cfc <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    3cfc:	0f 93       	push	r16
    3cfe:	1f 93       	push	r17
    3d00:	cf 93       	push	r28
    3d02:	df 93       	push	r29
    3d04:	8b 01       	movw	r16, r22
    3d06:	fc 01       	movw	r30, r24
    3d08:	c2 81       	ldd	r28, Z+2	; 0x02
    3d0a:	d3 81       	ldd	r29, Z+3	; 0x03
    3d0c:	20 97       	sbiw	r28, 0x00	; 0
    3d0e:	71 f0       	breq	.+28     	; 0x3d2c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    3d10:	e8 81       	ld	r30, Y
    3d12:	f9 81       	ldd	r31, Y+1	; 0x01
    3d14:	04 80       	ldd	r0, Z+4	; 0x04
    3d16:	f5 81       	ldd	r31, Z+5	; 0x05
    3d18:	e0 2d       	mov	r30, r0
    3d1a:	b8 01       	movw	r22, r16
    3d1c:	ce 01       	movw	r24, r28
    3d1e:	09 95       	icall
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	31 f4       	brne	.+12     	; 0x3d30 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    3d24:	08 84       	ldd	r0, Y+8	; 0x08
    3d26:	d9 85       	ldd	r29, Y+9	; 0x09
    3d28:	c0 2d       	mov	r28, r0
    3d2a:	f0 cf       	rjmp	.-32     	; 0x3d0c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	df 91       	pop	r29
    3d32:	cf 91       	pop	r28
    3d34:	1f 91       	pop	r17
    3d36:	0f 91       	pop	r16
    3d38:	08 95       	ret

00003d3a <_ZN13PluggableUSB_12getShortNameEPc>:
    3d3a:	0f 93       	push	r16
    3d3c:	1f 93       	push	r17
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
    3d42:	8b 01       	movw	r16, r22
    3d44:	fc 01       	movw	r30, r24
    3d46:	c2 81       	ldd	r28, Z+2	; 0x02
    3d48:	d3 81       	ldd	r29, Z+3	; 0x03
    3d4a:	20 97       	sbiw	r28, 0x00	; 0
    3d4c:	71 f0       	breq	.+28     	; 0x3d6a <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    3d4e:	e8 81       	ld	r30, Y
    3d50:	f9 81       	ldd	r31, Y+1	; 0x01
    3d52:	06 80       	ldd	r0, Z+6	; 0x06
    3d54:	f7 81       	ldd	r31, Z+7	; 0x07
    3d56:	e0 2d       	mov	r30, r0
    3d58:	b8 01       	movw	r22, r16
    3d5a:	ce 01       	movw	r24, r28
    3d5c:	09 95       	icall
    3d5e:	08 0f       	add	r16, r24
    3d60:	11 1d       	adc	r17, r1
    3d62:	08 84       	ldd	r0, Y+8	; 0x08
    3d64:	d9 85       	ldd	r29, Y+9	; 0x09
    3d66:	c0 2d       	mov	r28, r0
    3d68:	f0 cf       	rjmp	.-32     	; 0x3d4a <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    3d6a:	f8 01       	movw	r30, r16
    3d6c:	10 82       	st	Z, r1
    3d6e:	df 91       	pop	r29
    3d70:	cf 91       	pop	r28
    3d72:	1f 91       	pop	r17
    3d74:	0f 91       	pop	r16
    3d76:	08 95       	ret

00003d78 <_ZN13PluggableUSB_5setupER8USBSetup>:
    3d78:	0f 93       	push	r16
    3d7a:	1f 93       	push	r17
    3d7c:	cf 93       	push	r28
    3d7e:	df 93       	push	r29
    3d80:	8b 01       	movw	r16, r22
    3d82:	fc 01       	movw	r30, r24
    3d84:	c2 81       	ldd	r28, Z+2	; 0x02
    3d86:	d3 81       	ldd	r29, Z+3	; 0x03
    3d88:	20 97       	sbiw	r28, 0x00	; 0
    3d8a:	71 f0       	breq	.+28     	; 0x3da8 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    3d8c:	e8 81       	ld	r30, Y
    3d8e:	f9 81       	ldd	r31, Y+1	; 0x01
    3d90:	01 90       	ld	r0, Z+
    3d92:	f0 81       	ld	r31, Z
    3d94:	e0 2d       	mov	r30, r0
    3d96:	b8 01       	movw	r22, r16
    3d98:	ce 01       	movw	r24, r28
    3d9a:	09 95       	icall
    3d9c:	81 11       	cpse	r24, r1
    3d9e:	05 c0       	rjmp	.+10     	; 0x3daa <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    3da0:	08 84       	ldd	r0, Y+8	; 0x08
    3da2:	d9 85       	ldd	r29, Y+9	; 0x09
    3da4:	c0 2d       	mov	r28, r0
    3da6:	f0 cf       	rjmp	.-32     	; 0x3d88 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	df 91       	pop	r29
    3dac:	cf 91       	pop	r28
    3dae:	1f 91       	pop	r17
    3db0:	0f 91       	pop	r16
    3db2:	08 95       	ret

00003db4 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3db4:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <_ZGVZ12PluggableUSBvE3obj>
    3db8:	81 11       	cpse	r24, r1
    3dba:	0d c0       	rjmp	.+26     	; 0x3dd6 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    3dbc:	82 e0       	ldi	r24, 0x02	; 2
    3dbe:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZZ12PluggableUSBvE3obj>
    3dc2:	84 e0       	ldi	r24, 0x04	; 4
    3dc4:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <_ZZ12PluggableUSBvE3obj+0x1>
    3dc8:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <_ZZ12PluggableUSBvE3obj+0x3>
    3dcc:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    3dd6:	81 e2       	ldi	r24, 0x21	; 33
    3dd8:	95 e0       	ldi	r25, 0x05	; 5
    3dda:	08 95       	ret

00003ddc <__subsf3>:
    3ddc:	50 58       	subi	r21, 0x80	; 128

00003dde <__addsf3>:
    3dde:	bb 27       	eor	r27, r27
    3de0:	aa 27       	eor	r26, r26
    3de2:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__addsf3x>
    3de6:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__fp_round>
    3dea:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__fp_pscA>
    3dee:	38 f0       	brcs	.+14     	; 0x3dfe <__addsf3+0x20>
    3df0:	0e 94 72 20 	call	0x40e4	; 0x40e4 <__fp_pscB>
    3df4:	20 f0       	brcs	.+8      	; 0x3dfe <__addsf3+0x20>
    3df6:	39 f4       	brne	.+14     	; 0x3e06 <__addsf3+0x28>
    3df8:	9f 3f       	cpi	r25, 0xFF	; 255
    3dfa:	19 f4       	brne	.+6      	; 0x3e02 <__addsf3+0x24>
    3dfc:	26 f4       	brtc	.+8      	; 0x3e06 <__addsf3+0x28>
    3dfe:	0c 94 68 20 	jmp	0x40d0	; 0x40d0 <__fp_nan>
    3e02:	0e f4       	brtc	.+2      	; 0x3e06 <__addsf3+0x28>
    3e04:	e0 95       	com	r30
    3e06:	e7 fb       	bst	r30, 7
    3e08:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <__fp_inf>

00003e0c <__addsf3x>:
    3e0c:	e9 2f       	mov	r30, r25
    3e0e:	0e 94 8a 20 	call	0x4114	; 0x4114 <__fp_split3>
    3e12:	58 f3       	brcs	.-42     	; 0x3dea <__addsf3+0xc>
    3e14:	ba 17       	cp	r27, r26
    3e16:	62 07       	cpc	r22, r18
    3e18:	73 07       	cpc	r23, r19
    3e1a:	84 07       	cpc	r24, r20
    3e1c:	95 07       	cpc	r25, r21
    3e1e:	20 f0       	brcs	.+8      	; 0x3e28 <__addsf3x+0x1c>
    3e20:	79 f4       	brne	.+30     	; 0x3e40 <__addsf3x+0x34>
    3e22:	a6 f5       	brtc	.+104    	; 0x3e8c <__addsf3x+0x80>
    3e24:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__fp_zero>
    3e28:	0e f4       	brtc	.+2      	; 0x3e2c <__addsf3x+0x20>
    3e2a:	e0 95       	com	r30
    3e2c:	0b 2e       	mov	r0, r27
    3e2e:	ba 2f       	mov	r27, r26
    3e30:	a0 2d       	mov	r26, r0
    3e32:	0b 01       	movw	r0, r22
    3e34:	b9 01       	movw	r22, r18
    3e36:	90 01       	movw	r18, r0
    3e38:	0c 01       	movw	r0, r24
    3e3a:	ca 01       	movw	r24, r20
    3e3c:	a0 01       	movw	r20, r0
    3e3e:	11 24       	eor	r1, r1
    3e40:	ff 27       	eor	r31, r31
    3e42:	59 1b       	sub	r21, r25
    3e44:	99 f0       	breq	.+38     	; 0x3e6c <__addsf3x+0x60>
    3e46:	59 3f       	cpi	r21, 0xF9	; 249
    3e48:	50 f4       	brcc	.+20     	; 0x3e5e <__addsf3x+0x52>
    3e4a:	50 3e       	cpi	r21, 0xE0	; 224
    3e4c:	68 f1       	brcs	.+90     	; 0x3ea8 <__addsf3x+0x9c>
    3e4e:	1a 16       	cp	r1, r26
    3e50:	f0 40       	sbci	r31, 0x00	; 0
    3e52:	a2 2f       	mov	r26, r18
    3e54:	23 2f       	mov	r18, r19
    3e56:	34 2f       	mov	r19, r20
    3e58:	44 27       	eor	r20, r20
    3e5a:	58 5f       	subi	r21, 0xF8	; 248
    3e5c:	f3 cf       	rjmp	.-26     	; 0x3e44 <__addsf3x+0x38>
    3e5e:	46 95       	lsr	r20
    3e60:	37 95       	ror	r19
    3e62:	27 95       	ror	r18
    3e64:	a7 95       	ror	r26
    3e66:	f0 40       	sbci	r31, 0x00	; 0
    3e68:	53 95       	inc	r21
    3e6a:	c9 f7       	brne	.-14     	; 0x3e5e <__addsf3x+0x52>
    3e6c:	7e f4       	brtc	.+30     	; 0x3e8c <__addsf3x+0x80>
    3e6e:	1f 16       	cp	r1, r31
    3e70:	ba 0b       	sbc	r27, r26
    3e72:	62 0b       	sbc	r22, r18
    3e74:	73 0b       	sbc	r23, r19
    3e76:	84 0b       	sbc	r24, r20
    3e78:	ba f0       	brmi	.+46     	; 0x3ea8 <__addsf3x+0x9c>
    3e7a:	91 50       	subi	r25, 0x01	; 1
    3e7c:	a1 f0       	breq	.+40     	; 0x3ea6 <__addsf3x+0x9a>
    3e7e:	ff 0f       	add	r31, r31
    3e80:	bb 1f       	adc	r27, r27
    3e82:	66 1f       	adc	r22, r22
    3e84:	77 1f       	adc	r23, r23
    3e86:	88 1f       	adc	r24, r24
    3e88:	c2 f7       	brpl	.-16     	; 0x3e7a <__addsf3x+0x6e>
    3e8a:	0e c0       	rjmp	.+28     	; 0x3ea8 <__addsf3x+0x9c>
    3e8c:	ba 0f       	add	r27, r26
    3e8e:	62 1f       	adc	r22, r18
    3e90:	73 1f       	adc	r23, r19
    3e92:	84 1f       	adc	r24, r20
    3e94:	48 f4       	brcc	.+18     	; 0x3ea8 <__addsf3x+0x9c>
    3e96:	87 95       	ror	r24
    3e98:	77 95       	ror	r23
    3e9a:	67 95       	ror	r22
    3e9c:	b7 95       	ror	r27
    3e9e:	f7 95       	ror	r31
    3ea0:	9e 3f       	cpi	r25, 0xFE	; 254
    3ea2:	08 f0       	brcs	.+2      	; 0x3ea6 <__addsf3x+0x9a>
    3ea4:	b0 cf       	rjmp	.-160    	; 0x3e06 <__addsf3+0x28>
    3ea6:	93 95       	inc	r25
    3ea8:	88 0f       	add	r24, r24
    3eaa:	08 f0       	brcs	.+2      	; 0x3eae <__addsf3x+0xa2>
    3eac:	99 27       	eor	r25, r25
    3eae:	ee 0f       	add	r30, r30
    3eb0:	97 95       	ror	r25
    3eb2:	87 95       	ror	r24
    3eb4:	08 95       	ret

00003eb6 <__cmpsf2>:
    3eb6:	0e 94 3e 20 	call	0x407c	; 0x407c <__fp_cmp>
    3eba:	08 f4       	brcc	.+2      	; 0x3ebe <__cmpsf2+0x8>
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	08 95       	ret

00003ec0 <__divsf3>:
    3ec0:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <__divsf3x>
    3ec4:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__fp_round>
    3ec8:	0e 94 72 20 	call	0x40e4	; 0x40e4 <__fp_pscB>
    3ecc:	58 f0       	brcs	.+22     	; 0x3ee4 <__divsf3+0x24>
    3ece:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__fp_pscA>
    3ed2:	40 f0       	brcs	.+16     	; 0x3ee4 <__divsf3+0x24>
    3ed4:	29 f4       	brne	.+10     	; 0x3ee0 <__divsf3+0x20>
    3ed6:	5f 3f       	cpi	r21, 0xFF	; 255
    3ed8:	29 f0       	breq	.+10     	; 0x3ee4 <__divsf3+0x24>
    3eda:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <__fp_inf>
    3ede:	51 11       	cpse	r21, r1
    3ee0:	0c 94 ad 20 	jmp	0x415a	; 0x415a <__fp_szero>
    3ee4:	0c 94 68 20 	jmp	0x40d0	; 0x40d0 <__fp_nan>

00003ee8 <__divsf3x>:
    3ee8:	0e 94 8a 20 	call	0x4114	; 0x4114 <__fp_split3>
    3eec:	68 f3       	brcs	.-38     	; 0x3ec8 <__divsf3+0x8>

00003eee <__divsf3_pse>:
    3eee:	99 23       	and	r25, r25
    3ef0:	b1 f3       	breq	.-20     	; 0x3ede <__divsf3+0x1e>
    3ef2:	55 23       	and	r21, r21
    3ef4:	91 f3       	breq	.-28     	; 0x3eda <__divsf3+0x1a>
    3ef6:	95 1b       	sub	r25, r21
    3ef8:	55 0b       	sbc	r21, r21
    3efa:	bb 27       	eor	r27, r27
    3efc:	aa 27       	eor	r26, r26
    3efe:	62 17       	cp	r22, r18
    3f00:	73 07       	cpc	r23, r19
    3f02:	84 07       	cpc	r24, r20
    3f04:	38 f0       	brcs	.+14     	; 0x3f14 <__divsf3_pse+0x26>
    3f06:	9f 5f       	subi	r25, 0xFF	; 255
    3f08:	5f 4f       	sbci	r21, 0xFF	; 255
    3f0a:	22 0f       	add	r18, r18
    3f0c:	33 1f       	adc	r19, r19
    3f0e:	44 1f       	adc	r20, r20
    3f10:	aa 1f       	adc	r26, r26
    3f12:	a9 f3       	breq	.-22     	; 0x3efe <__divsf3_pse+0x10>
    3f14:	35 d0       	rcall	.+106    	; 0x3f80 <__divsf3_pse+0x92>
    3f16:	0e 2e       	mov	r0, r30
    3f18:	3a f0       	brmi	.+14     	; 0x3f28 <__divsf3_pse+0x3a>
    3f1a:	e0 e8       	ldi	r30, 0x80	; 128
    3f1c:	32 d0       	rcall	.+100    	; 0x3f82 <__divsf3_pse+0x94>
    3f1e:	91 50       	subi	r25, 0x01	; 1
    3f20:	50 40       	sbci	r21, 0x00	; 0
    3f22:	e6 95       	lsr	r30
    3f24:	00 1c       	adc	r0, r0
    3f26:	ca f7       	brpl	.-14     	; 0x3f1a <__divsf3_pse+0x2c>
    3f28:	2b d0       	rcall	.+86     	; 0x3f80 <__divsf3_pse+0x92>
    3f2a:	fe 2f       	mov	r31, r30
    3f2c:	29 d0       	rcall	.+82     	; 0x3f80 <__divsf3_pse+0x92>
    3f2e:	66 0f       	add	r22, r22
    3f30:	77 1f       	adc	r23, r23
    3f32:	88 1f       	adc	r24, r24
    3f34:	bb 1f       	adc	r27, r27
    3f36:	26 17       	cp	r18, r22
    3f38:	37 07       	cpc	r19, r23
    3f3a:	48 07       	cpc	r20, r24
    3f3c:	ab 07       	cpc	r26, r27
    3f3e:	b0 e8       	ldi	r27, 0x80	; 128
    3f40:	09 f0       	breq	.+2      	; 0x3f44 <__divsf3_pse+0x56>
    3f42:	bb 0b       	sbc	r27, r27
    3f44:	80 2d       	mov	r24, r0
    3f46:	bf 01       	movw	r22, r30
    3f48:	ff 27       	eor	r31, r31
    3f4a:	93 58       	subi	r25, 0x83	; 131
    3f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f4e:	3a f0       	brmi	.+14     	; 0x3f5e <__divsf3_pse+0x70>
    3f50:	9e 3f       	cpi	r25, 0xFE	; 254
    3f52:	51 05       	cpc	r21, r1
    3f54:	78 f0       	brcs	.+30     	; 0x3f74 <__divsf3_pse+0x86>
    3f56:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <__fp_inf>
    3f5a:	0c 94 ad 20 	jmp	0x415a	; 0x415a <__fp_szero>
    3f5e:	5f 3f       	cpi	r21, 0xFF	; 255
    3f60:	e4 f3       	brlt	.-8      	; 0x3f5a <__divsf3_pse+0x6c>
    3f62:	98 3e       	cpi	r25, 0xE8	; 232
    3f64:	d4 f3       	brlt	.-12     	; 0x3f5a <__divsf3_pse+0x6c>
    3f66:	86 95       	lsr	r24
    3f68:	77 95       	ror	r23
    3f6a:	67 95       	ror	r22
    3f6c:	b7 95       	ror	r27
    3f6e:	f7 95       	ror	r31
    3f70:	9f 5f       	subi	r25, 0xFF	; 255
    3f72:	c9 f7       	brne	.-14     	; 0x3f66 <__divsf3_pse+0x78>
    3f74:	88 0f       	add	r24, r24
    3f76:	91 1d       	adc	r25, r1
    3f78:	96 95       	lsr	r25
    3f7a:	87 95       	ror	r24
    3f7c:	97 f9       	bld	r25, 7
    3f7e:	08 95       	ret
    3f80:	e1 e0       	ldi	r30, 0x01	; 1
    3f82:	66 0f       	add	r22, r22
    3f84:	77 1f       	adc	r23, r23
    3f86:	88 1f       	adc	r24, r24
    3f88:	bb 1f       	adc	r27, r27
    3f8a:	62 17       	cp	r22, r18
    3f8c:	73 07       	cpc	r23, r19
    3f8e:	84 07       	cpc	r24, r20
    3f90:	ba 07       	cpc	r27, r26
    3f92:	20 f0       	brcs	.+8      	; 0x3f9c <__divsf3_pse+0xae>
    3f94:	62 1b       	sub	r22, r18
    3f96:	73 0b       	sbc	r23, r19
    3f98:	84 0b       	sbc	r24, r20
    3f9a:	ba 0b       	sbc	r27, r26
    3f9c:	ee 1f       	adc	r30, r30
    3f9e:	88 f7       	brcc	.-30     	; 0x3f82 <__divsf3_pse+0x94>
    3fa0:	e0 95       	com	r30
    3fa2:	08 95       	ret

00003fa4 <__fixunssfsi>:
    3fa4:	0e 94 92 20 	call	0x4124	; 0x4124 <__fp_splitA>
    3fa8:	88 f0       	brcs	.+34     	; 0x3fcc <__fixunssfsi+0x28>
    3faa:	9f 57       	subi	r25, 0x7F	; 127
    3fac:	98 f0       	brcs	.+38     	; 0x3fd4 <__fixunssfsi+0x30>
    3fae:	b9 2f       	mov	r27, r25
    3fb0:	99 27       	eor	r25, r25
    3fb2:	b7 51       	subi	r27, 0x17	; 23
    3fb4:	b0 f0       	brcs	.+44     	; 0x3fe2 <__fixunssfsi+0x3e>
    3fb6:	e1 f0       	breq	.+56     	; 0x3ff0 <__fixunssfsi+0x4c>
    3fb8:	66 0f       	add	r22, r22
    3fba:	77 1f       	adc	r23, r23
    3fbc:	88 1f       	adc	r24, r24
    3fbe:	99 1f       	adc	r25, r25
    3fc0:	1a f0       	brmi	.+6      	; 0x3fc8 <__fixunssfsi+0x24>
    3fc2:	ba 95       	dec	r27
    3fc4:	c9 f7       	brne	.-14     	; 0x3fb8 <__fixunssfsi+0x14>
    3fc6:	14 c0       	rjmp	.+40     	; 0x3ff0 <__fixunssfsi+0x4c>
    3fc8:	b1 30       	cpi	r27, 0x01	; 1
    3fca:	91 f0       	breq	.+36     	; 0x3ff0 <__fixunssfsi+0x4c>
    3fcc:	0e 94 ac 20 	call	0x4158	; 0x4158 <__fp_zero>
    3fd0:	b1 e0       	ldi	r27, 0x01	; 1
    3fd2:	08 95       	ret
    3fd4:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__fp_zero>
    3fd8:	67 2f       	mov	r22, r23
    3fda:	78 2f       	mov	r23, r24
    3fdc:	88 27       	eor	r24, r24
    3fde:	b8 5f       	subi	r27, 0xF8	; 248
    3fe0:	39 f0       	breq	.+14     	; 0x3ff0 <__fixunssfsi+0x4c>
    3fe2:	b9 3f       	cpi	r27, 0xF9	; 249
    3fe4:	cc f3       	brlt	.-14     	; 0x3fd8 <__fixunssfsi+0x34>
    3fe6:	86 95       	lsr	r24
    3fe8:	77 95       	ror	r23
    3fea:	67 95       	ror	r22
    3fec:	b3 95       	inc	r27
    3fee:	d9 f7       	brne	.-10     	; 0x3fe6 <__fixunssfsi+0x42>
    3ff0:	3e f4       	brtc	.+14     	; 0x4000 <__fixunssfsi+0x5c>
    3ff2:	90 95       	com	r25
    3ff4:	80 95       	com	r24
    3ff6:	70 95       	com	r23
    3ff8:	61 95       	neg	r22
    3ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    3ffc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    4000:	08 95       	ret

00004002 <__floatunsisf>:
    4002:	e8 94       	clt
    4004:	09 c0       	rjmp	.+18     	; 0x4018 <__floatsisf+0x12>

00004006 <__floatsisf>:
    4006:	97 fb       	bst	r25, 7
    4008:	3e f4       	brtc	.+14     	; 0x4018 <__floatsisf+0x12>
    400a:	90 95       	com	r25
    400c:	80 95       	com	r24
    400e:	70 95       	com	r23
    4010:	61 95       	neg	r22
    4012:	7f 4f       	sbci	r23, 0xFF	; 255
    4014:	8f 4f       	sbci	r24, 0xFF	; 255
    4016:	9f 4f       	sbci	r25, 0xFF	; 255
    4018:	99 23       	and	r25, r25
    401a:	a9 f0       	breq	.+42     	; 0x4046 <__floatsisf+0x40>
    401c:	f9 2f       	mov	r31, r25
    401e:	96 e9       	ldi	r25, 0x96	; 150
    4020:	bb 27       	eor	r27, r27
    4022:	93 95       	inc	r25
    4024:	f6 95       	lsr	r31
    4026:	87 95       	ror	r24
    4028:	77 95       	ror	r23
    402a:	67 95       	ror	r22
    402c:	b7 95       	ror	r27
    402e:	f1 11       	cpse	r31, r1
    4030:	f8 cf       	rjmp	.-16     	; 0x4022 <__floatsisf+0x1c>
    4032:	fa f4       	brpl	.+62     	; 0x4072 <__floatsisf+0x6c>
    4034:	bb 0f       	add	r27, r27
    4036:	11 f4       	brne	.+4      	; 0x403c <__floatsisf+0x36>
    4038:	60 ff       	sbrs	r22, 0
    403a:	1b c0       	rjmp	.+54     	; 0x4072 <__floatsisf+0x6c>
    403c:	6f 5f       	subi	r22, 0xFF	; 255
    403e:	7f 4f       	sbci	r23, 0xFF	; 255
    4040:	8f 4f       	sbci	r24, 0xFF	; 255
    4042:	9f 4f       	sbci	r25, 0xFF	; 255
    4044:	16 c0       	rjmp	.+44     	; 0x4072 <__floatsisf+0x6c>
    4046:	88 23       	and	r24, r24
    4048:	11 f0       	breq	.+4      	; 0x404e <__floatsisf+0x48>
    404a:	96 e9       	ldi	r25, 0x96	; 150
    404c:	11 c0       	rjmp	.+34     	; 0x4070 <__floatsisf+0x6a>
    404e:	77 23       	and	r23, r23
    4050:	21 f0       	breq	.+8      	; 0x405a <__floatsisf+0x54>
    4052:	9e e8       	ldi	r25, 0x8E	; 142
    4054:	87 2f       	mov	r24, r23
    4056:	76 2f       	mov	r23, r22
    4058:	05 c0       	rjmp	.+10     	; 0x4064 <__floatsisf+0x5e>
    405a:	66 23       	and	r22, r22
    405c:	71 f0       	breq	.+28     	; 0x407a <__floatsisf+0x74>
    405e:	96 e8       	ldi	r25, 0x86	; 134
    4060:	86 2f       	mov	r24, r22
    4062:	70 e0       	ldi	r23, 0x00	; 0
    4064:	60 e0       	ldi	r22, 0x00	; 0
    4066:	2a f0       	brmi	.+10     	; 0x4072 <__floatsisf+0x6c>
    4068:	9a 95       	dec	r25
    406a:	66 0f       	add	r22, r22
    406c:	77 1f       	adc	r23, r23
    406e:	88 1f       	adc	r24, r24
    4070:	da f7       	brpl	.-10     	; 0x4068 <__floatsisf+0x62>
    4072:	88 0f       	add	r24, r24
    4074:	96 95       	lsr	r25
    4076:	87 95       	ror	r24
    4078:	97 f9       	bld	r25, 7
    407a:	08 95       	ret

0000407c <__fp_cmp>:
    407c:	99 0f       	add	r25, r25
    407e:	00 08       	sbc	r0, r0
    4080:	55 0f       	add	r21, r21
    4082:	aa 0b       	sbc	r26, r26
    4084:	e0 e8       	ldi	r30, 0x80	; 128
    4086:	fe ef       	ldi	r31, 0xFE	; 254
    4088:	16 16       	cp	r1, r22
    408a:	17 06       	cpc	r1, r23
    408c:	e8 07       	cpc	r30, r24
    408e:	f9 07       	cpc	r31, r25
    4090:	c0 f0       	brcs	.+48     	; 0x40c2 <__fp_cmp+0x46>
    4092:	12 16       	cp	r1, r18
    4094:	13 06       	cpc	r1, r19
    4096:	e4 07       	cpc	r30, r20
    4098:	f5 07       	cpc	r31, r21
    409a:	98 f0       	brcs	.+38     	; 0x40c2 <__fp_cmp+0x46>
    409c:	62 1b       	sub	r22, r18
    409e:	73 0b       	sbc	r23, r19
    40a0:	84 0b       	sbc	r24, r20
    40a2:	95 0b       	sbc	r25, r21
    40a4:	39 f4       	brne	.+14     	; 0x40b4 <__fp_cmp+0x38>
    40a6:	0a 26       	eor	r0, r26
    40a8:	61 f0       	breq	.+24     	; 0x40c2 <__fp_cmp+0x46>
    40aa:	23 2b       	or	r18, r19
    40ac:	24 2b       	or	r18, r20
    40ae:	25 2b       	or	r18, r21
    40b0:	21 f4       	brne	.+8      	; 0x40ba <__fp_cmp+0x3e>
    40b2:	08 95       	ret
    40b4:	0a 26       	eor	r0, r26
    40b6:	09 f4       	brne	.+2      	; 0x40ba <__fp_cmp+0x3e>
    40b8:	a1 40       	sbci	r26, 0x01	; 1
    40ba:	a6 95       	lsr	r26
    40bc:	8f ef       	ldi	r24, 0xFF	; 255
    40be:	81 1d       	adc	r24, r1
    40c0:	81 1d       	adc	r24, r1
    40c2:	08 95       	ret

000040c4 <__fp_inf>:
    40c4:	97 f9       	bld	r25, 7
    40c6:	9f 67       	ori	r25, 0x7F	; 127
    40c8:	80 e8       	ldi	r24, 0x80	; 128
    40ca:	70 e0       	ldi	r23, 0x00	; 0
    40cc:	60 e0       	ldi	r22, 0x00	; 0
    40ce:	08 95       	ret

000040d0 <__fp_nan>:
    40d0:	9f ef       	ldi	r25, 0xFF	; 255
    40d2:	80 ec       	ldi	r24, 0xC0	; 192
    40d4:	08 95       	ret

000040d6 <__fp_pscA>:
    40d6:	00 24       	eor	r0, r0
    40d8:	0a 94       	dec	r0
    40da:	16 16       	cp	r1, r22
    40dc:	17 06       	cpc	r1, r23
    40de:	18 06       	cpc	r1, r24
    40e0:	09 06       	cpc	r0, r25
    40e2:	08 95       	ret

000040e4 <__fp_pscB>:
    40e4:	00 24       	eor	r0, r0
    40e6:	0a 94       	dec	r0
    40e8:	12 16       	cp	r1, r18
    40ea:	13 06       	cpc	r1, r19
    40ec:	14 06       	cpc	r1, r20
    40ee:	05 06       	cpc	r0, r21
    40f0:	08 95       	ret

000040f2 <__fp_round>:
    40f2:	09 2e       	mov	r0, r25
    40f4:	03 94       	inc	r0
    40f6:	00 0c       	add	r0, r0
    40f8:	11 f4       	brne	.+4      	; 0x40fe <__fp_round+0xc>
    40fa:	88 23       	and	r24, r24
    40fc:	52 f0       	brmi	.+20     	; 0x4112 <__fp_round+0x20>
    40fe:	bb 0f       	add	r27, r27
    4100:	40 f4       	brcc	.+16     	; 0x4112 <__fp_round+0x20>
    4102:	bf 2b       	or	r27, r31
    4104:	11 f4       	brne	.+4      	; 0x410a <__fp_round+0x18>
    4106:	60 ff       	sbrs	r22, 0
    4108:	04 c0       	rjmp	.+8      	; 0x4112 <__fp_round+0x20>
    410a:	6f 5f       	subi	r22, 0xFF	; 255
    410c:	7f 4f       	sbci	r23, 0xFF	; 255
    410e:	8f 4f       	sbci	r24, 0xFF	; 255
    4110:	9f 4f       	sbci	r25, 0xFF	; 255
    4112:	08 95       	ret

00004114 <__fp_split3>:
    4114:	57 fd       	sbrc	r21, 7
    4116:	90 58       	subi	r25, 0x80	; 128
    4118:	44 0f       	add	r20, r20
    411a:	55 1f       	adc	r21, r21
    411c:	59 f0       	breq	.+22     	; 0x4134 <__fp_splitA+0x10>
    411e:	5f 3f       	cpi	r21, 0xFF	; 255
    4120:	71 f0       	breq	.+28     	; 0x413e <__fp_splitA+0x1a>
    4122:	47 95       	ror	r20

00004124 <__fp_splitA>:
    4124:	88 0f       	add	r24, r24
    4126:	97 fb       	bst	r25, 7
    4128:	99 1f       	adc	r25, r25
    412a:	61 f0       	breq	.+24     	; 0x4144 <__fp_splitA+0x20>
    412c:	9f 3f       	cpi	r25, 0xFF	; 255
    412e:	79 f0       	breq	.+30     	; 0x414e <__fp_splitA+0x2a>
    4130:	87 95       	ror	r24
    4132:	08 95       	ret
    4134:	12 16       	cp	r1, r18
    4136:	13 06       	cpc	r1, r19
    4138:	14 06       	cpc	r1, r20
    413a:	55 1f       	adc	r21, r21
    413c:	f2 cf       	rjmp	.-28     	; 0x4122 <__fp_split3+0xe>
    413e:	46 95       	lsr	r20
    4140:	f1 df       	rcall	.-30     	; 0x4124 <__fp_splitA>
    4142:	08 c0       	rjmp	.+16     	; 0x4154 <__fp_splitA+0x30>
    4144:	16 16       	cp	r1, r22
    4146:	17 06       	cpc	r1, r23
    4148:	18 06       	cpc	r1, r24
    414a:	99 1f       	adc	r25, r25
    414c:	f1 cf       	rjmp	.-30     	; 0x4130 <__fp_splitA+0xc>
    414e:	86 95       	lsr	r24
    4150:	71 05       	cpc	r23, r1
    4152:	61 05       	cpc	r22, r1
    4154:	08 94       	sec
    4156:	08 95       	ret

00004158 <__fp_zero>:
    4158:	e8 94       	clt

0000415a <__fp_szero>:
    415a:	bb 27       	eor	r27, r27
    415c:	66 27       	eor	r22, r22
    415e:	77 27       	eor	r23, r23
    4160:	cb 01       	movw	r24, r22
    4162:	97 f9       	bld	r25, 7
    4164:	08 95       	ret

00004166 <__gesf2>:
    4166:	0e 94 3e 20 	call	0x407c	; 0x407c <__fp_cmp>
    416a:	08 f4       	brcc	.+2      	; 0x416e <__gesf2+0x8>
    416c:	8f ef       	ldi	r24, 0xFF	; 255
    416e:	08 95       	ret

00004170 <__mulsf3>:
    4170:	0e 94 cb 20 	call	0x4196	; 0x4196 <__mulsf3x>
    4174:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__fp_round>
    4178:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__fp_pscA>
    417c:	38 f0       	brcs	.+14     	; 0x418c <__mulsf3+0x1c>
    417e:	0e 94 72 20 	call	0x40e4	; 0x40e4 <__fp_pscB>
    4182:	20 f0       	brcs	.+8      	; 0x418c <__mulsf3+0x1c>
    4184:	95 23       	and	r25, r21
    4186:	11 f0       	breq	.+4      	; 0x418c <__mulsf3+0x1c>
    4188:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <__fp_inf>
    418c:	0c 94 68 20 	jmp	0x40d0	; 0x40d0 <__fp_nan>
    4190:	11 24       	eor	r1, r1
    4192:	0c 94 ad 20 	jmp	0x415a	; 0x415a <__fp_szero>

00004196 <__mulsf3x>:
    4196:	0e 94 8a 20 	call	0x4114	; 0x4114 <__fp_split3>
    419a:	70 f3       	brcs	.-36     	; 0x4178 <__mulsf3+0x8>

0000419c <__mulsf3_pse>:
    419c:	95 9f       	mul	r25, r21
    419e:	c1 f3       	breq	.-16     	; 0x4190 <__mulsf3+0x20>
    41a0:	95 0f       	add	r25, r21
    41a2:	50 e0       	ldi	r21, 0x00	; 0
    41a4:	55 1f       	adc	r21, r21
    41a6:	62 9f       	mul	r22, r18
    41a8:	f0 01       	movw	r30, r0
    41aa:	72 9f       	mul	r23, r18
    41ac:	bb 27       	eor	r27, r27
    41ae:	f0 0d       	add	r31, r0
    41b0:	b1 1d       	adc	r27, r1
    41b2:	63 9f       	mul	r22, r19
    41b4:	aa 27       	eor	r26, r26
    41b6:	f0 0d       	add	r31, r0
    41b8:	b1 1d       	adc	r27, r1
    41ba:	aa 1f       	adc	r26, r26
    41bc:	64 9f       	mul	r22, r20
    41be:	66 27       	eor	r22, r22
    41c0:	b0 0d       	add	r27, r0
    41c2:	a1 1d       	adc	r26, r1
    41c4:	66 1f       	adc	r22, r22
    41c6:	82 9f       	mul	r24, r18
    41c8:	22 27       	eor	r18, r18
    41ca:	b0 0d       	add	r27, r0
    41cc:	a1 1d       	adc	r26, r1
    41ce:	62 1f       	adc	r22, r18
    41d0:	73 9f       	mul	r23, r19
    41d2:	b0 0d       	add	r27, r0
    41d4:	a1 1d       	adc	r26, r1
    41d6:	62 1f       	adc	r22, r18
    41d8:	83 9f       	mul	r24, r19
    41da:	a0 0d       	add	r26, r0
    41dc:	61 1d       	adc	r22, r1
    41de:	22 1f       	adc	r18, r18
    41e0:	74 9f       	mul	r23, r20
    41e2:	33 27       	eor	r19, r19
    41e4:	a0 0d       	add	r26, r0
    41e6:	61 1d       	adc	r22, r1
    41e8:	23 1f       	adc	r18, r19
    41ea:	84 9f       	mul	r24, r20
    41ec:	60 0d       	add	r22, r0
    41ee:	21 1d       	adc	r18, r1
    41f0:	82 2f       	mov	r24, r18
    41f2:	76 2f       	mov	r23, r22
    41f4:	6a 2f       	mov	r22, r26
    41f6:	11 24       	eor	r1, r1
    41f8:	9f 57       	subi	r25, 0x7F	; 127
    41fa:	50 40       	sbci	r21, 0x00	; 0
    41fc:	9a f0       	brmi	.+38     	; 0x4224 <__mulsf3_pse+0x88>
    41fe:	f1 f0       	breq	.+60     	; 0x423c <__mulsf3_pse+0xa0>
    4200:	88 23       	and	r24, r24
    4202:	4a f0       	brmi	.+18     	; 0x4216 <__mulsf3_pse+0x7a>
    4204:	ee 0f       	add	r30, r30
    4206:	ff 1f       	adc	r31, r31
    4208:	bb 1f       	adc	r27, r27
    420a:	66 1f       	adc	r22, r22
    420c:	77 1f       	adc	r23, r23
    420e:	88 1f       	adc	r24, r24
    4210:	91 50       	subi	r25, 0x01	; 1
    4212:	50 40       	sbci	r21, 0x00	; 0
    4214:	a9 f7       	brne	.-22     	; 0x4200 <__mulsf3_pse+0x64>
    4216:	9e 3f       	cpi	r25, 0xFE	; 254
    4218:	51 05       	cpc	r21, r1
    421a:	80 f0       	brcs	.+32     	; 0x423c <__mulsf3_pse+0xa0>
    421c:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <__fp_inf>
    4220:	0c 94 ad 20 	jmp	0x415a	; 0x415a <__fp_szero>
    4224:	5f 3f       	cpi	r21, 0xFF	; 255
    4226:	e4 f3       	brlt	.-8      	; 0x4220 <__mulsf3_pse+0x84>
    4228:	98 3e       	cpi	r25, 0xE8	; 232
    422a:	d4 f3       	brlt	.-12     	; 0x4220 <__mulsf3_pse+0x84>
    422c:	86 95       	lsr	r24
    422e:	77 95       	ror	r23
    4230:	67 95       	ror	r22
    4232:	b7 95       	ror	r27
    4234:	f7 95       	ror	r31
    4236:	e7 95       	ror	r30
    4238:	9f 5f       	subi	r25, 0xFF	; 255
    423a:	c1 f7       	brne	.-16     	; 0x422c <__mulsf3_pse+0x90>
    423c:	fe 2b       	or	r31, r30
    423e:	88 0f       	add	r24, r24
    4240:	91 1d       	adc	r25, r1
    4242:	96 95       	lsr	r25
    4244:	87 95       	ror	r24
    4246:	97 f9       	bld	r25, 7
    4248:	08 95       	ret

0000424a <__unordsf2>:
    424a:	0e 94 3e 20 	call	0x407c	; 0x407c <__fp_cmp>
    424e:	88 0b       	sbc	r24, r24
    4250:	99 0b       	sbc	r25, r25
    4252:	08 95       	ret

00004254 <__divmodhi4>:
    4254:	97 fb       	bst	r25, 7
    4256:	07 2e       	mov	r0, r23
    4258:	16 f4       	brtc	.+4      	; 0x425e <__divmodhi4+0xa>
    425a:	00 94       	com	r0
    425c:	07 d0       	rcall	.+14     	; 0x426c <__divmodhi4_neg1>
    425e:	77 fd       	sbrc	r23, 7
    4260:	09 d0       	rcall	.+18     	; 0x4274 <__divmodhi4_neg2>
    4262:	0e 94 90 21 	call	0x4320	; 0x4320 <__udivmodhi4>
    4266:	07 fc       	sbrc	r0, 7
    4268:	05 d0       	rcall	.+10     	; 0x4274 <__divmodhi4_neg2>
    426a:	3e f4       	brtc	.+14     	; 0x427a <__divmodhi4_exit>

0000426c <__divmodhi4_neg1>:
    426c:	90 95       	com	r25
    426e:	81 95       	neg	r24
    4270:	9f 4f       	sbci	r25, 0xFF	; 255
    4272:	08 95       	ret

00004274 <__divmodhi4_neg2>:
    4274:	70 95       	com	r23
    4276:	61 95       	neg	r22
    4278:	7f 4f       	sbci	r23, 0xFF	; 255

0000427a <__divmodhi4_exit>:
    427a:	08 95       	ret

0000427c <__udivmodsi4>:
    427c:	a1 e2       	ldi	r26, 0x21	; 33
    427e:	1a 2e       	mov	r1, r26
    4280:	aa 1b       	sub	r26, r26
    4282:	bb 1b       	sub	r27, r27
    4284:	fd 01       	movw	r30, r26
    4286:	0d c0       	rjmp	.+26     	; 0x42a2 <__udivmodsi4_ep>

00004288 <__udivmodsi4_loop>:
    4288:	aa 1f       	adc	r26, r26
    428a:	bb 1f       	adc	r27, r27
    428c:	ee 1f       	adc	r30, r30
    428e:	ff 1f       	adc	r31, r31
    4290:	a2 17       	cp	r26, r18
    4292:	b3 07       	cpc	r27, r19
    4294:	e4 07       	cpc	r30, r20
    4296:	f5 07       	cpc	r31, r21
    4298:	20 f0       	brcs	.+8      	; 0x42a2 <__udivmodsi4_ep>
    429a:	a2 1b       	sub	r26, r18
    429c:	b3 0b       	sbc	r27, r19
    429e:	e4 0b       	sbc	r30, r20
    42a0:	f5 0b       	sbc	r31, r21

000042a2 <__udivmodsi4_ep>:
    42a2:	66 1f       	adc	r22, r22
    42a4:	77 1f       	adc	r23, r23
    42a6:	88 1f       	adc	r24, r24
    42a8:	99 1f       	adc	r25, r25
    42aa:	1a 94       	dec	r1
    42ac:	69 f7       	brne	.-38     	; 0x4288 <__udivmodsi4_loop>
    42ae:	60 95       	com	r22
    42b0:	70 95       	com	r23
    42b2:	80 95       	com	r24
    42b4:	90 95       	com	r25
    42b6:	9b 01       	movw	r18, r22
    42b8:	ac 01       	movw	r20, r24
    42ba:	bd 01       	movw	r22, r26
    42bc:	cf 01       	movw	r24, r30
    42be:	08 95       	ret

000042c0 <__divmodsi4>:
    42c0:	05 2e       	mov	r0, r21
    42c2:	97 fb       	bst	r25, 7
    42c4:	1e f4       	brtc	.+6      	; 0x42cc <__divmodsi4+0xc>
    42c6:	00 94       	com	r0
    42c8:	0e 94 77 21 	call	0x42ee	; 0x42ee <__negsi2>
    42cc:	57 fd       	sbrc	r21, 7
    42ce:	07 d0       	rcall	.+14     	; 0x42de <__divmodsi4_neg2>
    42d0:	0e 94 3e 21 	call	0x427c	; 0x427c <__udivmodsi4>
    42d4:	07 fc       	sbrc	r0, 7
    42d6:	03 d0       	rcall	.+6      	; 0x42de <__divmodsi4_neg2>
    42d8:	4e f4       	brtc	.+18     	; 0x42ec <__divmodsi4_exit>
    42da:	0c 94 77 21 	jmp	0x42ee	; 0x42ee <__negsi2>

000042de <__divmodsi4_neg2>:
    42de:	50 95       	com	r21
    42e0:	40 95       	com	r20
    42e2:	30 95       	com	r19
    42e4:	21 95       	neg	r18
    42e6:	3f 4f       	sbci	r19, 0xFF	; 255
    42e8:	4f 4f       	sbci	r20, 0xFF	; 255
    42ea:	5f 4f       	sbci	r21, 0xFF	; 255

000042ec <__divmodsi4_exit>:
    42ec:	08 95       	ret

000042ee <__negsi2>:
    42ee:	90 95       	com	r25
    42f0:	80 95       	com	r24
    42f2:	70 95       	com	r23
    42f4:	61 95       	neg	r22
    42f6:	7f 4f       	sbci	r23, 0xFF	; 255
    42f8:	8f 4f       	sbci	r24, 0xFF	; 255
    42fa:	9f 4f       	sbci	r25, 0xFF	; 255
    42fc:	08 95       	ret

000042fe <__tablejump2__>:
    42fe:	ee 0f       	add	r30, r30
    4300:	ff 1f       	adc	r31, r31
    4302:	05 90       	lpm	r0, Z+
    4304:	f4 91       	lpm	r31, Z
    4306:	e0 2d       	mov	r30, r0
    4308:	09 94       	ijmp

0000430a <__muluhisi3>:
    430a:	0e 94 a4 21 	call	0x4348	; 0x4348 <__umulhisi3>
    430e:	a5 9f       	mul	r26, r21
    4310:	90 0d       	add	r25, r0
    4312:	b4 9f       	mul	r27, r20
    4314:	90 0d       	add	r25, r0
    4316:	a4 9f       	mul	r26, r20
    4318:	80 0d       	add	r24, r0
    431a:	91 1d       	adc	r25, r1
    431c:	11 24       	eor	r1, r1
    431e:	08 95       	ret

00004320 <__udivmodhi4>:
    4320:	aa 1b       	sub	r26, r26
    4322:	bb 1b       	sub	r27, r27
    4324:	51 e1       	ldi	r21, 0x11	; 17
    4326:	07 c0       	rjmp	.+14     	; 0x4336 <__udivmodhi4_ep>

00004328 <__udivmodhi4_loop>:
    4328:	aa 1f       	adc	r26, r26
    432a:	bb 1f       	adc	r27, r27
    432c:	a6 17       	cp	r26, r22
    432e:	b7 07       	cpc	r27, r23
    4330:	10 f0       	brcs	.+4      	; 0x4336 <__udivmodhi4_ep>
    4332:	a6 1b       	sub	r26, r22
    4334:	b7 0b       	sbc	r27, r23

00004336 <__udivmodhi4_ep>:
    4336:	88 1f       	adc	r24, r24
    4338:	99 1f       	adc	r25, r25
    433a:	5a 95       	dec	r21
    433c:	a9 f7       	brne	.-22     	; 0x4328 <__udivmodhi4_loop>
    433e:	80 95       	com	r24
    4340:	90 95       	com	r25
    4342:	bc 01       	movw	r22, r24
    4344:	cd 01       	movw	r24, r26
    4346:	08 95       	ret

00004348 <__umulhisi3>:
    4348:	a2 9f       	mul	r26, r18
    434a:	b0 01       	movw	r22, r0
    434c:	b3 9f       	mul	r27, r19
    434e:	c0 01       	movw	r24, r0
    4350:	a3 9f       	mul	r26, r19
    4352:	70 0d       	add	r23, r0
    4354:	81 1d       	adc	r24, r1
    4356:	11 24       	eor	r1, r1
    4358:	91 1d       	adc	r25, r1
    435a:	b2 9f       	mul	r27, r18
    435c:	70 0d       	add	r23, r0
    435e:	81 1d       	adc	r24, r1
    4360:	11 24       	eor	r1, r1
    4362:	91 1d       	adc	r25, r1
    4364:	08 95       	ret

00004366 <random_r>:
    4366:	8f 92       	push	r8
    4368:	9f 92       	push	r9
    436a:	af 92       	push	r10
    436c:	bf 92       	push	r11
    436e:	cf 92       	push	r12
    4370:	df 92       	push	r13
    4372:	ef 92       	push	r14
    4374:	ff 92       	push	r15
    4376:	cf 93       	push	r28
    4378:	df 93       	push	r29
    437a:	ec 01       	movw	r28, r24
    437c:	68 81       	ld	r22, Y
    437e:	79 81       	ldd	r23, Y+1	; 0x01
    4380:	8a 81       	ldd	r24, Y+2	; 0x02
    4382:	9b 81       	ldd	r25, Y+3	; 0x03
    4384:	61 15       	cp	r22, r1
    4386:	71 05       	cpc	r23, r1
    4388:	81 05       	cpc	r24, r1
    438a:	91 05       	cpc	r25, r1
    438c:	21 f4       	brne	.+8      	; 0x4396 <random_r+0x30>
    438e:	64 e2       	ldi	r22, 0x24	; 36
    4390:	79 ed       	ldi	r23, 0xD9	; 217
    4392:	8b e5       	ldi	r24, 0x5B	; 91
    4394:	97 e0       	ldi	r25, 0x07	; 7
    4396:	2d e1       	ldi	r18, 0x1D	; 29
    4398:	33 ef       	ldi	r19, 0xF3	; 243
    439a:	41 e0       	ldi	r20, 0x01	; 1
    439c:	50 e0       	ldi	r21, 0x00	; 0
    439e:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    43a2:	49 01       	movw	r8, r18
    43a4:	5a 01       	movw	r10, r20
    43a6:	9b 01       	movw	r18, r22
    43a8:	ac 01       	movw	r20, r24
    43aa:	a7 ea       	ldi	r26, 0xA7	; 167
    43ac:	b1 e4       	ldi	r27, 0x41	; 65
    43ae:	0e 94 85 21 	call	0x430a	; 0x430a <__muluhisi3>
    43b2:	6b 01       	movw	r12, r22
    43b4:	7c 01       	movw	r14, r24
    43b6:	ac ee       	ldi	r26, 0xEC	; 236
    43b8:	b4 ef       	ldi	r27, 0xF4	; 244
    43ba:	a5 01       	movw	r20, r10
    43bc:	94 01       	movw	r18, r8
    43be:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__mulohisi3>
    43c2:	dc 01       	movw	r26, r24
    43c4:	cb 01       	movw	r24, r22
    43c6:	8c 0d       	add	r24, r12
    43c8:	9d 1d       	adc	r25, r13
    43ca:	ae 1d       	adc	r26, r14
    43cc:	bf 1d       	adc	r27, r15
    43ce:	b7 ff       	sbrs	r27, 7
    43d0:	03 c0       	rjmp	.+6      	; 0x43d8 <random_r+0x72>
    43d2:	01 97       	sbiw	r24, 0x01	; 1
    43d4:	a1 09       	sbc	r26, r1
    43d6:	b0 48       	sbci	r27, 0x80	; 128
    43d8:	88 83       	st	Y, r24
    43da:	99 83       	std	Y+1, r25	; 0x01
    43dc:	aa 83       	std	Y+2, r26	; 0x02
    43de:	bb 83       	std	Y+3, r27	; 0x03
    43e0:	bc 01       	movw	r22, r24
    43e2:	cd 01       	movw	r24, r26
    43e4:	9f 77       	andi	r25, 0x7F	; 127
    43e6:	df 91       	pop	r29
    43e8:	cf 91       	pop	r28
    43ea:	ff 90       	pop	r15
    43ec:	ef 90       	pop	r14
    43ee:	df 90       	pop	r13
    43f0:	cf 90       	pop	r12
    43f2:	bf 90       	pop	r11
    43f4:	af 90       	pop	r10
    43f6:	9f 90       	pop	r9
    43f8:	8f 90       	pop	r8
    43fa:	08 95       	ret

000043fc <random>:
    43fc:	8f 92       	push	r8
    43fe:	9f 92       	push	r9
    4400:	af 92       	push	r10
    4402:	bf 92       	push	r11
    4404:	cf 92       	push	r12
    4406:	df 92       	push	r13
    4408:	ef 92       	push	r14
    440a:	ff 92       	push	r15
    440c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    4410:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    4414:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    4418:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    441c:	61 15       	cp	r22, r1
    441e:	71 05       	cpc	r23, r1
    4420:	81 05       	cpc	r24, r1
    4422:	91 05       	cpc	r25, r1
    4424:	21 f4       	brne	.+8      	; 0x442e <random+0x32>
    4426:	64 e2       	ldi	r22, 0x24	; 36
    4428:	79 ed       	ldi	r23, 0xD9	; 217
    442a:	8b e5       	ldi	r24, 0x5B	; 91
    442c:	97 e0       	ldi	r25, 0x07	; 7
    442e:	2d e1       	ldi	r18, 0x1D	; 29
    4430:	33 ef       	ldi	r19, 0xF3	; 243
    4432:	41 e0       	ldi	r20, 0x01	; 1
    4434:	50 e0       	ldi	r21, 0x00	; 0
    4436:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__divmodsi4>
    443a:	49 01       	movw	r8, r18
    443c:	5a 01       	movw	r10, r20
    443e:	9b 01       	movw	r18, r22
    4440:	ac 01       	movw	r20, r24
    4442:	a7 ea       	ldi	r26, 0xA7	; 167
    4444:	b1 e4       	ldi	r27, 0x41	; 65
    4446:	0e 94 85 21 	call	0x430a	; 0x430a <__muluhisi3>
    444a:	6b 01       	movw	r12, r22
    444c:	7c 01       	movw	r14, r24
    444e:	ac ee       	ldi	r26, 0xEC	; 236
    4450:	b4 ef       	ldi	r27, 0xF4	; 244
    4452:	a5 01       	movw	r20, r10
    4454:	94 01       	movw	r18, r8
    4456:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__mulohisi3>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	8c 0d       	add	r24, r12
    4460:	9d 1d       	adc	r25, r13
    4462:	ae 1d       	adc	r26, r14
    4464:	bf 1d       	adc	r27, r15
    4466:	b7 ff       	sbrs	r27, 7
    4468:	03 c0       	rjmp	.+6      	; 0x4470 <random+0x74>
    446a:	01 97       	sbiw	r24, 0x01	; 1
    446c:	a1 09       	sbc	r26, r1
    446e:	b0 48       	sbci	r27, 0x80	; 128
    4470:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    4474:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    4478:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    447c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    4480:	bc 01       	movw	r22, r24
    4482:	cd 01       	movw	r24, r26
    4484:	9f 77       	andi	r25, 0x7F	; 127
    4486:	ff 90       	pop	r15
    4488:	ef 90       	pop	r14
    448a:	df 90       	pop	r13
    448c:	cf 90       	pop	r12
    448e:	bf 90       	pop	r11
    4490:	af 90       	pop	r10
    4492:	9f 90       	pop	r9
    4494:	8f 90       	pop	r8
    4496:	08 95       	ret

00004498 <srandom>:
    4498:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    449c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    44a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    44a4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    44a8:	08 95       	ret

000044aa <eeprom_read_byte>:
    44aa:	f9 99       	sbic	0x1f, 1	; 31
    44ac:	fe cf       	rjmp	.-4      	; 0x44aa <eeprom_read_byte>
    44ae:	92 bd       	out	0x22, r25	; 34
    44b0:	81 bd       	out	0x21, r24	; 33
    44b2:	f8 9a       	sbi	0x1f, 0	; 31
    44b4:	99 27       	eor	r25, r25
    44b6:	80 b5       	in	r24, 0x20	; 32
    44b8:	08 95       	ret

000044ba <eeprom_write_byte>:
    44ba:	26 2f       	mov	r18, r22

000044bc <eeprom_write_r18>:
    44bc:	f9 99       	sbic	0x1f, 1	; 31
    44be:	fe cf       	rjmp	.-4      	; 0x44bc <eeprom_write_r18>
    44c0:	1f ba       	out	0x1f, r1	; 31
    44c2:	92 bd       	out	0x22, r25	; 34
    44c4:	81 bd       	out	0x21, r24	; 33
    44c6:	20 bd       	out	0x20, r18	; 32
    44c8:	0f b6       	in	r0, 0x3f	; 63
    44ca:	f8 94       	cli
    44cc:	fa 9a       	sbi	0x1f, 2	; 31
    44ce:	f9 9a       	sbi	0x1f, 1	; 31
    44d0:	0f be       	out	0x3f, r0	; 63
    44d2:	01 96       	adiw	r24, 0x01	; 1
    44d4:	08 95       	ret

000044d6 <__mulshisi3>:
    44d6:	b7 ff       	sbrs	r27, 7
    44d8:	0c 94 85 21 	jmp	0x430a	; 0x430a <__muluhisi3>

000044dc <__mulohisi3>:
    44dc:	0e 94 85 21 	call	0x430a	; 0x430a <__muluhisi3>
    44e0:	82 1b       	sub	r24, r18
    44e2:	93 0b       	sbc	r25, r19
    44e4:	08 95       	ret

000044e6 <__do_global_dtors>:
    44e6:	10 e0       	ldi	r17, 0x00	; 0
    44e8:	cc ef       	ldi	r28, 0xFC	; 252
    44ea:	d0 e0       	ldi	r29, 0x00	; 0
    44ec:	04 c0       	rjmp	.+8      	; 0x44f6 <__do_global_dtors+0x10>
    44ee:	fe 01       	movw	r30, r28
    44f0:	0e 94 7f 21 	call	0x42fe	; 0x42fe <__tablejump2__>
    44f4:	21 96       	adiw	r28, 0x01	; 1
    44f6:	cd 3f       	cpi	r28, 0xFD	; 253
    44f8:	d1 07       	cpc	r29, r17
    44fa:	c9 f7       	brne	.-14     	; 0x44ee <__do_global_dtors+0x8>
    44fc:	f8 94       	cli

000044fe <__stop_program>:
    44fe:	ff cf       	rjmp	.-2      	; 0x44fe <__stop_program>
