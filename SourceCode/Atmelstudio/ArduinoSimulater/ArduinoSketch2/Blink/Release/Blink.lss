
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00002bbc  00002c50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000287  008001b0  008001b0  00002d00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000910  00000000  00000000  00002d70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000162ed  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b8b  00000000  00000000  0001996d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000551b  00000000  00000000  0001e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a58  00000000  00000000  00023a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003fd8  00000000  00000000  0002546c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008ae7  00000000  00000000  00029444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000938  00000000  00000000  00031f2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__ctors_end>
       4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
       8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
       c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      10:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      14:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      18:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      1c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      20:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      24:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      28:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__vector_10>
      2c:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__vector_11>
      30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      34:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      40:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      48:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      4c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      50:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      54:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      5c:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__vector_23>
      60:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      64:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__vector_25>
      68:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__vector_26>
      6c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      70:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      74:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      78:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      7c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      80:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__vector_32>
      84:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      88:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      8c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      90:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_36>
      94:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      98:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      9c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a0:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      ac:	8e 11       	cpse	r24, r14
      ae:	93 11       	cpse	r25, r3
      b0:	98 11       	cpse	r25, r8
      b2:	a2 11       	cpse	r26, r2
      b4:	ac 11       	cpse	r26, r12
      b6:	f6 11       	cpse	r31, r6
      b8:	f6 11       	cpse	r31, r6
      ba:	f6 11       	cpse	r31, r6
      bc:	b6 11       	cpse	r27, r6
      be:	c0 11       	cpse	r28, r0
      c0:	ca 11       	cpse	r28, r10
      c2:	d4 11       	cpse	r29, r4
      c4:	e1 11       	cpse	r30, r1
      c6:	f6 11       	cpse	r31, r6
      c8:	e9 11       	cpse	r30, r9
      ca:	17 12       	cpse	r1, r23
      cc:	1a 12       	cpse	r1, r26
      ce:	09 12       	cpse	r0, r25
      d0:	0d 12       	cpse	r0, r29
      d2:	13 12       	cpse	r1, r19
      d4:	3b 12       	cpse	r3, r27
      d6:	3b 12       	cpse	r3, r27
      d8:	3b 12       	cpse	r3, r27
      da:	1e 12       	cpse	r1, r30
      dc:	22 12       	cpse	r2, r18
      de:	26 12       	cpse	r2, r22
      e0:	2c 12       	cpse	r2, r28
      e2:	30 12       	cpse	r3, r16
      e4:	3b 12       	cpse	r3, r27
      e6:	36 12       	cpse	r3, r22

000000e8 <__trampolines_end>:
      e8:	08 0b       	sbc	r16, r24
      ea:	00 02       	muls	r16, r16
      ec:	02 02       	muls	r16, r18
      ee:	01 00       	.word	0x0001	; ????
      f0:	09 04       	cpc	r0, r9
      f2:	00 00       	nop
      f4:	01 02       	muls	r16, r17
      f6:	02 00       	.word	0x0002	; ????
      f8:	00 05       	cpc	r16, r0
      fa:	24 00       	.word	0x0024	; ????
      fc:	10 01       	movw	r2, r0
      fe:	05 24       	eor	r0, r5
     100:	01 01       	movw	r0, r2
     102:	01 04       	cpc	r0, r1
     104:	24 02       	muls	r18, r20
     106:	06 05       	cpc	r16, r6
     108:	24 06       	cpc	r2, r20
     10a:	00 01       	movw	r0, r0
     10c:	07 05       	cpc	r16, r7
     10e:	81 03       	fmuls	r16, r17
     110:	10 00       	.word	0x0010	; ????
     112:	40 09       	sbc	r20, r0
     114:	04 01       	movw	r0, r8
     116:	00 02       	muls	r16, r16
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	07 05       	cpc	r16, r7
     11e:	02 02       	muls	r16, r18
     120:	40 00       	.word	0x0040	; ????
     122:	00 07       	cpc	r16, r16
     124:	05 83       	std	Z+5, r16	; 0x05
     126:	02 40       	sbci	r16, 0x02	; 2
	...

0000012a <_ZL21tone_pin_to_timer_PGM>:
     12a:	03                                                  .

0000012b <USB_DeviceDescriptorIAD>:
     12b:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
     13b:	03 01                                               ..

0000013d <STRING_MANUFACTURER>:
     13d:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

00000149 <STRING_PRODUCT>:
     149:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

0000015a <STRING_LANGUAGE>:
     15a:	04 03 09 04                                         ....

0000015e <analog_pin_to_channel_PGM>:
     15e:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

0000016a <digital_pin_to_timer_PGM>:
     16a:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000189 <digital_pin_to_bit_mask_PGM>:
     189:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     199:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

000001a8 <digital_pin_to_port_PGM>:
     1a8:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     1b8:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

000001c7 <port_to_input_PGM>:
     1c7:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

000001d5 <port_to_output_PGM>:
     1d5:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

000001e3 <port_to_mode_PGM>:
     1e3:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00 00        ....$.'.*.-.0..

000001f2 <__ctors_start>:
     1f2:	ec 04       	cpc	r14, r12
     1f4:	f0 04       	cpc	r15, r0
     1f6:	01 06       	cpc	r0, r17
     1f8:	b2 07       	cpc	r27, r18

000001fa <__ctors_end>:
     1fa:	11 24       	eor	r1, r1
     1fc:	1f be       	out	0x3f, r1	; 63
     1fe:	cf ef       	ldi	r28, 0xFF	; 255
     200:	da e0       	ldi	r29, 0x0A	; 10
     202:	de bf       	out	0x3e, r29	; 62
     204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_copy_data>:
     206:	11 e0       	ldi	r17, 0x01	; 1
     208:	a0 e0       	ldi	r26, 0x00	; 0
     20a:	b1 e0       	ldi	r27, 0x01	; 1
     20c:	ec eb       	ldi	r30, 0xBC	; 188
     20e:	fb e2       	ldi	r31, 0x2B	; 43
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x10>
     212:	05 90       	lpm	r0, Z+
     214:	0d 92       	st	X+, r0
     216:	a0 3b       	cpi	r26, 0xB0	; 176
     218:	b1 07       	cpc	r27, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0xc>

0000021c <__do_clear_bss>:
     21c:	24 e0       	ldi	r18, 0x04	; 4
     21e:	a0 eb       	ldi	r26, 0xB0	; 176
     220:	b1 e0       	ldi	r27, 0x01	; 1
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
     226:	a7 33       	cpi	r26, 0x37	; 55
     228:	b2 07       	cpc	r27, r18
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>

0000022c <__do_global_ctors>:
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	cd ef       	ldi	r28, 0xFD	; 253
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	04 c0       	rjmp	.+8      	; 0x23c <__do_global_ctors+0x10>
     234:	21 97       	sbiw	r28, 0x01	; 1
     236:	fe 01       	movw	r30, r28
     238:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__tablejump2__>
     23c:	c9 3f       	cpi	r28, 0xF9	; 249
     23e:	d1 07       	cpc	r29, r17
     240:	c9 f7       	brne	.-14     	; 0x234 <__do_global_ctors+0x8>
     242:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <main>
     246:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <_exit>

0000024a <__bad_interrupt>:
     24a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024e <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     24e:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     250:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     252:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     254:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     256:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     258:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     25a:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
     25c:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     25e:	05 c0       	rjmp	.+10     	; 0x26a <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     260:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     262:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     264:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     266:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
     268:	61 f1       	breq	.+88     	; 0x2c2 <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     26a:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     26c:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     26e:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
     270:	b9 f3       	breq	.-18     	; 0x260 <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
     272:	05 c0       	rjmp	.+10     	; 0x27e <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     274:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     276:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     278:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     27a:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
     27c:	11 f1       	breq	.+68     	; 0x2c2 <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     27e:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     280:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     282:	94 13       	cpse	r25, r20
    rjmp .L7   ;
     284:	f7 cf       	rjmp	.-18     	; 0x274 <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     286:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
     288:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
     28a:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
     28c:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
     28e:	0a c0       	rjmp	.+20     	; 0x2a4 <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     290:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
     292:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
     294:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
     296:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
     298:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     29a:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
     29c:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
     29e:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
     2a0:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
     2a2:	79 f0       	breq	.+30     	; 0x2c2 <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     2a4:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     2a6:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     2a8:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
     2aa:	91 f3       	breq	.-28     	; 0x290 <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     2ac:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     2ae:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     2b0:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     2b2:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     2b4:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
     2b6:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
     2b8:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
     2ba:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
     2bc:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
     2be:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
     2c0:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     2c2:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     2c4:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     2c6:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     2c8:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     2ca:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
     2cc:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
     2ce:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
     2d0:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
     2d2:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
     2d4:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
     2d6:	08 95       	ret

000002d8 <_Z7_noTonev>:
extern EXdata	FPCEXcode;
extern EXDuedata DUEdata;

void _noTone(void)
{
	noTone(IN_pin5);
     2d8:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <FPCEXcode+0x2>
     2dc:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <_Z6noToneh>

000002e0 <_Z9_shiftOutv>:
Serial.write(&TPCEXcode.ByteData[0],8);
}

void _shiftOut(void)
{
shiftOut(IN_pin5,IN_clock3,IN_order4,IN_data6);
     2e0:	e9 eb       	ldi	r30, 0xB9	; 185
     2e2:	f1 e0       	ldi	r31, 0x01	; 1
     2e4:	23 81       	ldd	r18, Z+3	; 0x03
     2e6:	47 81       	ldd	r20, Z+7	; 0x07
     2e8:	66 81       	ldd	r22, Z+6	; 0x06
     2ea:	82 81       	ldd	r24, Z+2	; 0x02
     2ec:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <shiftOut>

000002f0 <_Z5_tonev>:
}

void _tone(void)
{	
	tone(IN_pin5,IN_value6);
     2f0:	e9 eb       	ldi	r30, 0xB9	; 185
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	63 81       	ldd	r22, Z+3	; 0x03
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	a9 01       	movw	r20, r18
     2fe:	82 81       	ldd	r24, Z+2	; 0x02
     300:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <_Z4tonehjm>

00000304 <_Z8_pulseInv>:
{
	noTone(IN_pin5);
}
void _pulseIn(void)
{
	if(IN_ULONG>0)
     304:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <FPCEXcode+0x4>
     308:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <FPCEXcode+0x5>
     30c:	40 91 bf 01 	lds	r20, 0x01BF	; 0x8001bf <FPCEXcode+0x6>
     310:	50 91 c0 01 	lds	r21, 0x01C0	; 0x8001c0 <FPCEXcode+0x7>
     314:	21 15       	cp	r18, r1
     316:	31 05       	cpc	r19, r1
     318:	41 05       	cpc	r20, r1
     31a:	51 05       	cpc	r21, r1
     31c:	21 f4       	brne	.+8      	; 0x326 <_Z8_pulseInv+0x22>
	OUT_ULONG=pulseIn(IN_pin5,IN_value6,IN_ULONG);
	else
	OUT_ULONG=pulseIn(IN_pin5,IN_value6);
     31e:	20 e4       	ldi	r18, 0x40	; 64
     320:	32 e4       	ldi	r19, 0x42	; 66
     322:	4f e0       	ldi	r20, 0x0F	; 15
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	60 91 bc 01 	lds	r22, 0x01BC	; 0x8001bc <FPCEXcode+0x3>
     32a:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <FPCEXcode+0x2>
     32e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <pulseIn>
     332:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <TPCEXcode+0x4>
     336:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <TPCEXcode+0x5>
     33a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <TPCEXcode+0x6>
     33e:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <TPCEXcode+0x7>
	Serial.write(&TPCEXcode.ByteData[0],8);
     342:	48 e0       	ldi	r20, 0x08	; 8
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	61 ec       	ldi	r22, 0xC1	; 193
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	8e e0       	ldi	r24, 0x0E	; 14
     34c:	93 e0       	ldi	r25, 0x03	; 3
     34e:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_ZN7Serial_5writeEPKhj>

00000352 <_Z12_pulseInLongv>:
}

void _pulseInLong(void)
{
	if(IN_ULONG>0)
     352:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <FPCEXcode+0x4>
     356:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <FPCEXcode+0x5>
     35a:	40 91 bf 01 	lds	r20, 0x01BF	; 0x8001bf <FPCEXcode+0x6>
     35e:	50 91 c0 01 	lds	r21, 0x01C0	; 0x8001c0 <FPCEXcode+0x7>
     362:	21 15       	cp	r18, r1
     364:	31 05       	cpc	r19, r1
     366:	41 05       	cpc	r20, r1
     368:	51 05       	cpc	r21, r1
     36a:	21 f4       	brne	.+8      	; 0x374 <_Z12_pulseInLongv+0x22>
	OUT_ULONG=pulseInLong(IN_pin5,IN_value6,IN_ULONG);
	else
	OUT_ULONG=pulseInLong(IN_pin5,IN_value6);
     36c:	20 e4       	ldi	r18, 0x40	; 64
     36e:	32 e4       	ldi	r19, 0x42	; 66
     370:	4f e0       	ldi	r20, 0x0F	; 15
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	60 91 bc 01 	lds	r22, 0x01BC	; 0x8001bc <FPCEXcode+0x3>
     378:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <FPCEXcode+0x2>
     37c:	0e 94 02 13 	call	0x2604	; 0x2604 <pulseInLong>
     380:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <TPCEXcode+0x4>
     384:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <TPCEXcode+0x5>
     388:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <TPCEXcode+0x6>
     38c:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <TPCEXcode+0x7>
	Serial.write(&TPCEXcode.ByteData[0],8);
     390:	48 e0       	ldi	r20, 0x08	; 8
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	61 ec       	ldi	r22, 0xC1	; 193
     396:	71 e0       	ldi	r23, 0x01	; 1
     398:	8e e0       	ldi	r24, 0x0E	; 14
     39a:	93 e0       	ldi	r25, 0x03	; 3
     39c:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_ZN7Serial_5writeEPKhj>

000003a0 <_Z8_shiftInv>:
}

void _shiftIn(void)
{
OUT_UBYTE=shiftIn(IN_pin5,IN_clock3,IN_order4);
     3a0:	e9 eb       	ldi	r30, 0xB9	; 185
     3a2:	f1 e0       	ldi	r31, 0x01	; 1
     3a4:	47 81       	ldd	r20, Z+7	; 0x07
     3a6:	66 81       	ldd	r22, Z+6	; 0x06
     3a8:	82 81       	ldd	r24, Z+2	; 0x02
     3aa:	0e 94 87 13 	call	0x270e	; 0x270e <shiftIn>
     3ae:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <TPCEXcode+0x4>
Serial.write(&TPCEXcode.ByteData[0],8);
     3b2:	48 e0       	ldi	r20, 0x08	; 8
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	61 ec       	ldi	r22, 0xC1	; 193
     3b8:	71 e0       	ldi	r23, 0x01	; 1
     3ba:	8e e0       	ldi	r24, 0x0E	; 14
     3bc:	93 e0       	ldi	r25, 0x03	; 3
     3be:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_ZN7Serial_5writeEPKhj>

000003c2 <_Z13ReceivingDatav>:
	}
	return 0;
}

byte ReceivingData(void)
{
     3c2:	cf 92       	push	r12
     3c4:	df 92       	push	r13
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
int readoffset=0;
int loop=0;
int ca=Serial.available();
     3d2:	8e e0       	ldi	r24, 0x0E	; 14
     3d4:	93 e0       	ldi	r25, 0x03	; 3
     3d6:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN7Serial_9availableEv>
     3da:	6c 01       	movw	r12, r24
int recode=ca;
if(ca > 0)
     3dc:	18 16       	cp	r1, r24
     3de:	19 06       	cpc	r1, r25
     3e0:	0c f0       	brlt	.+2      	; 0x3e4 <_Z13ReceivingDatav+0x22>
     3e2:	45 c0       	rjmp	.+138    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>

  float parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR);
  // float version of parseInt

  size_t readBytes( char *buffer, size_t length); // read chars from stream into buffer
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }
     3e4:	48 e0       	ldi	r20, 0x08	; 8
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	69 eb       	ldi	r22, 0xB9	; 185
     3ea:	71 e0       	ldi	r23, 0x01	; 1
     3ec:	8e e0       	ldi	r24, 0x0E	; 14
     3ee:	93 e0       	ldi	r25, 0x03	; 3
     3f0:	0e 94 4d 08 	call	0x109a	; 0x109a <_ZN6Stream9readBytesEPcj>
	{Serial.readBytes(&FPCEXcode.ByteData[0],8);	//must do it
 	loop = FPCEXcode.ST.FunctionGroup>>4;
     3f4:	c0 91 b9 01 	lds	r28, 0x01B9	; 0x8001b9 <FPCEXcode>
     3f8:	d0 e0       	ldi	r29, 0x00	; 0
     3fa:	94 e0       	ldi	r25, 0x04	; 4
     3fc:	d5 95       	asr	r29
     3fe:	c7 95       	ror	r28
     400:	9a 95       	dec	r25
     402:	e1 f7       	brne	.-8      	; 0x3fc <_Z13ReceivingDatav+0x3a>
	if(loop>=2)	
     404:	c2 30       	cpi	r28, 0x02	; 2
     406:	d1 05       	cpc	r29, r1
     408:	94 f1       	brlt	.+100    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		{do	{ca=Serial.available();				
     40a:	8e e0       	ldi	r24, 0x0E	; 14
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN7Serial_9availableEv>
				if(ca>0)
     412:	18 16       	cp	r1, r24
     414:	19 06       	cpc	r1, r25
     416:	cc f7       	brge	.-14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
				{recode=recode+ca;
     418:	c8 0e       	add	r12, r24
     41a:	d9 1e       	adc	r13, r25
     41c:	48 e0       	ldi	r20, 0x08	; 8
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	61 eb       	ldi	r22, 0xB1	; 177
     422:	71 e0       	ldi	r23, 0x01	; 1
     424:	8e e0       	ldi	r24, 0x0E	; 14
     426:	93 e0       	ldi	r25, 0x03	; 3
     428:	0e 94 4d 08 	call	0x109a	; 0x109a <_ZN6Stream9readBytesEPcj>
				Serial.readBytes(&DUEdata.ByteData[0],8);
					break;
				}
			}while(ca<=0);			
		}
	if(loop>=6)
     42c:	c6 30       	cpi	r28, 0x06	; 6
     42e:	d1 05       	cpc	r29, r1
     430:	f4 f0       	brlt	.+60     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		{
		do	{ca=Serial.available();
     432:	8e e0       	ldi	r24, 0x0E	; 14
     434:	93 e0       	ldi	r25, 0x03	; 3
     436:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN7Serial_9availableEv>
			}while(ca<=0);
     43a:	18 16       	cp	r1, r24
     43c:	19 06       	cpc	r1, r25
     43e:	cc f7       	brge	.-14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		if(ca>0)
			{recode=recode+ca;
     440:	c8 0e       	add	r12, r24
     442:	d9 1e       	adc	r13, r25
     444:	89 ec       	ldi	r24, 0xC9	; 201
     446:	e8 2e       	mov	r14, r24
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	f8 2e       	mov	r15, r24
			for(int count=1;count<loop;count++)
     44c:	01 e0       	ldi	r16, 0x01	; 1
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	48 e0       	ldi	r20, 0x08	; 8
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	b7 01       	movw	r22, r14
     456:	8e e0       	ldi	r24, 0x0E	; 14
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	0e 94 4d 08 	call	0x109a	; 0x109a <_ZN6Stream9readBytesEPcj>
     45e:	0f 5f       	subi	r16, 0xFF	; 255
     460:	1f 4f       	sbci	r17, 0xFF	; 255
     462:	88 e0       	ldi	r24, 0x08	; 8
     464:	e8 0e       	add	r14, r24
     466:	f1 1c       	adc	r15, r1
     468:	c0 17       	cp	r28, r16
     46a:	d1 07       	cpc	r29, r17
     46c:	89 f7       	brne	.-30     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
				}
			}			
		}
	}
return recode;
}
     46e:	8c 2d       	mov	r24, r12
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	df 90       	pop	r13
     47e:	cf 90       	pop	r12
     480:	08 95       	ret

00000482 <_Z7PinModev>:
#define		FPC_MIN_32	DUEdata.ST.COMB[1].UUINT32
*/
			//VerifyReturn=FunctionType;
void PinMode(void)
{
	pinMode(IN_pin5,IN_mode6);
     482:	e9 eb       	ldi	r30, 0xB9	; 185
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	63 81       	ldd	r22, Z+3	; 0x03
     488:	82 81       	ldd	r24, Z+2	; 0x02
     48a:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <pinMode>

0000048e <_Z7IOWritev>:
	OUT_UBYTE = digitalRead(IN_pin5);
	Serial.write(&TPCEXcode.ByteData[0],8);
}
void IOWrite(void)
{
	digitalWrite(IN_pin5,IN_mode6);
     48e:	e9 eb       	ldi	r30, 0xB9	; 185
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	63 81       	ldd	r22, Z+3	; 0x03
     494:	82 81       	ldd	r24, Z+2	; 0x02
     496:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <digitalWrite>

0000049a <_Z6IOReadv>:
{
	pinMode(IN_pin5,IN_mode6);
}
void IORead(void)
{	
	OUT_UBYTE = digitalRead(IN_pin5);
     49a:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <FPCEXcode+0x2>
     49e:	0e 94 a7 12 	call	0x254e	; 0x254e <digitalRead>
     4a2:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <TPCEXcode+0x4>
	Serial.write(&TPCEXcode.ByteData[0],8);
     4a6:	48 e0       	ldi	r20, 0x08	; 8
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	61 ec       	ldi	r22, 0xC1	; 193
     4ac:	71 e0       	ldi	r23, 0x01	; 1
     4ae:	8e e0       	ldi	r24, 0x0E	; 14
     4b0:	93 e0       	ldi	r25, 0x03	; 3
     4b2:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_ZN7Serial_5writeEPKhj>

000004b6 <_Z10AnalogReadv>:
{
	digitalWrite(IN_pin5,IN_mode6);
}
void AnalogRead(void)
{
	OUT_UBYTE = analogRead(IN_pin5);
     4b6:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <FPCEXcode+0x2>
     4ba:	0e 94 36 11 	call	0x226c	; 0x226c <analogRead>
     4be:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <TPCEXcode+0x4>
	Serial.write(&TPCEXcode.ByteData[0],8);
     4c2:	48 e0       	ldi	r20, 0x08	; 8
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	61 ec       	ldi	r22, 0xC1	; 193
     4c8:	71 e0       	ldi	r23, 0x01	; 1
     4ca:	8e e0       	ldi	r24, 0x0E	; 14
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_ZN7Serial_5writeEPKhj>

000004d2 <_Z11AnalogWritev>:
}

void AnalogWrite(void)
{
	analogWrite(IN_pin5,IN_UBYTE4);
     4d2:	e9 eb       	ldi	r30, 0xB9	; 185
     4d4:	f1 e0       	ldi	r31, 0x01	; 1
     4d6:	67 81       	ldd	r22, Z+7	; 0x07
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	82 81       	ldd	r24, Z+2	; 0x02
     4dc:	0e 94 67 11 	call	0x22ce	; 0x22ce <analogWrite>
	Serial.write(&TPCEXcode.ByteData[0],8);
     4e0:	48 e0       	ldi	r20, 0x08	; 8
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	61 ec       	ldi	r22, 0xC1	; 193
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	8e e0       	ldi	r24, 0x0E	; 14
     4ea:	93 e0       	ldi	r25, 0x03	; 3
     4ec:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_ZN7Serial_5writeEPKhj>

000004f0 <_Z6Randomv>:
}

void Random(void)
{
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
	DUEdata.ST.COMB[0].ULONG=random(IN_MIN_32,IN_MAX_32);	
     4f4:	c1 eb       	ldi	r28, 0xB1	; 177
     4f6:	d1 e0       	ldi	r29, 0x01	; 1
     4f8:	28 81       	ld	r18, Y
     4fa:	39 81       	ldd	r19, Y+1	; 0x01
     4fc:	4a 81       	ldd	r20, Y+2	; 0x02
     4fe:	5b 81       	ldd	r21, Y+3	; 0x03
     500:	6c 81       	ldd	r22, Y+4	; 0x04
     502:	7d 81       	ldd	r23, Y+5	; 0x05
     504:	8e 81       	ldd	r24, Y+6	; 0x06
     506:	9f 81       	ldd	r25, Y+7	; 0x07
     508:	0e 94 15 14 	call	0x282a	; 0x282a <_Z6randomll>
     50c:	68 83       	st	Y, r22
     50e:	79 83       	std	Y+1, r23	; 0x01
     510:	8a 83       	std	Y+2, r24	; 0x02
     512:	9b 83       	std	Y+3, r25	; 0x03
	Serial.write(&DUEdata.ByteData[0],8);
     514:	48 e0       	ldi	r20, 0x08	; 8
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	be 01       	movw	r22, r28
     51a:	8e e0       	ldi	r24, 0x0E	; 14
     51c:	93 e0       	ldi	r25, 0x03	; 3
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
}

void Random(void)
{
	DUEdata.ST.COMB[0].ULONG=random(IN_MIN_32,IN_MAX_32);	
	Serial.write(&DUEdata.ByteData[0],8);
     522:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_ZN7Serial_5writeEPKhj>

00000526 <setup>:
 };

 long bb;

void setup()
{	Rxstatus= sizeof(unsigned long); 
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	84 e0       	ldi	r24, 0x04	; 4
     52c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <__data_end>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     530:	26 e0       	ldi	r18, 0x06	; 6
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	52 ec       	ldi	r21, 0xC2	; 194
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	8f e5       	ldi	r24, 0x5F	; 95
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN14HardwareSerial5beginEmh>
	Serial1.begin(BAUD);
	Serial.begin(BAUD);
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	52 ec       	ldi	r21, 0xC2	; 194
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	8e e0       	ldi	r24, 0x0E	; 14
     54c:	93 e0       	ldi	r25, 0x03	; 3
     54e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_ZN7Serial_5beginEm>
     552:	cf e6       	ldi	r28, 0x6F	; 111
     554:	d0 e0       	ldi	r29, 0x00	; 0
	for(int c=0;c<111;c++)
		{bb=random(200,100);
     556:	24 e6       	ldi	r18, 0x64	; 100
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	68 ec       	ldi	r22, 0xC8	; 200
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 15 14 	call	0x282a	; 0x282a <_Z6randomll>
     56a:	60 93 49 02 	sts	0x0249, r22	; 0x800249 <bb>
     56e:	70 93 4a 02 	sts	0x024A, r23	; 0x80024a <bb+0x1>
     572:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <bb+0x2>
     576:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <bb+0x3>
		bb=random(200,100);
     57a:	24 e6       	ldi	r18, 0x64	; 100
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 e0       	ldi	r20, 0x00	; 0
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	68 ec       	ldi	r22, 0xC8	; 200
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 15 14 	call	0x282a	; 0x282a <_Z6randomll>
     58e:	60 93 49 02 	sts	0x0249, r22	; 0x800249 <bb>
     592:	70 93 4a 02 	sts	0x024A, r23	; 0x80024a <bb+0x1>
     596:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <bb+0x2>
     59a:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <bb+0x3>
     59e:	21 97       	sbiw	r28, 0x01	; 1

void setup()
{	Rxstatus= sizeof(unsigned long); 
	Serial1.begin(BAUD);
	Serial.begin(BAUD);
	for(int c=0;c<111;c++)
     5a0:	d1 f6       	brne	.-76     	; 0x556 <setup+0x30>
		{bb=random(200,100);
		bb=random(200,100);
		}
	//SPI.begin();
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <loop>:


void loop()
{
byte swcode=ReceivingData();
     5a8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_Z13ReceivingDatav>
if(swcode)
     5ac:	88 23       	and	r24, r24
     5ae:	99 f0       	breq	.+38     	; 0x5d6 <loop+0x2e>
	{	my_fun_pointer[low4Bit(FPCEXcode.ST.FunctionGroup)][FPCEXcode.ST.FunctionNo]();
     5b0:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <FPCEXcode>
     5b4:	ef 70       	andi	r30, 0x0F	; 15
     5b6:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <FPCEXcode+0x1>
     5ba:	9c e0       	ldi	r25, 0x0C	; 12
     5bc:	e9 9f       	mul	r30, r25
     5be:	f0 01       	movw	r30, r0
     5c0:	11 24       	eor	r1, r1
     5c2:	e8 0f       	add	r30, r24
     5c4:	f1 1d       	adc	r31, r1
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	ec 5f       	subi	r30, 0xFC	; 252
     5cc:	fe 4f       	sbci	r31, 0xFE	; 254
     5ce:	01 90       	ld	r0, Z+
     5d0:	f0 81       	ld	r31, Z
     5d2:	e0 2d       	mov	r30, r0
     5d4:	09 94       	ijmp
     5d6:	08 95       	ret

000005d8 <twi_transmit>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     5d8:	40 91 6f 02 	lds	r20, 0x026F	; 0x80026f <twi_txBufferLength>
     5dc:	26 2f       	mov	r18, r22
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	24 0f       	add	r18, r20
     5e2:	31 1d       	adc	r19, r1
     5e4:	21 32       	cpi	r18, 0x21	; 33
     5e6:	31 05       	cpc	r19, r1
     5e8:	dc f4       	brge	.+54     	; 0x620 <twi_transmit+0x48>
     5ea:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <twi_state>
     5ee:	24 30       	cpi	r18, 0x04	; 4
     5f0:	c9 f4       	brne	.+50     	; 0x624 <twi_transmit+0x4c>
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	86 17       	cp	r24, r22
     5fa:	58 f4       	brcc	.+22     	; 0x612 <twi_transmit+0x3a>
     5fc:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <twi_txBufferLength>
     600:	21 91       	ld	r18, Z+
     602:	dc 01       	movw	r26, r24
     604:	af 58       	subi	r26, 0x8F	; 143
     606:	bd 4f       	sbci	r27, 0xFD	; 253
     608:	a3 0f       	add	r26, r19
     60a:	b1 1d       	adc	r27, r1
     60c:	2c 93       	st	X, r18
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	f3 cf       	rjmp	.-26     	; 0x5f8 <twi_transmit+0x20>
     612:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <twi_txBufferLength>
     616:	68 0f       	add	r22, r24
     618:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <twi_txBufferLength>
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	08 95       	ret
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	08 95       	ret
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	08 95       	ret

00000628 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     628:	85 ed       	ldi	r24, 0xD5	; 213
     62a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     62e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     632:	84 fd       	sbrc	r24, 4
     634:	fc cf       	rjmp	.-8      	; 0x62e <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     636:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <twi_state>
     63a:	08 95       	ret

0000063c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     63c:	85 ec       	ldi	r24, 0xC5	; 197
     63e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     642:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <twi_state>
     646:	08 95       	ret

00000648 <__vector_36>:
}

ISR(TWI_vect)
{
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	ef 93       	push	r30
     668:	ff 93       	push	r31
  switch(TW_STATUS){
     66a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     66e:	88 7f       	andi	r24, 0xF8	; 248
     670:	80 36       	cpi	r24, 0x60	; 96
     672:	09 f4       	brne	.+2      	; 0x676 <__vector_36+0x2e>
     674:	9e c0       	rjmp	.+316    	; 0x7b2 <__vector_36+0x16a>
     676:	78 f5       	brcc	.+94     	; 0x6d6 <__vector_36+0x8e>
     678:	88 32       	cpi	r24, 0x28	; 40
     67a:	09 f4       	brne	.+2      	; 0x67e <__vector_36+0x36>
     67c:	5d c0       	rjmp	.+186    	; 0x738 <__vector_36+0xf0>
     67e:	90 f4       	brcc	.+36     	; 0x6a4 <__vector_36+0x5c>
     680:	80 31       	cpi	r24, 0x10	; 16
     682:	09 f4       	brne	.+2      	; 0x686 <__vector_36+0x3e>
     684:	56 c0       	rjmp	.+172    	; 0x732 <__vector_36+0xea>
     686:	38 f4       	brcc	.+14     	; 0x696 <__vector_36+0x4e>
     688:	88 23       	and	r24, r24
     68a:	09 f4       	brne	.+2      	; 0x68e <__vector_36+0x46>
     68c:	f5 c0       	rjmp	.+490    	; 0x878 <__vector_36+0x230>
     68e:	88 30       	cpi	r24, 0x08	; 8
     690:	09 f4       	brne	.+2      	; 0x694 <__vector_36+0x4c>
     692:	4f c0       	rjmp	.+158    	; 0x732 <__vector_36+0xea>
     694:	f5 c0       	rjmp	.+490    	; 0x880 <__vector_36+0x238>
     696:	88 31       	cpi	r24, 0x18	; 24
     698:	09 f4       	brne	.+2      	; 0x69c <__vector_36+0x54>
     69a:	4e c0       	rjmp	.+156    	; 0x738 <__vector_36+0xf0>
     69c:	80 32       	cpi	r24, 0x20	; 32
     69e:	09 f4       	brne	.+2      	; 0x6a2 <__vector_36+0x5a>
     6a0:	5f c0       	rjmp	.+190    	; 0x760 <__vector_36+0x118>
     6a2:	ee c0       	rjmp	.+476    	; 0x880 <__vector_36+0x238>
     6a4:	80 34       	cpi	r24, 0x40	; 64
     6a6:	09 f4       	brne	.+2      	; 0x6aa <__vector_36+0x62>
     6a8:	6a c0       	rjmp	.+212    	; 0x77e <__vector_36+0x136>
     6aa:	58 f4       	brcc	.+22     	; 0x6c2 <__vector_36+0x7a>
     6ac:	80 33       	cpi	r24, 0x30	; 48
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <__vector_36+0x6a>
     6b0:	57 c0       	rjmp	.+174    	; 0x760 <__vector_36+0x118>
     6b2:	88 33       	cpi	r24, 0x38	; 56
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <__vector_36+0x70>
     6b6:	e4 c0       	rjmp	.+456    	; 0x880 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     6b8:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <twi_error>
      twi_releaseBus();
     6bc:	0e 94 1e 03 	call	0x63c	; 0x63c <twi_releaseBus>
      break;
     6c0:	df c0       	rjmp	.+446    	; 0x880 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     6c2:	80 35       	cpi	r24, 0x50	; 80
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <__vector_36+0x80>
     6c6:	4f c0       	rjmp	.+158    	; 0x766 <__vector_36+0x11e>
     6c8:	88 35       	cpi	r24, 0x58	; 88
     6ca:	09 f4       	brne	.+2      	; 0x6ce <__vector_36+0x86>
     6cc:	5d c0       	rjmp	.+186    	; 0x788 <__vector_36+0x140>
     6ce:	88 34       	cpi	r24, 0x48	; 72
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <__vector_36+0x8c>
     6d2:	d6 c0       	rjmp	.+428    	; 0x880 <__vector_36+0x238>
     6d4:	d3 c0       	rjmp	.+422    	; 0x87c <__vector_36+0x234>
     6d6:	88 39       	cpi	r24, 0x98	; 152
     6d8:	09 f4       	brne	.+2      	; 0x6dc <__vector_36+0x94>
     6da:	c4 c0       	rjmp	.+392    	; 0x864 <__vector_36+0x21c>
     6dc:	a8 f4       	brcc	.+42     	; 0x708 <__vector_36+0xc0>
     6de:	88 37       	cpi	r24, 0x78	; 120
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <__vector_36+0x9c>
     6e2:	67 c0       	rjmp	.+206    	; 0x7b2 <__vector_36+0x16a>
     6e4:	38 f4       	brcc	.+14     	; 0x6f4 <__vector_36+0xac>
     6e6:	88 36       	cpi	r24, 0x68	; 104
     6e8:	09 f4       	brne	.+2      	; 0x6ec <__vector_36+0xa4>
     6ea:	63 c0       	rjmp	.+198    	; 0x7b2 <__vector_36+0x16a>
     6ec:	80 37       	cpi	r24, 0x70	; 112
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <__vector_36+0xaa>
     6f0:	60 c0       	rjmp	.+192    	; 0x7b2 <__vector_36+0x16a>
     6f2:	c6 c0       	rjmp	.+396    	; 0x880 <__vector_36+0x238>
     6f4:	88 38       	cpi	r24, 0x88	; 136
     6f6:	09 f4       	brne	.+2      	; 0x6fa <__vector_36+0xb2>
     6f8:	b5 c0       	rjmp	.+362    	; 0x864 <__vector_36+0x21c>
     6fa:	80 39       	cpi	r24, 0x90	; 144
     6fc:	09 f4       	brne	.+2      	; 0x700 <__vector_36+0xb8>
     6fe:	5f c0       	rjmp	.+190    	; 0x7be <__vector_36+0x176>
     700:	80 38       	cpi	r24, 0x80	; 128
     702:	09 f0       	breq	.+2      	; 0x706 <__vector_36+0xbe>
     704:	bd c0       	rjmp	.+378    	; 0x880 <__vector_36+0x238>
     706:	5b c0       	rjmp	.+182    	; 0x7be <__vector_36+0x176>
     708:	80 3b       	cpi	r24, 0xB0	; 176
     70a:	09 f4       	brne	.+2      	; 0x70e <__vector_36+0xc6>
     70c:	83 c0       	rjmp	.+262    	; 0x814 <__vector_36+0x1cc>
     70e:	38 f4       	brcc	.+14     	; 0x71e <__vector_36+0xd6>
     710:	80 3a       	cpi	r24, 0xA0	; 160
     712:	09 f4       	brne	.+2      	; 0x716 <__vector_36+0xce>
     714:	66 c0       	rjmp	.+204    	; 0x7e2 <__vector_36+0x19a>
     716:	88 3a       	cpi	r24, 0xA8	; 168
     718:	09 f4       	brne	.+2      	; 0x71c <__vector_36+0xd4>
     71a:	7c c0       	rjmp	.+248    	; 0x814 <__vector_36+0x1cc>
     71c:	b1 c0       	rjmp	.+354    	; 0x880 <__vector_36+0x238>
     71e:	80 3c       	cpi	r24, 0xC0	; 192
     720:	09 f4       	brne	.+2      	; 0x724 <__vector_36+0xdc>
     722:	a4 c0       	rjmp	.+328    	; 0x86c <__vector_36+0x224>
     724:	88 3c       	cpi	r24, 0xC8	; 200
     726:	09 f4       	brne	.+2      	; 0x72a <__vector_36+0xe2>
     728:	a1 c0       	rjmp	.+322    	; 0x86c <__vector_36+0x224>
     72a:	88 3b       	cpi	r24, 0xB8	; 184
     72c:	09 f4       	brne	.+2      	; 0x730 <__vector_36+0xe8>
     72e:	87 c0       	rjmp	.+270    	; 0x83e <__vector_36+0x1f6>
     730:	a7 c0       	rjmp	.+334    	; 0x880 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     732:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <twi_slarw>
     736:	10 c0       	rjmp	.+32     	; 0x758 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     738:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <twi_masterBufferIndex>
     73c:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <twi_masterBufferLength>
     740:	98 17       	cp	r25, r24
     742:	70 f5       	brcc	.+92     	; 0x7a0 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     744:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <twi_masterBufferIndex>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	8e 0f       	add	r24, r30
     74c:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <twi_masterBufferIndex>
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	ed 56       	subi	r30, 0x6D	; 109
     754:	fd 4f       	sbci	r31, 0xFD	; 253
     756:	80 81       	ld	r24, Z
     758:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     75c:	85 ec       	ldi	r24, 0xC5	; 197
     75e:	83 c0       	rjmp	.+262    	; 0x866 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     760:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <twi_error>
     764:	8b c0       	rjmp	.+278    	; 0x87c <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     766:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <twi_masterBufferIndex>
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	8e 0f       	add	r24, r30
     76e:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <twi_masterBufferIndex>
     772:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	ed 56       	subi	r30, 0x6D	; 109
     77a:	fd 4f       	sbci	r31, 0xFD	; 253
     77c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     77e:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <twi_masterBufferIndex>
     782:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <twi_masterBufferLength>
     786:	6b c0       	rjmp	.+214    	; 0x85e <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     788:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <twi_masterBufferIndex>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	8e 0f       	add	r24, r30
     790:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <twi_masterBufferIndex>
     794:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	ed 56       	subi	r30, 0x6D	; 109
     79c:	fd 4f       	sbci	r31, 0xFD	; 253
     79e:	80 83       	st	Z, r24
	if (twi_sendStop)
     7a0:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <twi_sendStop>
     7a4:	81 11       	cpse	r24, r1
     7a6:	6a c0       	rjmp	.+212    	; 0x87c <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     7ae:	84 ea       	ldi	r24, 0xA4	; 164
     7b0:	5e c0       	rjmp	.+188    	; 0x86e <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     7b8:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <twi_rxBufferIndex>
     7bc:	cf cf       	rjmp	.-98     	; 0x75c <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     7be:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <twi_rxBufferIndex>
     7c2:	80 32       	cpi	r24, 0x20	; 32
     7c4:	08 f0       	brcs	.+2      	; 0x7c8 <__vector_36+0x180>
     7c6:	4e c0       	rjmp	.+156    	; 0x864 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     7c8:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <twi_rxBufferIndex>
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	8e 0f       	add	r24, r30
     7d0:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <twi_rxBufferIndex>
     7d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	e1 5b       	subi	r30, 0xB1	; 177
     7dc:	fd 4f       	sbci	r31, 0xFD	; 253
     7de:	80 83       	st	Z, r24
     7e0:	bd cf       	rjmp	.-134    	; 0x75c <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     7e2:	0e 94 1e 03 	call	0x63c	; 0x63c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     7e6:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <twi_rxBufferIndex>
     7ea:	80 32       	cpi	r24, 0x20	; 32
     7ec:	30 f4       	brcc	.+12     	; 0x7fa <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     7ee:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <twi_rxBufferIndex>
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	e1 5b       	subi	r30, 0xB1	; 177
     7f6:	fd 4f       	sbci	r31, 0xFD	; 253
     7f8:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     7fa:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <twi_rxBufferIndex>
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <twi_onSlaveReceive>
     804:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <twi_onSlaveReceive+0x1>
     808:	8f e4       	ldi	r24, 0x4F	; 79
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     80e:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <twi_rxBufferIndex>
      break;
     812:	36 c0       	rjmp	.+108    	; 0x880 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     814:	84 e0       	ldi	r24, 0x04	; 4
     816:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     81a:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     81e:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     822:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <twi_onSlaveTransmit>
     826:	f0 91 b6 02 	lds	r31, 0x02B6	; 0x8002b6 <twi_onSlaveTransmit+0x1>
     82a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     82c:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <twi_txBufferLength>
     830:	81 11       	cpse	r24, r1
     832:	05 c0       	rjmp	.+10     	; 0x83e <__vector_36+0x1f6>
        twi_txBufferLength = 1;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     83a:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     83e:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <twi_txBufferIndex>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	8e 0f       	add	r24, r30
     846:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <twi_txBufferIndex>
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	ef 58       	subi	r30, 0x8F	; 143
     84e:	fd 4f       	sbci	r31, 0xFD	; 253
     850:	80 81       	ld	r24, Z
     852:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     856:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <twi_txBufferIndex>
     85a:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <twi_txBufferLength>
     85e:	98 17       	cp	r25, r24
     860:	08 f4       	brcc	.+2      	; 0x864 <__vector_36+0x21c>
     862:	7c cf       	rjmp	.-264    	; 0x75c <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     864:	85 e8       	ldi	r24, 0x85	; 133
     866:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     86a:	0a c0       	rjmp	.+20     	; 0x880 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     86c:	85 ec       	ldi	r24, 0xC5	; 197
     86e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     872:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <twi_state>
      break;
     876:	04 c0       	rjmp	.+8      	; 0x880 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     878:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <twi_error>
      twi_stop();
     87c:	0e 94 14 03 	call	0x628	; 0x628 <twi_stop>
      break;
  }
}
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	7f 91       	pop	r23
     88e:	6f 91       	pop	r22
     890:	5f 91       	pop	r21
     892:	4f 91       	pop	r20
     894:	3f 91       	pop	r19
     896:	2f 91       	pop	r18
     898:	0f 90       	pop	r0
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	0f 90       	pop	r0
     89e:	1f 90       	pop	r1
     8a0:	18 95       	reti

000008a2 <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	08 95       	ret

000008a8 <_ZN7TwoWire9availableEv>:
     8a8:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZN7TwoWire14rxBufferLengthE>
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
     8b2:	82 1b       	sub	r24, r18
     8b4:	91 09       	sbc	r25, r1
     8b6:	08 95       	ret

000008b8 <_ZN7TwoWire4readEv>:
     8b8:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
     8bc:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZN7TwoWire14rxBufferLengthE>
     8c0:	98 17       	cp	r25, r24
     8c2:	50 f4       	brcc	.+20     	; 0x8d8 <_ZN7TwoWire4readEv+0x20>
     8c4:	e9 2f       	mov	r30, r25
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	e4 51       	subi	r30, 0x14	; 20
     8ca:	fd 4f       	sbci	r31, 0xFD	; 253
     8cc:	20 81       	ld	r18, Z
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	9f 5f       	subi	r25, 0xFF	; 255
     8d2:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <_ZN7TwoWire4readEv+0x24>
     8d8:	2f ef       	ldi	r18, 0xFF	; 255
     8da:	3f ef       	ldi	r19, 0xFF	; 255
     8dc:	c9 01       	movw	r24, r18
     8de:	08 95       	ret

000008e0 <_ZN7TwoWire4peekEv>:
     8e0:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
     8e4:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZN7TwoWire14rxBufferLengthE>
     8e8:	e8 17       	cp	r30, r24
     8ea:	30 f4       	brcc	.+12     	; 0x8f8 <_ZN7TwoWire4peekEv+0x18>
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	e4 51       	subi	r30, 0x14	; 20
     8f0:	fd 4f       	sbci	r31, 0xFD	; 253
     8f2:	80 81       	ld	r24, Z
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	08 95       	ret
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	9f ef       	ldi	r25, 0xFF	; 255
     8fc:	08 95       	ret

000008fe <_ZN7TwoWire5flushEv>:
     8fe:	08 95       	ret

00000900 <_ZN7TwoWire5writeEPKhj>:
     900:	cf 92       	push	r12
     902:	df 92       	push	r13
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	7c 01       	movw	r14, r24
     912:	cb 01       	movw	r24, r22
     914:	8a 01       	movw	r16, r20
     916:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <_ZN7TwoWire12transmittingE>
     91a:	22 23       	and	r18, r18
     91c:	89 f0       	breq	.+34     	; 0x940 <_ZN7TwoWire5writeEPKhj+0x40>
     91e:	eb 01       	movw	r28, r22
     920:	6b 01       	movw	r12, r22
     922:	c4 0e       	add	r12, r20
     924:	d5 1e       	adc	r13, r21
     926:	cc 15       	cp	r28, r12
     928:	dd 05       	cpc	r29, r13
     92a:	69 f0       	breq	.+26     	; 0x946 <_ZN7TwoWire5writeEPKhj+0x46>
     92c:	69 91       	ld	r22, Y+
     92e:	d7 01       	movw	r26, r14
     930:	ed 91       	ld	r30, X+
     932:	fc 91       	ld	r31, X
     934:	01 90       	ld	r0, Z+
     936:	f0 81       	ld	r31, Z
     938:	e0 2d       	mov	r30, r0
     93a:	c7 01       	movw	r24, r14
     93c:	09 95       	icall
     93e:	f3 cf       	rjmp	.-26     	; 0x926 <_ZN7TwoWire5writeEPKhj+0x26>
     940:	64 2f       	mov	r22, r20
     942:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <twi_transmit>
     946:	c8 01       	movw	r24, r16
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	08 95       	ret

0000095a <_ZN7TwoWire5writeEh>:
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	1f 92       	push	r1
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	69 83       	std	Y+1, r22	; 0x01
     966:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <_ZN7TwoWire12transmittingE>
     96a:	22 23       	and	r18, r18
     96c:	d1 f0       	breq	.+52     	; 0x9a2 <_ZN7TwoWire5writeEh+0x48>
     96e:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <_ZN7TwoWire14txBufferLengthE>
     972:	20 32       	cpi	r18, 0x20	; 32
     974:	40 f0       	brcs	.+16     	; 0x986 <_ZN7TwoWire5writeEh+0x2c>
     976:	21 e0       	ldi	r18, 0x01	; 1
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	fc 01       	movw	r30, r24
     97c:	33 83       	std	Z+3, r19	; 0x03
     97e:	22 83       	std	Z+2, r18	; 0x02
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	15 c0       	rjmp	.+42     	; 0x9b0 <_ZN7TwoWire5writeEh+0x56>
     986:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <_ZN7TwoWire13txBufferIndexE>
     98a:	e8 2f       	mov	r30, r24
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	e6 53       	subi	r30, 0x36	; 54
     990:	fd 4f       	sbci	r31, 0xFD	; 253
     992:	99 81       	ldd	r25, Y+1	; 0x01
     994:	90 83       	st	Z, r25
     996:	8f 5f       	subi	r24, 0xFF	; 255
     998:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <_ZN7TwoWire13txBufferIndexE>
     99c:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <_ZN7TwoWire14txBufferLengthE>
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <_ZN7TwoWire5writeEh+0x52>
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	ce 01       	movw	r24, r28
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <twi_transmit>
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0f 90       	pop	r0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <_ZN7TwoWireC1Ev>:
     9b8:	fc 01       	movw	r30, r24
     9ba:	13 82       	std	Z+3, r1	; 0x03
     9bc:	12 82       	std	Z+2, r1	; 0x02
     9be:	88 ee       	ldi	r24, 0xE8	; 232
     9c0:	93 e0       	ldi	r25, 0x03	; 3
     9c2:	a0 e0       	ldi	r26, 0x00	; 0
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	84 83       	std	Z+4, r24	; 0x04
     9c8:	95 83       	std	Z+5, r25	; 0x05
     9ca:	a6 83       	std	Z+6, r26	; 0x06
     9cc:	b7 83       	std	Z+7, r27	; 0x07
     9ce:	8d e7       	ldi	r24, 0x7D	; 125
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	91 83       	std	Z+1, r25	; 0x01
     9d4:	80 83       	st	Z, r24
     9d6:	08 95       	ret

000009d8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     9d8:	8b eb       	ldi	r24, 0xBB	; 187
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <_ZN7TwoWireC1Ev>

000009e0 <_GLOBAL__sub_I_mysettings>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
     9e0:	ec e0       	ldi	r30, 0x0C	; 12
     9e2:	f3 e0       	ldi	r31, 0x03	; 3
     9e4:	80 e5       	ldi	r24, 0x50	; 80
     9e6:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
     9e8:	11 82       	std	Z+1, r1	; 0x01
     9ea:	08 95       	ret

000009ec <_Z7_millisv>:
	Serial.write(&TPCEXcode.ByteData[0],8);
}

void _millis(void)
{
	delay(IN_ULONG);
     9ec:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <FPCEXcode+0x4>
     9f0:	70 91 be 01 	lds	r23, 0x01BE	; 0x8001be <FPCEXcode+0x5>
     9f4:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <FPCEXcode+0x6>
     9f8:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <FPCEXcode+0x7>
     9fc:	0e 94 a4 10 	call	0x2148	; 0x2148 <delay>
	Serial.write(&TPCEXcode.ByteData[0],8);
     a00:	48 e0       	ldi	r20, 0x08	; 8
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	61 ec       	ldi	r22, 0xC1	; 193
     a06:	71 e0       	ldi	r23, 0x01	; 1
     a08:	8e e0       	ldi	r24, 0x0E	; 14
     a0a:	93 e0       	ldi	r25, 0x03	; 3
     a0c:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_ZN7Serial_5writeEPKhj>

00000a10 <_Z7_microsv>:
     a10:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_Z7_millisv>

00000a14 <_Z8_delaymsv>:
     a14:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_Z7_millisv>

00000a18 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	1f 92       	push	r1
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	69 83       	std	Y+1, r22	; 0x01
     a24:	dc 01       	movw	r26, r24
     a26:	ed 91       	ld	r30, X+
     a28:	fc 91       	ld	r31, X
     a2a:	02 80       	ldd	r0, Z+2	; 0x02
     a2c:	f3 81       	ldd	r31, Z+3	; 0x03
     a2e:	e0 2d       	mov	r30, r0
     a30:	41 e0       	ldi	r20, 0x01	; 1
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	be 01       	movw	r22, r28
     a36:	6f 5f       	subi	r22, 0xFF	; 255
     a38:	7f 4f       	sbci	r23, 0xFF	; 255
     a3a:	09 95       	icall
     a3c:	0f 90       	pop	r0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <_ZN7Serial_4peekEv>:
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	ec 01       	movw	r28, r24
     a4a:	8c 85       	ldd	r24, Y+12	; 0x0c
     a4c:	9d 85       	ldd	r25, Y+13	; 0x0d
     a4e:	97 ff       	sbrs	r25, 7
     a50:	05 c0       	rjmp	.+10     	; 0xa5c <_ZN7Serial_4peekEv+0x18>
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_Z8USB_Recvh>
     a58:	9d 87       	std	Y+13, r25	; 0x0d
     a5a:	8c 87       	std	Y+12, r24	; 0x0c
     a5c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a5e:	9d 85       	ldd	r25, Y+13	; 0x0d
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <_ZN7Serial_17availableForWriteEv>:
     a66:	83 e0       	ldi	r24, 0x03	; 3
     a68:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <_Z13USB_SendSpaceh>
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	08 95       	ret

00000a70 <_ZN7Serial_5flushEv>:
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <_Z9USB_Flushh>

00000a76 <_ZN7Serial_9availableEv>:
     a76:	fc 01       	movw	r30, r24
     a78:	84 85       	ldd	r24, Z+12	; 0x0c
     a7a:	95 85       	ldd	r25, Z+13	; 0x0d
     a7c:	97 fd       	sbrc	r25, 7
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <_ZN7Serial_9availableEv+0x16>
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	0e 94 97 0c 	call	0x192e	; 0x192e <_Z13USB_Availableh>
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	08 95       	ret
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	0e 94 97 0c 	call	0x192e	; 0x192e <_Z13USB_Availableh>
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	08 95       	ret

00000a96 <_ZN7Serial_4readEv>:
     a96:	fc 01       	movw	r30, r24
     a98:	84 85       	ldd	r24, Z+12	; 0x0c
     a9a:	95 85       	ldd	r25, Z+13	; 0x0d
     a9c:	97 fd       	sbrc	r25, 7
     a9e:	05 c0       	rjmp	.+10     	; 0xaaa <_ZN7Serial_4readEv+0x14>
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	3f ef       	ldi	r19, 0xFF	; 255
     aa4:	35 87       	std	Z+13, r19	; 0x0d
     aa6:	24 87       	std	Z+12, r18	; 0x0c
     aa8:	08 95       	ret
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <_Z8USB_Recvh>

00000ab0 <_ZN7Serial_5writeEPKhj>:
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	ec 01       	movw	r28, r24
     ab6:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_ZL12_usbLineInfo+0x7>
     aba:	88 23       	and	r24, r24
     abc:	31 f0       	breq	.+12     	; 0xaca <_ZN7Serial_5writeEPKhj+0x1a>
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_Z8USB_SendhPKvi>
     ac4:	18 16       	cp	r1, r24
     ac6:	19 06       	cpc	r1, r25
     ac8:	34 f0       	brlt	.+12     	; 0xad6 <_ZN7Serial_5writeEPKhj+0x26>
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	9b 83       	std	Y+3, r25	; 0x03
     ad0:	8a 83       	std	Y+2, r24	; 0x02
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <_Z16CDC_GetInterfacePh>:
     adc:	fc 01       	movw	r30, r24
     ade:	90 81       	ld	r25, Z
     ae0:	9e 5f       	subi	r25, 0xFE	; 254
     ae2:	90 83       	st	Z, r25
     ae4:	42 e4       	ldi	r20, 0x42	; 66
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	68 ee       	ldi	r22, 0xE8	; 232
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	80 e8       	ldi	r24, 0x80	; 128
     aee:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <_Z15USB_SendControlhPKvi>

00000af2 <_Z9CDC_SetupR8USBSetup>:
     af2:	fc 01       	movw	r30, r24
     af4:	81 81       	ldd	r24, Z+1	; 0x01
     af6:	90 81       	ld	r25, Z
     af8:	91 3a       	cpi	r25, 0xA1	; 161
     afa:	59 f4       	brne	.+22     	; 0xb12 <__stack+0x13>
     afc:	81 32       	cpi	r24, 0x21	; 33
     afe:	09 f0       	breq	.+2      	; 0xb02 <__stack+0x3>
     b00:	5c c0       	rjmp	.+184    	; 0xbba <__stack+0xbb>
     b02:	47 e0       	ldi	r20, 0x07	; 7
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	68 e6       	ldi	r22, 0x68	; 104
     b08:	71 e0       	ldi	r23, 0x01	; 1
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_Z15USB_SendControlhPKvi>
     b10:	52 c0       	rjmp	.+164    	; 0xbb6 <__stack+0xb7>
     b12:	91 32       	cpi	r25, 0x21	; 33
     b14:	09 f0       	breq	.+2      	; 0xb18 <__stack+0x19>
     b16:	51 c0       	rjmp	.+162    	; 0xbba <__stack+0xbb>
     b18:	83 32       	cpi	r24, 0x23	; 35
     b1a:	69 f4       	brne	.+26     	; 0xb36 <__stack+0x37>
     b1c:	82 81       	ldd	r24, Z+2	; 0x02
     b1e:	93 81       	ldd	r25, Z+3	; 0x03
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <_ZL10breakValue>
     b28:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <_ZL10breakValue+0x1>
     b2c:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <_ZL10breakValue+0x2>
     b30:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <_ZL10breakValue+0x3>
     b34:	40 c0       	rjmp	.+128    	; 0xbb6 <__stack+0xb7>
     b36:	80 32       	cpi	r24, 0x20	; 32
     b38:	39 f4       	brne	.+14     	; 0xb48 <__stack+0x49>
     b3a:	67 e0       	ldi	r22, 0x07	; 7
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	88 e6       	ldi	r24, 0x68	; 104
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <_Z15USB_RecvControlPvi>
     b46:	05 c0       	rjmp	.+10     	; 0xb52 <__stack+0x53>
     b48:	82 32       	cpi	r24, 0x22	; 34
     b4a:	a9 f5       	brne	.+106    	; 0xbb6 <__stack+0xb7>
     b4c:	82 81       	ldd	r24, Z+2	; 0x02
     b4e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <_ZL12_usbLineInfo+0x7>
     b52:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <_updatedLUFAbootloader>
     b56:	88 23       	and	r24, r24
     b58:	19 f0       	breq	.+6      	; 0xb60 <__stack+0x61>
     b5a:	ee ef       	ldi	r30, 0xFE	; 254
     b5c:	fa e0       	ldi	r31, 0x0A	; 10
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <__stack+0x65>
     b60:	e0 e0       	ldi	r30, 0x00	; 0
     b62:	f8 e0       	ldi	r31, 0x08	; 8
     b64:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZL12_usbLineInfo>
     b68:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <_ZL12_usbLineInfo+0x1>
     b6c:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <_ZL12_usbLineInfo+0x2>
     b70:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <_ZL12_usbLineInfo+0x3>
     b74:	80 3b       	cpi	r24, 0xB0	; 176
     b76:	94 40       	sbci	r25, 0x04	; 4
     b78:	a1 05       	cpc	r26, r1
     b7a:	b1 05       	cpc	r27, r1
     b7c:	01 f5       	brne	.+64     	; 0xbbe <__stack+0xbf>
     b7e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_ZL12_usbLineInfo+0x7>
     b82:	80 fd       	sbrc	r24, 0
     b84:	1c c0       	rjmp	.+56     	; 0xbbe <__stack+0xbf>
     b86:	ee 3f       	cpi	r30, 0xFE	; 254
     b88:	2a e0       	ldi	r18, 0x0A	; 10
     b8a:	f2 07       	cpc	r31, r18
     b8c:	31 f0       	breq	.+12     	; 0xb9a <__stack+0x9b>
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
     b92:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x6c8>
     b96:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x6c7>
     b9a:	87 e7       	ldi	r24, 0x77	; 119
     b9c:	97 e7       	ldi	r25, 0x77	; 119
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	80 83       	st	Z, r24
     ba2:	9b e0       	ldi	r25, 0x0B	; 11
     ba4:	88 e1       	ldi	r24, 0x18	; 24
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	a8 95       	wdr
     bac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	08 95       	ret
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	08 95       	ret
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	a8 95       	wdr
     bc4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     bc8:	88 61       	ori	r24, 0x18	; 24
     bca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     bce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	a8 95       	wdr
     bd6:	ee 3f       	cpi	r30, 0xFE	; 254
     bd8:	8a e0       	ldi	r24, 0x0A	; 10
     bda:	f8 07       	cpc	r31, r24
     bdc:	39 f0       	breq	.+14     	; 0xbec <__stack+0xed>
     bde:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x6c7>
     be2:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x6c8>
     be6:	91 83       	std	Z+1, r25	; 0x01
     be8:	80 83       	st	Z, r24
     bea:	e5 cf       	rjmp	.-54     	; 0xbb6 <__stack+0xb7>
     bec:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x6c8>
     bf0:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x6c7>
     bf4:	e0 cf       	rjmp	.-64     	; 0xbb6 <__stack+0xb7>

00000bf6 <_ZN7Serial_5beginEm>:
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	fc 01       	movw	r30, r24
     bfc:	35 87       	std	Z+13, r19	; 0x0d
     bfe:	24 87       	std	Z+12, r18	; 0x0c
     c00:	08 95       	ret

00000c02 <_GLOBAL__sub_I__updatedLUFAbootloader>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c02:	ee e0       	ldi	r30, 0x0E	; 14
     c04:	f3 e0       	ldi	r31, 0x03	; 3
     c06:	13 82       	std	Z+3, r1	; 0x03
     c08:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c0a:	88 ee       	ldi	r24, 0xE8	; 232
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	84 83       	std	Z+4, r24	; 0x04
     c14:	95 83       	std	Z+5, r25	; 0x05
     c16:	a6 83       	std	Z+6, r26	; 0x06
     c18:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
     c1a:	8f e8       	ldi	r24, 0x8F	; 143
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	80 83       	st	Z, r24
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	9f ef       	ldi	r25, 0xFF	; 255
     c26:	95 87       	std	Z+13, r25	; 0x0d
     c28:	84 87       	std	Z+12, r24	; 0x0c
     c2a:	08 95       	ret

00000c2c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     c2c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     c2e:	91 8d       	ldd	r25, Z+25	; 0x19
     c30:	22 8d       	ldd	r18, Z+26	; 0x1a
     c32:	89 2f       	mov	r24, r25
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	80 5c       	subi	r24, 0xC0	; 192
     c38:	9f 4f       	sbci	r25, 0xFF	; 255
     c3a:	82 1b       	sub	r24, r18
     c3c:	91 09       	sbc	r25, r1
}
     c3e:	8f 73       	andi	r24, 0x3F	; 63
     c40:	99 27       	eor	r25, r25
     c42:	08 95       	ret

00000c44 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     c44:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     c46:	91 8d       	ldd	r25, Z+25	; 0x19
     c48:	82 8d       	ldd	r24, Z+26	; 0x1a
     c4a:	98 17       	cp	r25, r24
     c4c:	31 f0       	breq	.+12     	; 0xc5a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     c4e:	82 8d       	ldd	r24, Z+26	; 0x1a
     c50:	e8 0f       	add	r30, r24
     c52:	f1 1d       	adc	r31, r1
     c54:	85 8d       	ldd	r24, Z+29	; 0x1d
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     c5e:	08 95       	ret

00000c60 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     c60:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     c62:	91 8d       	ldd	r25, Z+25	; 0x19
     c64:	82 8d       	ldd	r24, Z+26	; 0x1a
     c66:	98 17       	cp	r25, r24
     c68:	61 f0       	breq	.+24     	; 0xc82 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     c6a:	82 8d       	ldd	r24, Z+26	; 0x1a
     c6c:	df 01       	movw	r26, r30
     c6e:	a8 0f       	add	r26, r24
     c70:	b1 1d       	adc	r27, r1
     c72:	5d 96       	adiw	r26, 0x1d	; 29
     c74:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     c76:	92 8d       	ldd	r25, Z+26	; 0x1a
     c78:	9f 5f       	subi	r25, 0xFF	; 255
     c7a:	9f 73       	andi	r25, 0x3F	; 63
     c7c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     c86:	08 95       	ret

00000c88 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     c88:	fc 01       	movw	r30, r24
     c8a:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     c8c:	44 8d       	ldd	r20, Z+28	; 0x1c
     c8e:	25 2f       	mov	r18, r21
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	84 2f       	mov	r24, r20
     c94:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     c96:	82 1b       	sub	r24, r18
     c98:	93 0b       	sbc	r25, r19
     c9a:	54 17       	cp	r21, r20
     c9c:	10 f0       	brcs	.+4      	; 0xca2 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     c9e:	cf 96       	adiw	r24, 0x3f	; 63
     ca0:	08 95       	ret
  return tail - head - 1;
     ca2:	01 97       	sbiw	r24, 0x01	; 1
}
     ca4:	08 95       	ret

00000ca6 <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     ca6:	88 ea       	ldi	r24, 0xA8	; 168
     ca8:	97 e0       	ldi	r25, 0x07	; 7
     caa:	89 2b       	or	r24, r25
     cac:	49 f0       	breq	.+18     	; 0xcc0 <_Z14serialEventRunv+0x1a>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	89 2b       	or	r24, r25
     cb4:	29 f0       	breq	.+10     	; 0xcc0 <_Z14serialEventRunv+0x1a>
     cb6:	0e 94 a8 07 	call	0xf50	; 0xf50 <_Z17Serial1_availablev>
     cba:	81 11       	cpse	r24, r1
     cbc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     cc0:	08 95       	ret

00000cc2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     cc2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     cc4:	84 8d       	ldd	r24, Z+28	; 0x1c
     cc6:	df 01       	movw	r26, r30
     cc8:	a8 0f       	add	r26, r24
     cca:	b1 1d       	adc	r27, r1
     ccc:	a3 5a       	subi	r26, 0xA3	; 163
     cce:	bf 4f       	sbci	r27, 0xFF	; 255
     cd0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     cd2:	84 8d       	ldd	r24, Z+28	; 0x1c
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	8f 73       	andi	r24, 0x3F	; 63
     cda:	99 27       	eor	r25, r25
     cdc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     cde:	a6 89       	ldd	r26, Z+22	; 0x16
     ce0:	b7 89       	ldd	r27, Z+23	; 0x17
     ce2:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     ce4:	a0 89       	ldd	r26, Z+16	; 0x10
     ce6:	b1 89       	ldd	r27, Z+17	; 0x11
     ce8:	8c 91       	ld	r24, X
     cea:	80 64       	ori	r24, 0x40	; 64
     cec:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     cee:	93 8d       	ldd	r25, Z+27	; 0x1b
     cf0:	84 8d       	ldd	r24, Z+28	; 0x1c
     cf2:	98 13       	cpse	r25, r24
     cf4:	06 c0       	rjmp	.+12     	; 0xd02 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     cf6:	02 88       	ldd	r0, Z+18	; 0x12
     cf8:	f3 89       	ldd	r31, Z+19	; 0x13
     cfa:	e0 2d       	mov	r30, r0
     cfc:	80 81       	ld	r24, Z
     cfe:	8f 7d       	andi	r24, 0xDF	; 223
     d00:	80 83       	st	Z, r24
     d02:	08 95       	ret

00000d04 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	ec 01       	movw	r28, r24
  _written = true;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     d16:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d18:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d1a:	98 13       	cpse	r25, r24
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <_ZN14HardwareSerial5writeEh+0x24>
     d1e:	e8 89       	ldd	r30, Y+16	; 0x10
     d20:	f9 89       	ldd	r31, Y+17	; 0x11
     d22:	80 81       	ld	r24, Z
     d24:	85 fd       	sbrc	r24, 5
     d26:	24 c0       	rjmp	.+72     	; 0xd70 <_ZN14HardwareSerial5writeEh+0x6c>
     d28:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     d2a:	0b 8d       	ldd	r16, Y+27	; 0x1b
     d2c:	10 e0       	ldi	r17, 0x00	; 0
     d2e:	0f 5f       	subi	r16, 0xFF	; 255
     d30:	1f 4f       	sbci	r17, 0xFF	; 255
     d32:	0f 73       	andi	r16, 0x3F	; 63
     d34:	11 27       	eor	r17, r17
     d36:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     d38:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d3a:	e8 12       	cpse	r14, r24
     d3c:	0c c0       	rjmp	.+24     	; 0xd56 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	07 fc       	sbrc	r0, 7
     d42:	fa cf       	rjmp	.-12     	; 0xd38 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     d44:	e8 89       	ldd	r30, Y+16	; 0x10
     d46:	f9 89       	ldd	r31, Y+17	; 0x11
     d48:	80 81       	ld	r24, Z
     d4a:	85 ff       	sbrs	r24, 5
     d4c:	f5 cf       	rjmp	.-22     	; 0xd38 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     d4e:	ce 01       	movw	r24, r28
     d50:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     d54:	f1 cf       	rjmp	.-30     	; 0xd38 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d58:	fe 01       	movw	r30, r28
     d5a:	e8 0f       	add	r30, r24
     d5c:	f1 1d       	adc	r31, r1
     d5e:	e3 5a       	subi	r30, 0xA3	; 163
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     d64:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     d66:	ea 89       	ldd	r30, Y+18	; 0x12
     d68:	fb 89       	ldd	r31, Y+19	; 0x13
     d6a:	80 81       	ld	r24, Z
     d6c:	80 62       	ori	r24, 0x20	; 32
     d6e:	07 c0       	rjmp	.+14     	; 0xd7e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     d70:	ee 89       	ldd	r30, Y+22	; 0x16
     d72:	ff 89       	ldd	r31, Y+23	; 0x17
     d74:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     d76:	e8 89       	ldd	r30, Y+16	; 0x10
     d78:	f9 89       	ldd	r31, Y+17	; 0x11
     d7a:	80 81       	ld	r24, Z
     d7c:	80 64       	ori	r24, 0x40	; 64
     d7e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	08 95       	ret

00000d92 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     d98:	88 8d       	ldd	r24, Y+24	; 0x18
     d9a:	88 23       	and	r24, r24
     d9c:	c9 f0       	breq	.+50     	; 0xdd0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     d9e:	ea 89       	ldd	r30, Y+18	; 0x12
     da0:	fb 89       	ldd	r31, Y+19	; 0x13
     da2:	80 81       	ld	r24, Z
     da4:	85 fd       	sbrc	r24, 5
     da6:	05 c0       	rjmp	.+10     	; 0xdb2 <_ZN14HardwareSerial5flushEv+0x20>
     da8:	a8 89       	ldd	r26, Y+16	; 0x10
     daa:	b9 89       	ldd	r27, Y+17	; 0x11
     dac:	8c 91       	ld	r24, X
     dae:	86 fd       	sbrc	r24, 6
     db0:	0f c0       	rjmp	.+30     	; 0xdd0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	07 fc       	sbrc	r0, 7
     db6:	f5 cf       	rjmp	.-22     	; 0xda2 <_ZN14HardwareSerial5flushEv+0x10>
     db8:	80 81       	ld	r24, Z
     dba:	85 ff       	sbrs	r24, 5
     dbc:	f2 cf       	rjmp	.-28     	; 0xda2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     dbe:	a8 89       	ldd	r26, Y+16	; 0x10
     dc0:	b9 89       	ldd	r27, Y+17	; 0x11
     dc2:	8c 91       	ld	r24, X
     dc4:	85 ff       	sbrs	r24, 5
     dc6:	ed cf       	rjmp	.-38     	; 0xda2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     dc8:	ce 01       	movw	r24, r28
     dca:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     dce:	e7 cf       	rjmp	.-50     	; 0xd9e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret

00000dd6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	ec 01       	movw	r28, r24
     de6:	6a 01       	movw	r12, r20
     de8:	7b 01       	movw	r14, r22
     dea:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     dec:	e8 89       	ldd	r30, Y+16	; 0x10
     dee:	f9 89       	ldd	r31, Y+17	; 0x11
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     df4:	41 15       	cp	r20, r1
     df6:	51 4e       	sbci	r21, 0xE1	; 225
     df8:	61 05       	cpc	r22, r1
     dfa:	71 05       	cpc	r23, r1
     dfc:	b1 f0       	breq	.+44     	; 0xe2a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	79 e0       	ldi	r23, 0x09	; 9
     e02:	8d e3       	ldi	r24, 0x3D	; 61
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	a7 01       	movw	r20, r14
     e08:	96 01       	movw	r18, r12
     e0a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodsi4>
     e0e:	da 01       	movw	r26, r20
     e10:	c9 01       	movw	r24, r18
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	a1 09       	sbc	r26, r1
     e16:	b1 09       	sbc	r27, r1
     e18:	b6 95       	lsr	r27
     e1a:	a7 95       	ror	r26
     e1c:	97 95       	ror	r25
     e1e:	87 95       	ror	r24
     e20:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     e22:	21 15       	cp	r18, r1
     e24:	80 e1       	ldi	r24, 0x10	; 16
     e26:	38 07       	cpc	r19, r24
     e28:	a8 f0       	brcs	.+42     	; 0xe54 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     e2a:	e8 89       	ldd	r30, Y+16	; 0x10
     e2c:	f9 89       	ldd	r31, Y+17	; 0x11
     e2e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     e30:	60 e8       	ldi	r22, 0x80	; 128
     e32:	74 e8       	ldi	r23, 0x84	; 132
     e34:	8e e1       	ldi	r24, 0x1E	; 30
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	a7 01       	movw	r20, r14
     e3a:	96 01       	movw	r18, r12
     e3c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodsi4>
     e40:	da 01       	movw	r26, r20
     e42:	c9 01       	movw	r24, r18
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	a1 09       	sbc	r26, r1
     e48:	b1 09       	sbc	r27, r1
     e4a:	b6 95       	lsr	r27
     e4c:	a7 95       	ror	r26
     e4e:	97 95       	ror	r25
     e50:	87 95       	ror	r24
     e52:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     e54:	ec 85       	ldd	r30, Y+12	; 0x0c
     e56:	fd 85       	ldd	r31, Y+13	; 0x0d
     e58:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     e5a:	ee 85       	ldd	r30, Y+14	; 0x0e
     e5c:	ff 85       	ldd	r31, Y+15	; 0x0f
     e5e:	20 83       	st	Z, r18

  _written = false;
     e60:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     e62:	ec 89       	ldd	r30, Y+20	; 0x14
     e64:	fd 89       	ldd	r31, Y+21	; 0x15
     e66:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     e68:	ea 89       	ldd	r30, Y+18	; 0x12
     e6a:	fb 89       	ldd	r31, Y+19	; 0x13
     e6c:	80 81       	ld	r24, Z
     e6e:	80 61       	ori	r24, 0x10	; 16
     e70:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     e72:	ea 89       	ldd	r30, Y+18	; 0x12
     e74:	fb 89       	ldd	r31, Y+19	; 0x13
     e76:	80 81       	ld	r24, Z
     e78:	88 60       	ori	r24, 0x08	; 8
     e7a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     e7c:	ea 89       	ldd	r30, Y+18	; 0x12
     e7e:	fb 89       	ldd	r31, Y+19	; 0x13
     e80:	80 81       	ld	r24, Z
     e82:	80 68       	ori	r24, 0x80	; 128
     e84:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     e86:	ea 89       	ldd	r30, Y+18	; 0x12
     e88:	fb 89       	ldd	r31, Y+19	; 0x13
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 7d       	andi	r24, 0xDF	; 223
     e8e:	80 83       	st	Z, r24
}
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	08 95       	ret

00000ea0 <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	2f 93       	push	r18
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     eb4:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <Serial1+0x10>
     eb8:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <Serial1+0x11>
     ebc:	80 81       	ld	r24, Z
     ebe:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <Serial1+0x16>
     ec2:	f0 91 76 03 	lds	r31, 0x0376	; 0x800376 <Serial1+0x17>
     ec6:	82 fd       	sbrc	r24, 2
     ec8:	12 c0       	rjmp	.+36     	; 0xeee <__vector_25+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     eca:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     ecc:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <Serial1+0x19>
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     ed4:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <Serial1+0x1a>
     ed8:	82 17       	cp	r24, r18
     eda:	51 f0       	breq	.+20     	; 0xef0 <__vector_25+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     edc:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <Serial1+0x19>
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	e1 5a       	subi	r30, 0xA1	; 161
     ee4:	fc 4f       	sbci	r31, 0xFC	; 252
     ee6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     ee8:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <Serial1+0x19>
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <__vector_25+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     eee:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	9f 91       	pop	r25
     ef6:	8f 91       	pop	r24
     ef8:	2f 91       	pop	r18
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     f04:	1f 92       	push	r1
     f06:	0f 92       	push	r0
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	0f 92       	push	r0
     f0c:	11 24       	eor	r1, r1
     f0e:	2f 93       	push	r18
     f10:	3f 93       	push	r19
     f12:	4f 93       	push	r20
     f14:	5f 93       	push	r21
     f16:	6f 93       	push	r22
     f18:	7f 93       	push	r23
     f1a:	8f 93       	push	r24
     f1c:	9f 93       	push	r25
     f1e:	af 93       	push	r26
     f20:	bf 93       	push	r27
     f22:	ef 93       	push	r30
     f24:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
     f26:	8f e5       	ldi	r24, 0x5F	; 95
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     f2e:	ff 91       	pop	r31
     f30:	ef 91       	pop	r30
     f32:	bf 91       	pop	r27
     f34:	af 91       	pop	r26
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	7f 91       	pop	r23
     f3c:	6f 91       	pop	r22
     f3e:	5f 91       	pop	r21
     f40:	4f 91       	pop	r20
     f42:	3f 91       	pop	r19
     f44:	2f 91       	pop	r18
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	0f 90       	pop	r0
     f4c:	1f 90       	pop	r1
     f4e:	18 95       	reti

00000f50 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     f50:	8f e5       	ldi	r24, 0x5F	; 95
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN14HardwareSerial9availableEv>
     f58:	21 e0       	ldi	r18, 0x01	; 1
     f5a:	89 2b       	or	r24, r25
     f5c:	09 f4       	brne	.+2      	; 0xf60 <_Z17Serial1_availablev+0x10>
     f5e:	20 e0       	ldi	r18, 0x00	; 0
}
     f60:	82 2f       	mov	r24, r18
     f62:	08 95       	ret

00000f64 <_GLOBAL__sub_I___vector_25>:
     f64:	ef e5       	ldi	r30, 0x5F	; 95
     f66:	f3 e0       	ldi	r31, 0x03	; 3
     f68:	13 82       	std	Z+3, r1	; 0x03
     f6a:	12 82       	std	Z+2, r1	; 0x02
     f6c:	88 ee       	ldi	r24, 0xE8	; 232
     f6e:	93 e0       	ldi	r25, 0x03	; 3
     f70:	a0 e0       	ldi	r26, 0x00	; 0
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	84 83       	std	Z+4, r24	; 0x04
     f76:	95 83       	std	Z+5, r25	; 0x05
     f78:	a6 83       	std	Z+6, r26	; 0x06
     f7a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     f7c:	81 ea       	ldi	r24, 0xA1	; 161
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	91 83       	std	Z+1, r25	; 0x01
     f82:	80 83       	st	Z, r24
     f84:	8d ec       	ldi	r24, 0xCD	; 205
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	95 87       	std	Z+13, r25	; 0x0d
     f8a:	84 87       	std	Z+12, r24	; 0x0c
     f8c:	8c ec       	ldi	r24, 0xCC	; 204
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	97 87       	std	Z+15, r25	; 0x0f
     f92:	86 87       	std	Z+14, r24	; 0x0e
     f94:	88 ec       	ldi	r24, 0xC8	; 200
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	91 8b       	std	Z+17, r25	; 0x11
     f9a:	80 8b       	std	Z+16, r24	; 0x10
     f9c:	89 ec       	ldi	r24, 0xC9	; 201
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	93 8b       	std	Z+19, r25	; 0x13
     fa2:	82 8b       	std	Z+18, r24	; 0x12
     fa4:	8a ec       	ldi	r24, 0xCA	; 202
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	95 8b       	std	Z+21, r25	; 0x15
     faa:	84 8b       	std	Z+20, r24	; 0x14
     fac:	8e ec       	ldi	r24, 0xCE	; 206
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	97 8b       	std	Z+23, r25	; 0x17
     fb2:	86 8b       	std	Z+22, r24	; 0x16
     fb4:	11 8e       	std	Z+25, r1	; 0x19
     fb6:	12 8e       	std	Z+26, r1	; 0x1a
     fb8:	13 8e       	std	Z+27, r1	; 0x1b
     fba:	14 8e       	std	Z+28, r1	; 0x1c
     fbc:	08 95       	ret

00000fbe <initVariant>:
     fbe:	08 95       	ret

00000fc0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     fc0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <init>

	initVariant();
     fc4:	0e 94 df 07 	call	0xfbe	; 0xfbe <initVariant>

#if defined(USBCON)
	USBDevice.attach();
     fc8:	88 e1       	ldi	r24, 0x18	; 24
     fca:	94 e0       	ldi	r25, 0x04	; 4
     fcc:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
     fd0:	0e 94 93 02 	call	0x526	; 0x526 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     fd4:	c3 e5       	ldi	r28, 0x53	; 83
     fd6:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
     fd8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <loop>
		if (serialEventRun) serialEventRun();
     fdc:	20 97       	sbiw	r28, 0x00	; 0
     fde:	e1 f3       	breq	.-8      	; 0xfd8 <main+0x18>
     fe0:	0e 94 53 06 	call	0xca6	; 0xca6 <_Z14serialEventRunv>
     fe4:	f9 cf       	rjmp	.-14     	; 0xfd8 <main+0x18>

00000fe6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     fe6:	cf 92       	push	r12
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	6c 01       	movw	r12, r24
     ff8:	7a 01       	movw	r14, r20
     ffa:	8b 01       	movw	r16, r22
  size_t n = 0;
     ffc:	c0 e0       	ldi	r28, 0x00	; 0
     ffe:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    1000:	ce 15       	cp	r28, r14
    1002:	df 05       	cpc	r29, r15
    1004:	81 f0       	breq	.+32     	; 0x1026 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    1006:	d8 01       	movw	r26, r16
    1008:	6d 91       	ld	r22, X+
    100a:	8d 01       	movw	r16, r26
    100c:	d6 01       	movw	r26, r12
    100e:	ed 91       	ld	r30, X+
    1010:	fc 91       	ld	r31, X
    1012:	01 90       	ld	r0, Z+
    1014:	f0 81       	ld	r31, Z
    1016:	e0 2d       	mov	r30, r0
    1018:	c6 01       	movw	r24, r12
    101a:	09 95       	icall
    101c:	89 2b       	or	r24, r25
    101e:	11 f0       	breq	.+4      	; 0x1024 <_ZN5Print5writeEPKhj+0x3e>
    1020:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1022:	ee cf       	rjmp	.-36     	; 0x1000 <_ZN5Print5writeEPKhj+0x1a>
    1024:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    1026:	c7 01       	movw	r24, r14
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	08 95       	ret

0000103a <_ZN6Stream9timedReadEv>:
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	ec 01       	movw	r28, r24
    1044:	0e 94 73 10 	call	0x20e6	; 0x20e6 <millis>
    1048:	68 87       	std	Y+8, r22	; 0x08
    104a:	79 87       	std	Y+9, r23	; 0x09
    104c:	8a 87       	std	Y+10, r24	; 0x0a
    104e:	9b 87       	std	Y+11, r25	; 0x0b
    1050:	e8 81       	ld	r30, Y
    1052:	f9 81       	ldd	r31, Y+1	; 0x01
    1054:	02 84       	ldd	r0, Z+10	; 0x0a
    1056:	f3 85       	ldd	r31, Z+11	; 0x0b
    1058:	e0 2d       	mov	r30, r0
    105a:	ce 01       	movw	r24, r28
    105c:	09 95       	icall
    105e:	97 ff       	sbrs	r25, 7
    1060:	17 c0       	rjmp	.+46     	; 0x1090 <_ZN6Stream9timedReadEv+0x56>
    1062:	0e 94 73 10 	call	0x20e6	; 0x20e6 <millis>
    1066:	08 85       	ldd	r16, Y+8	; 0x08
    1068:	19 85       	ldd	r17, Y+9	; 0x09
    106a:	2a 85       	ldd	r18, Y+10	; 0x0a
    106c:	3b 85       	ldd	r19, Y+11	; 0x0b
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	80 1b       	sub	r24, r16
    1074:	91 0b       	sbc	r25, r17
    1076:	a2 0b       	sbc	r26, r18
    1078:	b3 0b       	sbc	r27, r19
    107a:	0c 81       	ldd	r16, Y+4	; 0x04
    107c:	1d 81       	ldd	r17, Y+5	; 0x05
    107e:	2e 81       	ldd	r18, Y+6	; 0x06
    1080:	3f 81       	ldd	r19, Y+7	; 0x07
    1082:	80 17       	cp	r24, r16
    1084:	91 07       	cpc	r25, r17
    1086:	a2 07       	cpc	r26, r18
    1088:	b3 07       	cpc	r27, r19
    108a:	10 f3       	brcs	.-60     	; 0x1050 <_ZN6Stream9timedReadEv+0x16>
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	9f ef       	ldi	r25, 0xFF	; 255
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	08 95       	ret

0000109a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	6c 01       	movw	r12, r24
    10ac:	7a 01       	movw	r14, r20
    10ae:	8b 01       	movw	r16, r22
  size_t count = 0;
    10b0:	c0 e0       	ldi	r28, 0x00	; 0
    10b2:	d0 e0       	ldi	r29, 0x00	; 0
  while (count < length) {
    10b4:	ce 15       	cp	r28, r14
    10b6:	df 05       	cpc	r29, r15
    10b8:	59 f0       	breq	.+22     	; 0x10d0 <_ZN6Stream9readBytesEPcj+0x36>
    int c = timedRead();
    10ba:	c6 01       	movw	r24, r12
    10bc:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    10c0:	97 fd       	sbrc	r25, 7
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <_ZN6Stream9readBytesEPcj+0x34>
    *buffer++ = (char)c;
    10c4:	f8 01       	movw	r30, r16
    10c6:	81 93       	st	Z+, r24
    10c8:	8f 01       	movw	r16, r30
    count++;
    10ca:	21 96       	adiw	r28, 0x01	; 1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    10cc:	f3 cf       	rjmp	.-26     	; 0x10b4 <_ZN6Stream9readBytesEPcj+0x1a>
    10ce:	7e 01       	movw	r14, r28
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    10d0:	c7 01       	movw	r24, r14
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	df 90       	pop	r13
    10e0:	cf 90       	pop	r12
    10e2:	08 95       	ret

000010e4 <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    10e4:	4f 92       	push	r4
    10e6:	5f 92       	push	r5
    10e8:	6f 92       	push	r6
    10ea:	7f 92       	push	r7
    10ec:	8f 92       	push	r8
    10ee:	9f 92       	push	r9
    10f0:	af 92       	push	r10
    10f2:	bf 92       	push	r11
    10f4:	cf 92       	push	r12
    10f6:	df 92       	push	r13
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	00 d0       	rcall	.+0      	; 0x1106 <_Z4tonehjm+0x22>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <_Z4tonehjm+0x24>
    1108:	1f 92       	push	r1
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	8b 01       	movw	r16, r22
    1110:	29 01       	movw	r4, r18
    1112:	3a 01       	movw	r6, r20
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1114:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_ZL9tone_pins>
    1118:	89 17       	cp	r24, r25
    111a:	21 f0       	breq	.+8      	; 0x1124 <_Z4tonehjm+0x40>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    111c:	9f 3f       	cpi	r25, 0xFF	; 255
    111e:	09 f0       	breq	.+2      	; 0x1122 <_Z4tonehjm+0x3e>
    1120:	a8 c2       	rjmp	.+1360   	; 0x1672 <_Z4tonehjm+0x58e>
    1122:	05 c0       	rjmp	.+10     	; 0x112e <_Z4tonehjm+0x4a>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    1124:	ea e2       	ldi	r30, 0x2A	; 42
    1126:	f1 e0       	ldi	r31, 0x01	; 1
    1128:	24 91       	lpm	r18, Z
    112a:	2d 83       	std	Y+5, r18	; 0x05
    112c:	ac c0       	rjmp	.+344    	; 0x1286 <_Z4tonehjm+0x1a2>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    112e:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <_ZL9tone_pins>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1132:	ea e2       	ldi	r30, 0x2A	; 42
    1134:	f1 e0       	ldi	r31, 0x01	; 1
    1136:	94 91       	lpm	r25, Z
    1138:	9d 83       	std	Y+5, r25	; 0x05
      break;
    }
  }
  
  if (_timer != -1)
    113a:	9f 3f       	cpi	r25, 0xFF	; 255
    113c:	09 f4       	brne	.+2      	; 0x1140 <_Z4tonehjm+0x5c>
    113e:	99 c2       	rjmp	.+1330   	; 0x1672 <_Z4tonehjm+0x58e>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    1140:	91 30       	cpi	r25, 0x01	; 1
    1142:	09 f4       	brne	.+2      	; 0x1146 <_Z4tonehjm+0x62>
    1144:	4f c0       	rjmp	.+158    	; 0x11e4 <_Z4tonehjm+0x100>
    1146:	68 f1       	brcs	.+90     	; 0x11a2 <_Z4tonehjm+0xbe>
    1148:	93 30       	cpi	r25, 0x03	; 3
    114a:	09 f4       	brne	.+2      	; 0x114e <_Z4tonehjm+0x6a>
    114c:	72 c0       	rjmp	.+228    	; 0x1232 <_Z4tonehjm+0x14e>
    114e:	94 30       	cpi	r25, 0x04	; 4
    1150:	09 f0       	breq	.+2      	; 0x1154 <_Z4tonehjm+0x70>
    1152:	99 c0       	rjmp	.+306    	; 0x1286 <_Z4tonehjm+0x1a2>
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
    1154:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        TCCR4B = 0;
    1158:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
        #elif defined(CS43)
          // TODO this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
    115c:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1160:	98 60       	ori	r25, 0x08	; 8
    1162:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
        #endif
        bitWrite(TCCR4B, CS40, 1);
    1166:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    116a:	91 60       	ori	r25, 0x01	; 1
    116c:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	f9 01       	movw	r30, r18
    1176:	e8 55       	subi	r30, 0x58	; 88
    1178:	fe 4f       	sbci	r31, 0xFE	; 254
    117a:	e4 91       	lpm	r30, Z
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	eb 52       	subi	r30, 0x2B	; 43
    1184:	fe 4f       	sbci	r31, 0xFE	; 254
    1186:	45 91       	lpm	r20, Z+
    1188:	54 91       	lpm	r21, Z
    118a:	50 93 fe 03 	sts	0x03FE, r21	; 0x8003fe <timer4_pin_port+0x1>
    118e:	40 93 fd 03 	sts	0x03FD, r20	; 0x8003fd <timer4_pin_port>
        timer4_pin_mask = digitalPinToBitMask(_pin);
    1192:	f9 01       	movw	r30, r18
    1194:	e7 57       	subi	r30, 0x77	; 119
    1196:	fe 4f       	sbci	r31, 0xFE	; 254
    1198:	e4 91       	lpm	r30, Z
    119a:	e0 93 fc 03 	sts	0x03FC, r30	; 0x8003fc <timer4_pin_mask>
    119e:	24 e0       	ldi	r18, 0x04	; 4
    11a0:	70 c0       	rjmp	.+224    	; 0x1282 <_Z4tonehjm+0x19e>
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    11a2:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
    11a4:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
    11a6:	94 b5       	in	r25, 0x24	; 36
    11a8:	92 60       	ori	r25, 0x02	; 2
    11aa:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
    11ac:	95 b5       	in	r25, 0x25	; 37
    11ae:	91 60       	ori	r25, 0x01	; 1
    11b0:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	f9 01       	movw	r30, r18
    11b8:	e8 55       	subi	r30, 0x58	; 88
    11ba:	fe 4f       	sbci	r31, 0xFE	; 254
    11bc:	e4 91       	lpm	r30, Z
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	ee 0f       	add	r30, r30
    11c2:	ff 1f       	adc	r31, r31
    11c4:	eb 52       	subi	r30, 0x2B	; 43
    11c6:	fe 4f       	sbci	r31, 0xFE	; 254
    11c8:	45 91       	lpm	r20, Z+
    11ca:	54 91       	lpm	r21, Z
    11cc:	50 93 13 04 	sts	0x0413, r21	; 0x800413 <timer0_pin_port+0x1>
    11d0:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <timer0_pin_port>
        timer0_pin_mask = digitalPinToBitMask(_pin);
    11d4:	f9 01       	movw	r30, r18
    11d6:	e7 57       	subi	r30, 0x77	; 119
    11d8:	fe 4f       	sbci	r31, 0xFE	; 254
    11da:	e4 91       	lpm	r30, Z
    11dc:	e0 93 11 04 	sts	0x0411, r30	; 0x800411 <timer0_pin_mask>
    11e0:	1d 82       	std	Y+5, r1	; 0x05
    11e2:	54 c0       	rjmp	.+168    	; 0x128c <_Z4tonehjm+0x1a8>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    11e4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        TCCR1B = 0;
    11e8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        bitWrite(TCCR1B, WGM12, 1);
    11ec:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    11f0:	98 60       	ori	r25, 0x08	; 8
    11f2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        bitWrite(TCCR1B, CS10, 1);
    11f6:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    11fa:	91 60       	ori	r25, 0x01	; 1
    11fc:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	f9 01       	movw	r30, r18
    1206:	e8 55       	subi	r30, 0x58	; 88
    1208:	fe 4f       	sbci	r31, 0xFE	; 254
    120a:	e4 91       	lpm	r30, Z
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	ee 0f       	add	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	eb 52       	subi	r30, 0x2B	; 43
    1214:	fe 4f       	sbci	r31, 0xFE	; 254
    1216:	45 91       	lpm	r20, Z+
    1218:	54 91       	lpm	r21, Z
    121a:	50 93 0c 04 	sts	0x040C, r21	; 0x80040c <timer1_pin_port+0x1>
    121e:	40 93 0b 04 	sts	0x040B, r20	; 0x80040b <timer1_pin_port>
        timer1_pin_mask = digitalPinToBitMask(_pin);
    1222:	f9 01       	movw	r30, r18
    1224:	e7 57       	subi	r30, 0x77	; 119
    1226:	fe 4f       	sbci	r31, 0xFE	; 254
    1228:	e4 91       	lpm	r30, Z
    122a:	e0 93 0a 04 	sts	0x040A, r30	; 0x80040a <timer1_pin_mask>
    122e:	21 e0       	ldi	r18, 0x01	; 1
    1230:	28 c0       	rjmp	.+80     	; 0x1282 <_Z4tonehjm+0x19e>
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
    1232:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
        TCCR3B = 0;
    1236:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
        bitWrite(TCCR3B, WGM32, 1);
    123a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    123e:	98 60       	ori	r25, 0x08	; 8
    1240:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
        bitWrite(TCCR3B, CS30, 1);
    1244:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    1248:	91 60       	ori	r25, 0x01	; 1
    124a:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	f9 01       	movw	r30, r18
    1254:	e8 55       	subi	r30, 0x58	; 88
    1256:	fe 4f       	sbci	r31, 0xFE	; 254
    1258:	e4 91       	lpm	r30, Z
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	ee 0f       	add	r30, r30
    125e:	ff 1f       	adc	r31, r31
    1260:	eb 52       	subi	r30, 0x2B	; 43
    1262:	fe 4f       	sbci	r31, 0xFE	; 254
    1264:	45 91       	lpm	r20, Z+
    1266:	54 91       	lpm	r21, Z
    1268:	50 93 05 04 	sts	0x0405, r21	; 0x800405 <timer3_pin_port+0x1>
    126c:	40 93 04 04 	sts	0x0404, r20	; 0x800404 <timer3_pin_port>
        timer3_pin_mask = digitalPinToBitMask(_pin);
    1270:	f9 01       	movw	r30, r18
    1272:	e7 57       	subi	r30, 0x77	; 119
    1274:	fe 4f       	sbci	r31, 0xFE	; 254
    1276:	e4 91       	lpm	r30, Z
    1278:	e0 93 03 04 	sts	0x0403, r30	; 0x800403 <timer3_pin_mask>
    127c:	93 e0       	ldi	r25, 0x03	; 3
    127e:	9d 83       	std	Y+5, r25	; 0x05
    1280:	82 c0       	rjmp	.+260    	; 0x1386 <_Z4tonehjm+0x2a2>
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
        timer4_pin_mask = digitalPinToBitMask(_pin);
    1282:	2d 83       	std	Y+5, r18	; 0x05
    1284:	80 c0       	rjmp	.+256    	; 0x1386 <_Z4tonehjm+0x2a2>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	97 fd       	sbrc	r25, 7
    128a:	f3 c1       	rjmp	.+998    	; 0x1672 <_Z4tonehjm+0x58e>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    128c:	61 e0       	ldi	r22, 0x01	; 1
    128e:	0e 94 3c 12 	call	0x2478	; 0x2478 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	8d 7f       	andi	r24, 0xFD	; 253
    1296:	09 f0       	breq	.+2      	; 0x129a <_Z4tonehjm+0x1b6>
    1298:	79 c0       	rjmp	.+242    	; 0x138c <_Z4tonehjm+0x2a8>
    {
      ocr = F_CPU / frequency / 2 - 1;
    129a:	48 01       	movw	r8, r16
    129c:	a1 2c       	mov	r10, r1
    129e:	b1 2c       	mov	r11, r1
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	72 e1       	ldi	r23, 0x12	; 18
    12a4:	8a e7       	ldi	r24, 0x7A	; 122
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a5 01       	movw	r20, r10
    12aa:	94 01       	movw	r18, r8
    12ac:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    12b0:	29 83       	std	Y+1, r18	; 0x01
    12b2:	3a 83       	std	Y+2, r19	; 0x02
    12b4:	4b 83       	std	Y+3, r20	; 0x03
    12b6:	5c 83       	std	Y+4, r21	; 0x04
    12b8:	69 01       	movw	r12, r18
    12ba:	7a 01       	movw	r14, r20
    12bc:	21 e0       	ldi	r18, 0x01	; 1
    12be:	c2 1a       	sub	r12, r18
    12c0:	d1 08       	sbc	r13, r1
    12c2:	e1 08       	sbc	r14, r1
    12c4:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	c8 16       	cp	r12, r24
    12ca:	d1 04       	cpc	r13, r1
    12cc:	e1 04       	cpc	r14, r1
    12ce:	f1 04       	cpc	r15, r1
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <_Z4tonehjm+0x1f0>
    12d2:	08 f4       	brcc	.+2      	; 0x12d6 <_Z4tonehjm+0x1f2>
    12d4:	4d c0       	rjmp	.+154    	; 0x1370 <_Z4tonehjm+0x28c>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    12d6:	60 e4       	ldi	r22, 0x40	; 64
    12d8:	72 e4       	ldi	r23, 0x42	; 66
    12da:	8f e0       	ldi	r24, 0x0F	; 15
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	a5 01       	movw	r20, r10
    12e0:	94 01       	movw	r18, r8
    12e2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    12e6:	69 01       	movw	r12, r18
    12e8:	7a 01       	movw	r14, r20
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	c9 1a       	sub	r12, r25
    12ee:	d1 08       	sbc	r13, r1
    12f0:	e1 08       	sbc	r14, r1
    12f2:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    12f4:	2d 81       	ldd	r18, Y+5	; 0x05
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	01 f5       	brne	.+64     	; 0x133a <_Z4tonehjm+0x256>
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	c8 16       	cp	r12, r24
    12fe:	d1 04       	cpc	r13, r1
    1300:	e1 04       	cpc	r14, r1
    1302:	f1 04       	cpc	r15, r1
    1304:	09 f0       	breq	.+2      	; 0x1308 <_Z4tonehjm+0x224>
    1306:	08 f4       	brcc	.+2      	; 0x130a <_Z4tonehjm+0x226>
    1308:	5f c1       	rjmp	.+702    	; 0x15c8 <_Z4tonehjm+0x4e4>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    130a:	60 e9       	ldi	r22, 0x90	; 144
    130c:	70 ed       	ldi	r23, 0xD0	; 208
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a5 01       	movw	r20, r10
    1314:	94 01       	movw	r18, r8
    1316:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    131a:	69 01       	movw	r12, r18
    131c:	7a 01       	movw	r14, r20
    131e:	91 e0       	ldi	r25, 0x01	; 1
    1320:	c9 1a       	sub	r12, r25
    1322:	d1 08       	sbc	r13, r1
    1324:	e1 08       	sbc	r14, r1
    1326:	f1 08       	sbc	r15, r1
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    1328:	2f ef       	ldi	r18, 0xFF	; 255
    132a:	c2 16       	cp	r12, r18
    132c:	d1 04       	cpc	r13, r1
    132e:	e1 04       	cpc	r14, r1
    1330:	f1 04       	cpc	r15, r1
    1332:	11 f0       	breq	.+4      	; 0x1338 <_Z4tonehjm+0x254>
    1334:	08 f0       	brcs	.+2      	; 0x1338 <_Z4tonehjm+0x254>
    1336:	8e c0       	rjmp	.+284    	; 0x1454 <_Z4tonehjm+0x370>
    1338:	e2 c0       	rjmp	.+452    	; 0x14fe <_Z4tonehjm+0x41a>
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	c8 16       	cp	r12, r24
    133e:	d1 04       	cpc	r13, r1
    1340:	e1 04       	cpc	r14, r1
    1342:	f1 04       	cpc	r15, r1
    1344:	b9 f0       	breq	.+46     	; 0x1374 <_Z4tonehjm+0x290>
    1346:	b0 f0       	brcs	.+44     	; 0x1374 <_Z4tonehjm+0x290>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    1348:	68 e4       	ldi	r22, 0x48	; 72
    134a:	78 ee       	ldi	r23, 0xE8	; 232
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a5 01       	movw	r20, r10
    1352:	94 01       	movw	r18, r8
    1354:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    1358:	69 01       	movw	r12, r18
    135a:	7a 01       	movw	r14, r20
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	c9 1a       	sub	r12, r25
    1360:	d1 08       	sbc	r13, r1
    1362:	e1 08       	sbc	r14, r1
    1364:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    1366:	2d 81       	ldd	r18, Y+5	; 0x05
    1368:	22 23       	and	r18, r18
    136a:	09 f4       	brne	.+2      	; 0x136e <_Z4tonehjm+0x28a>
    136c:	34 c1       	rjmp	.+616    	; 0x15d6 <_Z4tonehjm+0x4f2>
    136e:	68 c1       	rjmp	.+720    	; 0x1640 <_Z4tonehjm+0x55c>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <_Z4tonehjm+0x292>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    1374:	82 e0       	ldi	r24, 0x02	; 2
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	91 11       	cpse	r25, r1
    137a:	c1 c0       	rjmp	.+386    	; 0x14fe <_Z4tonehjm+0x41a>
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    137c:	95 b5       	in	r25, 0x25	; 37
    137e:	98 7f       	andi	r25, 0xF8	; 248
    1380:	89 2b       	or	r24, r25
    1382:	85 bd       	out	0x25, r24	; 37
    1384:	bc c0       	rjmp	.+376    	; 0x14fe <_Z4tonehjm+0x41a>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	0e 94 3c 12 	call	0x2478	; 0x2478 <pinMode>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    138c:	48 01       	movw	r8, r16
    138e:	a1 2c       	mov	r10, r1
    1390:	b1 2c       	mov	r11, r1
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	72 e1       	ldi	r23, 0x12	; 18
    1396:	8a e7       	ldi	r24, 0x7A	; 122
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a5 01       	movw	r20, r10
    139c:	94 01       	movw	r18, r8
    139e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    13a2:	69 01       	movw	r12, r18
    13a4:	7a 01       	movw	r14, r20
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	c8 1a       	sub	r12, r24
    13aa:	d1 08       	sbc	r13, r1
    13ac:	e1 08       	sbc	r14, r1
    13ae:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    13b0:	c1 14       	cp	r12, r1
    13b2:	d1 04       	cpc	r13, r1
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	e9 06       	cpc	r14, r25
    13b8:	f1 04       	cpc	r15, r1
    13ba:	88 f0       	brcs	.+34     	; 0x13de <_Z4tonehjm+0x2fa>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    13bc:	68 e4       	ldi	r22, 0x48	; 72
    13be:	78 ee       	ldi	r23, 0xE8	; 232
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a5 01       	movw	r20, r10
    13c6:	94 01       	movw	r18, r8
    13c8:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    13cc:	69 01       	movw	r12, r18
    13ce:	7a 01       	movw	r14, r20
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	c8 1a       	sub	r12, r24
    13d4:	d1 08       	sbc	r13, r1
    13d6:	e1 08       	sbc	r14, r1
    13d8:	f1 08       	sbc	r15, r1
        prescalarbits = 0b011;
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <_Z4tonehjm+0x2fc>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    13de:	81 e0       	ldi	r24, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	91 30       	cpi	r25, 0x01	; 1
    13e4:	81 f4       	brne	.+32     	; 0x1406 <_Z4tonehjm+0x322>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    13e6:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    13ea:	98 7f       	andi	r25, 0xF8	; 248
    13ec:	89 2b       	or	r24, r25
    13ee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    13f2:	41 14       	cp	r4, r1
    13f4:	51 04       	cpc	r5, r1
    13f6:	61 04       	cpc	r6, r1
    13f8:	71 04       	cpc	r7, r1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <_Z4tonehjm+0x31a>
    13fc:	85 c0       	rjmp	.+266    	; 0x1508 <_Z4tonehjm+0x424>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    13fe:	2f ef       	ldi	r18, 0xFF	; 255
    1400:	3f ef       	ldi	r19, 0xFF	; 255
    1402:	a9 01       	movw	r20, r18
    1404:	ad c0       	rjmp	.+346    	; 0x1560 <_Z4tonehjm+0x47c>
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    1406:	2d 81       	ldd	r18, Y+5	; 0x05
    1408:	23 30       	cpi	r18, 0x03	; 3
    140a:	81 f4       	brne	.+32     	; 0x142c <_Z4tonehjm+0x348>
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    140c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    1410:	98 7f       	andi	r25, 0xF8	; 248
    1412:	89 2b       	or	r24, r25
    1414:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    1418:	41 14       	cp	r4, r1
    141a:	51 04       	cpc	r5, r1
    141c:	61 04       	cpc	r6, r1
    141e:	71 04       	cpc	r7, r1
    1420:	09 f0       	breq	.+2      	; 0x1424 <_Z4tonehjm+0x340>
    1422:	72 c0       	rjmp	.+228    	; 0x1508 <_Z4tonehjm+0x424>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    1424:	2f ef       	ldi	r18, 0xFF	; 255
    1426:	3f ef       	ldi	r19, 0xFF	; 255
    1428:	a9 01       	movw	r20, r18
    142a:	ac c0       	rjmp	.+344    	; 0x1584 <_Z4tonehjm+0x4a0>
#if defined(TCCR3B)
      else if (_timer == 3)
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	94 30       	cpi	r25, 0x04	; 4
    1430:	09 f0       	breq	.+2      	; 0x1434 <_Z4tonehjm+0x350>
    1432:	65 c0       	rjmp	.+202    	; 0x14fe <_Z4tonehjm+0x41a>
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
    1434:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1438:	98 7f       	andi	r25, 0xF8	; 248
    143a:	89 2b       	or	r24, r25
    143c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    1440:	41 14       	cp	r4, r1
    1442:	51 04       	cpc	r5, r1
    1444:	61 04       	cpc	r6, r1
    1446:	71 04       	cpc	r7, r1
    1448:	09 f0       	breq	.+2      	; 0x144c <_Z4tonehjm+0x368>
    144a:	5e c0       	rjmp	.+188    	; 0x1508 <_Z4tonehjm+0x424>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    144c:	2f ef       	ldi	r18, 0xFF	; 255
    144e:	3f ef       	ldi	r19, 0xFF	; 255
    1450:	a9 01       	movw	r20, r18
    1452:	aa c0       	rjmp	.+340    	; 0x15a8 <_Z4tonehjm+0x4c4>
          prescalarbits = 0b011;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    1454:	68 e4       	ldi	r22, 0x48	; 72
    1456:	78 ee       	ldi	r23, 0xE8	; 232
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a5 01       	movw	r20, r10
    145e:	94 01       	movw	r18, r8
    1460:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    1464:	69 01       	movw	r12, r18
    1466:	7a 01       	movw	r14, r20
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	c8 1a       	sub	r12, r24
    146c:	d1 08       	sbc	r13, r1
    146e:	e1 08       	sbc	r14, r1
    1470:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
    1472:	9f ef       	ldi	r25, 0xFF	; 255
    1474:	c9 16       	cp	r12, r25
    1476:	d1 04       	cpc	r13, r1
    1478:	e1 04       	cpc	r14, r1
    147a:	f1 04       	cpc	r15, r1
    147c:	09 f0       	breq	.+2      	; 0x1480 <_Z4tonehjm+0x39c>
    147e:	08 f4       	brcc	.+2      	; 0x1482 <_Z4tonehjm+0x39e>
    1480:	a3 c0       	rjmp	.+326    	; 0x15c8 <_Z4tonehjm+0x4e4>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    1482:	64 e2       	ldi	r22, 0x24	; 36
    1484:	74 ef       	ldi	r23, 0xF4	; 244
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a5 01       	movw	r20, r10
    148c:	94 01       	movw	r18, r8
    148e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    1492:	69 01       	movw	r12, r18
    1494:	7a 01       	movw	r14, r20
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	c8 1a       	sub	r12, r24
    149a:	d1 08       	sbc	r13, r1
    149c:	e1 08       	sbc	r14, r1
    149e:	f1 08       	sbc	r15, r1
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    14a0:	9f ef       	ldi	r25, 0xFF	; 255
    14a2:	c9 16       	cp	r12, r25
    14a4:	d1 04       	cpc	r13, r1
    14a6:	e1 04       	cpc	r14, r1
    14a8:	f1 04       	cpc	r15, r1
    14aa:	49 f1       	breq	.+82     	; 0x14fe <_Z4tonehjm+0x41a>
    14ac:	40 f1       	brcs	.+80     	; 0x14fe <_Z4tonehjm+0x41a>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    14ae:	62 e1       	ldi	r22, 0x12	; 18
    14b0:	7a e7       	ldi	r23, 0x7A	; 122
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a5 01       	movw	r20, r10
    14b8:	94 01       	movw	r18, r8
    14ba:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    14be:	69 01       	movw	r12, r18
    14c0:	7a 01       	movw	r14, r20
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	c8 1a       	sub	r12, r24
    14c6:	d1 08       	sbc	r13, r1
    14c8:	e1 08       	sbc	r14, r1
    14ca:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	c8 16       	cp	r12, r24
    14d0:	d1 04       	cpc	r13, r1
    14d2:	e1 04       	cpc	r14, r1
    14d4:	f1 04       	cpc	r15, r1
    14d6:	99 f0       	breq	.+38     	; 0x14fe <_Z4tonehjm+0x41a>
    14d8:	90 f0       	brcs	.+36     	; 0x14fe <_Z4tonehjm+0x41a>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	ab 81       	ldd	r26, Y+3	; 0x03
    14e0:	bc 81       	ldd	r27, Y+4	; 0x04
    14e2:	2a e0       	ldi	r18, 0x0A	; 10
    14e4:	b5 95       	asr	r27
    14e6:	a7 95       	ror	r26
    14e8:	97 95       	ror	r25
    14ea:	87 95       	ror	r24
    14ec:	2a 95       	dec	r18
    14ee:	d1 f7       	brne	.-12     	; 0x14e4 <_Z4tonehjm+0x400>
    14f0:	6c 01       	movw	r12, r24
    14f2:	7d 01       	movw	r14, r26
    14f4:	21 e0       	ldi	r18, 0x01	; 1
    14f6:	c2 1a       	sub	r12, r18
    14f8:	d1 08       	sbc	r13, r1
    14fa:	e1 08       	sbc	r14, r1
    14fc:	f1 08       	sbc	r15, r1

    }
    

    // Calculate the toggle count
    if (duration > 0)
    14fe:	41 14       	cp	r4, r1
    1500:	51 04       	cpc	r5, r1
    1502:	61 04       	cpc	r6, r1
    1504:	71 04       	cpc	r7, r1
    1506:	71 f0       	breq	.+28     	; 0x1524 <_Z4tonehjm+0x440>
    {
      toggle_count = 2 * frequency * duration / 1000;
    1508:	d8 01       	movw	r26, r16
    150a:	aa 0f       	add	r26, r26
    150c:	bb 1f       	adc	r27, r27
    150e:	a3 01       	movw	r20, r6
    1510:	92 01       	movw	r18, r4
    1512:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__muluhisi3>
    1516:	28 ee       	ldi	r18, 0xE8	; 232
    1518:	33 e0       	ldi	r19, 0x03	; 3
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodsi4>
    1522:	03 c0       	rjmp	.+6      	; 0x152a <_Z4tonehjm+0x446>
    }
    else
    {
      toggle_count = -1;
    1524:	2f ef       	ldi	r18, 0xFF	; 255
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	a9 01       	movw	r20, r18
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	c1 f0       	breq	.+48     	; 0x1560 <_Z4tonehjm+0x47c>
    1530:	8c f4       	brge	.+34     	; 0x1554 <_Z4tonehjm+0x470>
    1532:	81 11       	cpse	r24, r1
    1534:	9e c0       	rjmp	.+316    	; 0x1672 <_Z4tonehjm+0x58e>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    1536:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
    1538:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <timer0_toggle_count>
    153c:	30 93 15 04 	sts	0x0415, r19	; 0x800415 <timer0_toggle_count+0x1>
    1540:	40 93 16 04 	sts	0x0416, r20	; 0x800416 <timer0_toggle_count+0x2>
    1544:	50 93 17 04 	sts	0x0417, r21	; 0x800417 <timer0_toggle_count+0x3>
        bitWrite(TIMSK0, OCIE0A, 1);
    1548:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    154c:	82 60       	ori	r24, 0x02	; 2
    154e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
        break;
    1552:	8f c0       	rjmp	.+286    	; 0x1672 <_Z4tonehjm+0x58e>
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	93 30       	cpi	r25, 0x03	; 3
    1558:	a9 f0       	breq	.+42     	; 0x1584 <_Z4tonehjm+0x4a0>
    155a:	94 30       	cpi	r25, 0x04	; 4
    155c:	29 f1       	breq	.+74     	; 0x15a8 <_Z4tonehjm+0x4c4>
    155e:	89 c0       	rjmp	.+274    	; 0x1672 <_Z4tonehjm+0x58e>
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    1560:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1564:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
        timer1_toggle_count = toggle_count;
    1568:	20 93 0d 04 	sts	0x040D, r18	; 0x80040d <timer1_toggle_count>
    156c:	30 93 0e 04 	sts	0x040E, r19	; 0x80040e <timer1_toggle_count+0x1>
    1570:	40 93 0f 04 	sts	0x040F, r20	; 0x80040f <timer1_toggle_count+0x2>
    1574:	50 93 10 04 	sts	0x0410, r21	; 0x800410 <timer1_toggle_count+0x3>
        bitWrite(TIMSK1, OCIE1A, 1);
    1578:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    157c:	82 60       	ori	r24, 0x02	; 2
    157e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    1582:	77 c0       	rjmp	.+238    	; 0x1672 <_Z4tonehjm+0x58e>
        break;
#endif

#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)
      case 3:
        OCR3A = ocr;
    1584:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1588:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
        timer3_toggle_count = toggle_count;
    158c:	20 93 06 04 	sts	0x0406, r18	; 0x800406 <timer3_toggle_count>
    1590:	30 93 07 04 	sts	0x0407, r19	; 0x800407 <timer3_toggle_count+0x1>
    1594:	40 93 08 04 	sts	0x0408, r20	; 0x800408 <timer3_toggle_count+0x2>
    1598:	50 93 09 04 	sts	0x0409, r21	; 0x800409 <timer3_toggle_count+0x3>
        bitWrite(TIMSK3, OCIE3A, 1);
    159c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    15a0:	82 60       	ori	r24, 0x02	; 2
    15a2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
        break;
    15a6:	65 c0       	rjmp	.+202    	; 0x1672 <_Z4tonehjm+0x58e>
#endif

#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)
      case 4:
        OCR4A = ocr;
    15a8:	c0 92 cf 00 	sts	0x00CF, r12	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7e00cf>
        timer4_toggle_count = toggle_count;
    15ac:	20 93 ff 03 	sts	0x03FF, r18	; 0x8003ff <timer4_toggle_count>
    15b0:	30 93 00 04 	sts	0x0400, r19	; 0x800400 <timer4_toggle_count+0x1>
    15b4:	40 93 01 04 	sts	0x0401, r20	; 0x800401 <timer4_toggle_count+0x2>
    15b8:	50 93 02 04 	sts	0x0402, r21	; 0x800402 <timer4_toggle_count+0x3>
        bitWrite(TIMSK4, OCIE4A, 1);
    15bc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
    15c0:	80 64       	ori	r24, 0x40	; 64
    15c2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
        break;
#endif

    }
  }
}
    15c6:	55 c0       	rjmp	.+170    	; 0x1672 <_Z4tonehjm+0x58e>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    15c8:	41 14       	cp	r4, r1
    15ca:	51 04       	cpc	r5, r1
    15cc:	61 04       	cpc	r6, r1
    15ce:	71 04       	cpc	r7, r1
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <_Z4tonehjm+0x4f0>
    15d2:	9a cf       	rjmp	.-204    	; 0x1508 <_Z4tonehjm+0x424>
    15d4:	4e c0       	rjmp	.+156    	; 0x1672 <_Z4tonehjm+0x58e>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	c8 16       	cp	r12, r24
    15da:	d1 04       	cpc	r13, r1
    15dc:	e1 04       	cpc	r14, r1
    15de:	f1 04       	cpc	r15, r1
    15e0:	69 f1       	breq	.+90     	; 0x163c <_Z4tonehjm+0x558>
    15e2:	60 f1       	brcs	.+88     	; 0x163c <_Z4tonehjm+0x558>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    15e4:	62 e1       	ldi	r22, 0x12	; 18
    15e6:	7a e7       	ldi	r23, 0x7A	; 122
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	a5 01       	movw	r20, r10
    15ee:	94 01       	movw	r18, r8
    15f0:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    15f4:	69 01       	movw	r12, r18
    15f6:	7a 01       	movw	r14, r20
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	c9 1a       	sub	r12, r25
    15fc:	d1 08       	sbc	r13, r1
    15fe:	e1 08       	sbc	r14, r1
    1600:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    1602:	2f ef       	ldi	r18, 0xFF	; 255
    1604:	c2 16       	cp	r12, r18
    1606:	d1 04       	cpc	r13, r1
    1608:	e1 04       	cpc	r14, r1
    160a:	f1 04       	cpc	r15, r1
    160c:	a9 f0       	breq	.+42     	; 0x1638 <_Z4tonehjm+0x554>
    160e:	a0 f0       	brcs	.+40     	; 0x1638 <_Z4tonehjm+0x554>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	ab 81       	ldd	r26, Y+3	; 0x03
    1616:	bc 81       	ldd	r27, Y+4	; 0x04
    1618:	3a e0       	ldi	r19, 0x0A	; 10
    161a:	b5 95       	asr	r27
    161c:	a7 95       	ror	r26
    161e:	97 95       	ror	r25
    1620:	87 95       	ror	r24
    1622:	3a 95       	dec	r19
    1624:	d1 f7       	brne	.-12     	; 0x161a <_Z4tonehjm+0x536>
    1626:	6c 01       	movw	r12, r24
    1628:	7d 01       	movw	r14, r26
    162a:	21 e0       	ldi	r18, 0x01	; 1
    162c:	c2 1a       	sub	r12, r18
    162e:	d1 08       	sbc	r13, r1
    1630:	e1 08       	sbc	r14, r1
    1632:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    1634:	85 e0       	ldi	r24, 0x05	; 5
    1636:	a2 ce       	rjmp	.-700    	; 0x137c <_Z4tonehjm+0x298>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    1638:	84 e0       	ldi	r24, 0x04	; 4
    163a:	a0 ce       	rjmp	.-704    	; 0x137c <_Z4tonehjm+0x298>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	9e ce       	rjmp	.-708    	; 0x137c <_Z4tonehjm+0x298>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    1640:	2f ef       	ldi	r18, 0xFF	; 255
    1642:	c2 16       	cp	r12, r18
    1644:	d1 04       	cpc	r13, r1
    1646:	e1 04       	cpc	r14, r1
    1648:	f1 04       	cpc	r15, r1
    164a:	89 f0       	breq	.+34     	; 0x166e <_Z4tonehjm+0x58a>
    164c:	80 f0       	brcs	.+32     	; 0x166e <_Z4tonehjm+0x58a>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    164e:	62 e1       	ldi	r22, 0x12	; 18
    1650:	7a e7       	ldi	r23, 0x7A	; 122
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a5 01       	movw	r20, r10
    1658:	94 01       	movw	r18, r8
    165a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    165e:	69 01       	movw	r12, r18
    1660:	7a 01       	movw	r14, r20
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	c9 1a       	sub	r12, r25
    1666:	d1 08       	sbc	r13, r1
    1668:	e1 08       	sbc	r14, r1
    166a:	f1 08       	sbc	r15, r1
    166c:	2f cf       	rjmp	.-418    	; 0x14cc <_Z4tonehjm+0x3e8>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    166e:	84 e0       	ldi	r24, 0x04	; 4
    1670:	82 ce       	rjmp	.-764    	; 0x1376 <_Z4tonehjm+0x292>
        break;
#endif

    }
  }
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	bf 90       	pop	r11
    168e:	af 90       	pop	r10
    1690:	9f 90       	pop	r9
    1692:	8f 90       	pop	r8
    1694:	7f 90       	pop	r7
    1696:	6f 90       	pop	r6
    1698:	5f 90       	pop	r5
    169a:	4f 90       	pop	r4
    169c:	08 95       	ret

0000169e <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	49 f0       	breq	.+18     	; 0x16b4 <_Z12disableTimerh+0x16>
    16a2:	28 f0       	brcs	.+10     	; 0x16ae <_Z12disableTimerh+0x10>
    16a4:	83 30       	cpi	r24, 0x03	; 3
    16a6:	61 f0       	breq	.+24     	; 0x16c0 <_Z12disableTimerh+0x22>
    16a8:	84 30       	cpi	r24, 0x04	; 4
    16aa:	81 f0       	breq	.+32     	; 0x16cc <_Z12disableTimerh+0x2e>
    16ac:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    16ae:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    16b2:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    16b4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    16b8:	8d 7f       	andi	r24, 0xFD	; 253
    16ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    16be:	08 95       	ret
      #endif
      break;

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    16c0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    16c4:	8d 7f       	andi	r24, 0xFD	; 253
    16c6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
      break;
    16ca:	08 95       	ret
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    16cc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
    16d0:	8f 7b       	andi	r24, 0xBF	; 191
    16d2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
    16d6:	08 95       	ret

000016d8 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    16d8:	cf 93       	push	r28
    16da:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    16dc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <_ZL9tone_pins>
    16e0:	c8 13       	cpse	r28, r24
    16e2:	07 c0       	rjmp	.+14     	; 0x16f2 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    16e4:	ea e2       	ldi	r30, 0x2A	; 42
    16e6:	f1 e0       	ldi	r31, 0x01	; 1
    16e8:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    16ea:	9f ef       	ldi	r25, 0xFF	; 255
    16ec:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <_ZL9tone_pins>
      break;
    16f0:	01 c0       	rjmp	.+2      	; 0x16f4 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
    16f4:	0e 94 4f 0b 	call	0x169e	; 0x169e <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	8c 2f       	mov	r24, r28
}
    16fc:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
    16fe:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <digitalWrite>

00001702 <__vector_32>:
#endif


#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
    1702:	1f 92       	push	r1
    1704:	0f 92       	push	r0
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	0f 92       	push	r0
    170a:	11 24       	eor	r1, r1
    170c:	2f 93       	push	r18
    170e:	3f 93       	push	r19
    1710:	4f 93       	push	r20
    1712:	5f 93       	push	r21
    1714:	6f 93       	push	r22
    1716:	7f 93       	push	r23
    1718:	8f 93       	push	r24
    171a:	9f 93       	push	r25
    171c:	af 93       	push	r26
    171e:	bf 93       	push	r27
    1720:	ef 93       	push	r30
    1722:	ff 93       	push	r31
  if (timer3_toggle_count != 0)
    1724:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <timer3_toggle_count>
    1728:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <timer3_toggle_count+0x1>
    172c:	a0 91 08 04 	lds	r26, 0x0408	; 0x800408 <timer3_toggle_count+0x2>
    1730:	b0 91 09 04 	lds	r27, 0x0409	; 0x800409 <timer3_toggle_count+0x3>
    1734:	89 2b       	or	r24, r25
    1736:	8a 2b       	or	r24, r26
    1738:	8b 2b       	or	r24, r27
    173a:	51 f1       	breq	.+84     	; 0x1790 <__vector_32+0x8e>
  {
    // toggle the pin
    *timer3_pin_port ^= timer3_pin_mask;
    173c:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <timer3_pin_mask>
    1740:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <timer3_pin_port>
    1744:	f0 91 05 04 	lds	r31, 0x0405	; 0x800405 <timer3_pin_port+0x1>
    1748:	80 81       	ld	r24, Z
    174a:	89 27       	eor	r24, r25
    174c:	80 83       	st	Z, r24

    if (timer3_toggle_count > 0)
    174e:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <timer3_toggle_count>
    1752:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <timer3_toggle_count+0x1>
    1756:	a0 91 08 04 	lds	r26, 0x0408	; 0x800408 <timer3_toggle_count+0x2>
    175a:	b0 91 09 04 	lds	r27, 0x0409	; 0x800409 <timer3_toggle_count+0x3>
    175e:	18 16       	cp	r1, r24
    1760:	19 06       	cpc	r1, r25
    1762:	1a 06       	cpc	r1, r26
    1764:	1b 06       	cpc	r1, r27
    1766:	0c f5       	brge	.+66     	; 0x17aa <__vector_32+0xa8>
      timer3_toggle_count--;
    1768:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <timer3_toggle_count>
    176c:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <timer3_toggle_count+0x1>
    1770:	a0 91 08 04 	lds	r26, 0x0408	; 0x800408 <timer3_toggle_count+0x2>
    1774:	b0 91 09 04 	lds	r27, 0x0409	; 0x800409 <timer3_toggle_count+0x3>
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	a1 09       	sbc	r26, r1
    177c:	b1 09       	sbc	r27, r1
    177e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <timer3_toggle_count>
    1782:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <timer3_toggle_count+0x1>
    1786:	a0 93 08 04 	sts	0x0408, r26	; 0x800408 <timer3_toggle_count+0x2>
    178a:	b0 93 09 04 	sts	0x0409, r27	; 0x800409 <timer3_toggle_count+0x3>
    178e:	0d c0       	rjmp	.+26     	; 0x17aa <__vector_32+0xa8>
  }
  else
  {
    disableTimer(3);
    1790:	83 e0       	ldi	r24, 0x03	; 3
    1792:	0e 94 4f 0b 	call	0x169e	; 0x169e <_Z12disableTimerh>
    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
    1796:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <timer3_pin_mask>
    179a:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <timer3_pin_port>
    179e:	f0 91 05 04 	lds	r31, 0x0405	; 0x800405 <timer3_pin_port+0x1>
    17a2:	90 81       	ld	r25, Z
    17a4:	80 95       	com	r24
    17a6:	89 23       	and	r24, r25
    17a8:	80 83       	st	Z, r24
  }
}
    17aa:	ff 91       	pop	r31
    17ac:	ef 91       	pop	r30
    17ae:	bf 91       	pop	r27
    17b0:	af 91       	pop	r26
    17b2:	9f 91       	pop	r25
    17b4:	8f 91       	pop	r24
    17b6:	7f 91       	pop	r23
    17b8:	6f 91       	pop	r22
    17ba:	5f 91       	pop	r21
    17bc:	4f 91       	pop	r20
    17be:	3f 91       	pop	r19
    17c0:	2f 91       	pop	r18
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	0f 90       	pop	r0
    17c8:	1f 90       	pop	r1
    17ca:	18 95       	reti

000017cc <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    17cc:	61 50       	subi	r22, 0x01	; 1
    17ce:	30 f0       	brcs	.+12     	; 0x17dc <_ZL4RecvPVhh+0x10>
    17d0:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17d4:	fc 01       	movw	r30, r24
    17d6:	20 83       	st	Z, r18
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	f8 cf       	rjmp	.-16     	; 0x17cc <_ZL4RecvPVhh>
    17dc:	28 98       	cbi	0x05, 0	; 5
    17de:	84 e6       	ldi	r24, 0x64	; 100
    17e0:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <RxLEDPulse>
    17e4:	08 95       	ret

000017e6 <_ZL11SendControlh>:
    17e6:	40 91 1b 04 	lds	r20, 0x041B	; 0x80041b <_ZL6_cmark>
    17ea:	50 91 1c 04 	lds	r21, 0x041C	; 0x80041c <_ZL6_cmark+0x1>
    17ee:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <_ZL5_cend>
    17f2:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <_ZL5_cend+0x1>
    17f6:	42 17       	cp	r20, r18
    17f8:	53 07       	cpc	r21, r19
    17fa:	b4 f4       	brge	.+44     	; 0x1828 <_ZL11SendControlh+0x42>
    17fc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1800:	95 70       	andi	r25, 0x05	; 5
    1802:	e1 f3       	breq	.-8      	; 0x17fc <_ZL11SendControlh+0x16>
    1804:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1808:	92 fd       	sbrc	r25, 2
    180a:	19 c0       	rjmp	.+50     	; 0x183e <_ZL11SendControlh+0x58>
    180c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1810:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_ZL6_cmark>
    1814:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <_ZL6_cmark+0x1>
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	8f 73       	andi	r24, 0x3F	; 63
    181c:	99 27       	eor	r25, r25
    181e:	89 2b       	or	r24, r25
    1820:	19 f4       	brne	.+6      	; 0x1828 <_ZL11SendControlh+0x42>
    1822:	8e ef       	ldi	r24, 0xFE	; 254
    1824:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1828:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_ZL6_cmark>
    182c:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <_ZL6_cmark+0x1>
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <_ZL6_cmark+0x1>
    1836:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_ZL6_cmark>
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	08 95       	ret
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	08 95       	ret

00001842 <_ZL24USB_SendStringDescriptorPKhhh>:
    1842:	df 92       	push	r13
    1844:	ef 92       	push	r14
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	d8 2e       	mov	r13, r24
    1852:	f9 2e       	mov	r15, r25
    1854:	e4 2e       	mov	r14, r20
    1856:	06 2f       	mov	r16, r22
    1858:	10 e0       	ldi	r17, 0x00	; 0
    185a:	c8 01       	movw	r24, r16
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	88 0f       	add	r24, r24
    1860:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZL11SendControlh>
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZL11SendControlh>
    186a:	cd 2d       	mov	r28, r13
    186c:	df 2d       	mov	r29, r15
    186e:	0c 0f       	add	r16, r28
    1870:	1d 1f       	adc	r17, r29
    1872:	c0 17       	cp	r28, r16
    1874:	d1 07       	cpc	r29, r17
    1876:	89 f0       	breq	.+34     	; 0x189a <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    1878:	e7 fe       	sbrs	r14, 7
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    187c:	fe 01       	movw	r30, r28
    187e:	84 91       	lpm	r24, Z
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    1882:	88 81       	ld	r24, Y
    1884:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZL11SendControlh>
    1888:	f8 2e       	mov	r15, r24
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZL11SendControlh>
    1890:	8f 21       	and	r24, r15
    1892:	21 96       	adiw	r28, 0x01	; 1
    1894:	81 11       	cpse	r24, r1
    1896:	ed cf       	rjmp	.-38     	; 0x1872 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    1898:	01 c0       	rjmp	.+2      	; 0x189c <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	08 95       	ret

000018ac <_ZL15USB_ClockEnablev>:
    18ac:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    18b0:	81 60       	ori	r24, 0x01	; 1
    18b2:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    18b6:	80 ea       	ldi	r24, 0xA0	; 160
    18b8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    18bc:	89 b5       	in	r24, 0x29	; 41
    18be:	80 61       	ori	r24, 0x10	; 16
    18c0:	89 bd       	out	0x29, r24	; 41
    18c2:	89 b5       	in	r24, 0x29	; 41
    18c4:	82 60       	ori	r24, 0x02	; 2
    18c6:	89 bd       	out	0x29, r24	; 41
    18c8:	09 b4       	in	r0, 0x29	; 41
    18ca:	00 fe       	sbrs	r0, 0
    18cc:	fd cf       	rjmp	.-6      	; 0x18c8 <_ZL15USB_ClockEnablev+0x1c>
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 a4 10 	call	0x2148	; 0x2148 <delay>
    18da:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    18de:	8f 7c       	andi	r24, 0xCF	; 207
    18e0:	80 61       	ori	r24, 0x10	; 16
    18e2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    18e6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    18ea:	80 7f       	andi	r24, 0xF0	; 240
    18ec:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    18f0:	08 95       	ret

000018f2 <_ZL14SendInterfacesv>:
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	1f 92       	push	r1
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	19 82       	std	Y+1, r1	; 0x01
    18fe:	ce 01       	movw	r24, r28
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	0e 94 6e 05 	call	0xadc	; 0xadc <_Z16CDC_GetInterfacePh>
    1906:	0e 94 bd 14 	call	0x297a	; 0x297a <_Z12PluggableUSBv>
    190a:	be 01       	movw	r22, r28
    190c:	6f 5f       	subi	r22, 0xFF	; 255
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN13PluggableUSB_12getInterfaceEPh>
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	0f 90       	pop	r0
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	08 95       	ret

0000191e <_ZN6LockEPC1Eh>:
    191e:	2f b7       	in	r18, 0x3f	; 63
    1920:	fc 01       	movw	r30, r24
    1922:	20 83       	st	Z, r18
    1924:	f8 94       	cli
    1926:	67 70       	andi	r22, 0x07	; 7
    1928:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    192c:	08 95       	ret

0000192e <_Z13USB_Availableh>:
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	1f 92       	push	r1
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	68 2f       	mov	r22, r24
    193a:	ce 01       	movw	r24, r28
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN6LockEPC1Eh>
    1942:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1946:	99 81       	ldd	r25, Y+1	; 0x01
    1948:	9f bf       	out	0x3f, r25	; 63
    194a:	0f 90       	pop	r0
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <_Z8USB_RecvhPvi>:
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	1f 92       	push	r1
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <_usbConfiguration>
    1968:	99 23       	and	r25, r25
    196a:	11 f0       	breq	.+4      	; 0x1970 <_Z8USB_RecvhPvi+0x1e>
    196c:	57 ff       	sbrs	r21, 7
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <_Z8USB_RecvhPvi+0x24>
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	9f ef       	ldi	r25, 0xFF	; 255
    1974:	29 c0       	rjmp	.+82     	; 0x19c8 <_Z8USB_RecvhPvi+0x76>
    1976:	8a 01       	movw	r16, r20
    1978:	7b 01       	movw	r14, r22
    197a:	68 2f       	mov	r22, r24
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN6LockEPC1Eh>
    1984:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	02 17       	cp	r16, r18
    198c:	13 07       	cpc	r17, r19
    198e:	0c f4       	brge	.+2      	; 0x1992 <_Z8USB_RecvhPvi+0x40>
    1990:	98 01       	movw	r18, r16
    1992:	82 2f       	mov	r24, r18
    1994:	f7 01       	movw	r30, r14
    1996:	94 e6       	ldi	r25, 0x64	; 100
    1998:	81 50       	subi	r24, 0x01	; 1
    199a:	38 f0       	brcs	.+14     	; 0x19aa <_Z8USB_RecvhPvi+0x58>
    199c:	28 98       	cbi	0x05, 0	; 5
    199e:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <RxLEDPulse>
    19a2:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    19a6:	41 93       	st	Z+, r20
    19a8:	f7 cf       	rjmp	.-18     	; 0x1998 <_Z8USB_RecvhPvi+0x46>
    19aa:	21 15       	cp	r18, r1
    19ac:	31 05       	cpc	r19, r1
    19ae:	21 f0       	breq	.+8      	; 0x19b8 <_Z8USB_RecvhPvi+0x66>
    19b0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    19b4:	88 23       	and	r24, r24
    19b6:	21 f0       	breq	.+8      	; 0x19c0 <_Z8USB_RecvhPvi+0x6e>
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	8f bf       	out	0x3f, r24	; 63
    19bc:	c9 01       	movw	r24, r18
    19be:	04 c0       	rjmp	.+8      	; 0x19c8 <_Z8USB_RecvhPvi+0x76>
    19c0:	8b e6       	ldi	r24, 0x6B	; 107
    19c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19c6:	f8 cf       	rjmp	.-16     	; 0x19b8 <_Z8USB_RecvhPvi+0x66>
    19c8:	0f 90       	pop	r0
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	08 95       	ret

000019d8 <_Z8USB_Recvh>:
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	1f 92       	push	r1
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	41 e0       	ldi	r20, 0x01	; 1
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	be 01       	movw	r22, r28
    19e8:	6f 5f       	subi	r22, 0xFF	; 255
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255
    19ec:	0e 94 a9 0c 	call	0x1952	; 0x1952 <_Z8USB_RecvhPvi>
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	19 f4       	brne	.+6      	; 0x19fa <_Z8USB_Recvh+0x22>
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <_Z8USB_Recvh+0x26>
    19fa:	8f ef       	ldi	r24, 0xFF	; 255
    19fc:	9f ef       	ldi	r25, 0xFF	; 255
    19fe:	0f 90       	pop	r0
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	08 95       	ret

00001a06 <_Z13USB_SendSpaceh>:
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	1f 92       	push	r1
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	68 2f       	mov	r22, r24
    1a12:	ce 01       	movw	r24, r28
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN6LockEPC1Eh>
    1a1a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a1e:	89 2f       	mov	r24, r25
    1a20:	80 72       	andi	r24, 0x20	; 32
    1a22:	95 ff       	sbrs	r25, 5
    1a24:	04 c0       	rjmp	.+8      	; 0x1a2e <_Z13USB_SendSpaceh+0x28>
    1a26:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1a2a:	80 e4       	ldi	r24, 0x40	; 64
    1a2c:	89 1b       	sub	r24, r25
    1a2e:	99 81       	ldd	r25, Y+1	; 0x01
    1a30:	9f bf       	out	0x3f, r25	; 63
    1a32:	0f 90       	pop	r0
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <_Z8USB_SendhPKvi>:
    1a3a:	5f 92       	push	r5
    1a3c:	6f 92       	push	r6
    1a3e:	7f 92       	push	r7
    1a40:	8f 92       	push	r8
    1a42:	9f 92       	push	r9
    1a44:	af 92       	push	r10
    1a46:	bf 92       	push	r11
    1a48:	cf 92       	push	r12
    1a4a:	df 92       	push	r13
    1a4c:	ef 92       	push	r14
    1a4e:	ff 92       	push	r15
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	1f 92       	push	r1
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	98 2e       	mov	r9, r24
    1a60:	6b 01       	movw	r12, r22
    1a62:	b4 2e       	mov	r11, r20
    1a64:	05 2f       	mov	r16, r21
    1a66:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_usbConfiguration>
    1a6a:	81 11       	cpse	r24, r1
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <_Z8USB_SendhPKvi+0x3a>
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	9f ef       	ldi	r25, 0xFF	; 255
    1a72:	77 c0       	rjmp	.+238    	; 0x1b62 <_Z8USB_SendhPKvi+0x128>
    1a74:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_usbSuspendState>
    1a78:	80 ff       	sbrs	r24, 0
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <_Z8USB_SendhPKvi+0x4c>
    1a7c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1a80:	82 60       	ori	r24, 0x02	; 2
    1a82:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1a86:	eb 2c       	mov	r14, r11
    1a88:	f0 2e       	mov	r15, r16
    1a8a:	a1 2c       	mov	r10, r1
    1a8c:	8a ef       	ldi	r24, 0xFA	; 250
    1a8e:	88 2e       	mov	r8, r24
    1a90:	89 2d       	mov	r24, r9
    1a92:	80 72       	andi	r24, 0x20	; 32
    1a94:	68 2e       	mov	r6, r24
    1a96:	89 2d       	mov	r24, r9
    1a98:	80 74       	andi	r24, 0x40	; 64
    1a9a:	58 2e       	mov	r5, r24
    1a9c:	9a e3       	ldi	r25, 0x3A	; 58
    1a9e:	79 2e       	mov	r7, r25
    1aa0:	e1 14       	cp	r14, r1
    1aa2:	f1 04       	cpc	r15, r1
    1aa4:	19 f4       	brne	.+6      	; 0x1aac <_Z8USB_SendhPKvi+0x72>
    1aa6:	aa 20       	and	r10, r10
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <_Z8USB_SendhPKvi+0x72>
    1aaa:	55 c0       	rjmp	.+170    	; 0x1b56 <_Z8USB_SendhPKvi+0x11c>
    1aac:	89 2d       	mov	r24, r9
    1aae:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <_Z13USB_SendSpaceh>
    1ab2:	18 2f       	mov	r17, r24
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	0a c0       	rjmp	.+20     	; 0x1acc <_Z8USB_SendhPKvi+0x92>
    1ab8:	8a 94       	dec	r8
    1aba:	88 20       	and	r8, r8
    1abc:	c1 f2       	breq	.-80     	; 0x1a6e <_Z8USB_SendhPKvi+0x34>
    1abe:	61 e0       	ldi	r22, 0x01	; 1
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 a4 10 	call	0x2148	; 0x2148 <delay>
    1aca:	ea cf       	rjmp	.-44     	; 0x1aa0 <_Z8USB_SendhPKvi+0x66>
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	e8 16       	cp	r14, r24
    1ad0:	f9 06       	cpc	r15, r25
    1ad2:	0c f4       	brge	.+2      	; 0x1ad6 <_Z8USB_SendhPKvi+0x9c>
    1ad4:	1e 2d       	mov	r17, r14
    1ad6:	69 2d       	mov	r22, r9
    1ad8:	ce 01       	movw	r24, r28
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN6LockEPC1Eh>
    1ae0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ae4:	85 ff       	sbrs	r24, 5
    1ae6:	34 c0       	rjmp	.+104    	; 0x1b50 <_Z8USB_SendhPKvi+0x116>
    1ae8:	81 2f       	mov	r24, r17
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	e8 1a       	sub	r14, r24
    1aee:	f9 0a       	sbc	r15, r25
    1af0:	66 20       	and	r6, r6
    1af2:	29 f0       	breq	.+10     	; 0x1afe <_Z8USB_SendhPKvi+0xc4>
    1af4:	11 50       	subi	r17, 0x01	; 1
    1af6:	a0 f0       	brcs	.+40     	; 0x1b20 <_Z8USB_SendhPKvi+0xe6>
    1af8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1afc:	fb cf       	rjmp	.-10     	; 0x1af4 <_Z8USB_SendhPKvi+0xba>
    1afe:	f6 01       	movw	r30, r12
    1b00:	97 fe       	sbrs	r9, 7
    1b02:	0a c0       	rjmp	.+20     	; 0x1b18 <_Z8USB_SendhPKvi+0xde>
    1b04:	11 50       	subi	r17, 0x01	; 1
    1b06:	50 f0       	brcs	.+20     	; 0x1b1c <_Z8USB_SendhPKvi+0xe2>
    1b08:	24 91       	lpm	r18, Z
    1b0a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1b0e:	31 96       	adiw	r30, 0x01	; 1
    1b10:	f9 cf       	rjmp	.-14     	; 0x1b04 <_Z8USB_SendhPKvi+0xca>
    1b12:	21 91       	ld	r18, Z+
    1b14:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1b18:	11 50       	subi	r17, 0x01	; 1
    1b1a:	d8 f7       	brcc	.-10     	; 0x1b12 <_Z8USB_SendhPKvi+0xd8>
    1b1c:	c8 0e       	add	r12, r24
    1b1e:	d9 1e       	adc	r13, r25
    1b20:	aa 20       	and	r10, r10
    1b22:	19 f0       	breq	.+6      	; 0x1b2a <_Z8USB_SendhPKvi+0xf0>
    1b24:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b28:	0b c0       	rjmp	.+22     	; 0x1b40 <_Z8USB_SendhPKvi+0x106>
    1b2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b2e:	85 fd       	sbrc	r24, 5
    1b30:	09 c0       	rjmp	.+18     	; 0x1b44 <_Z8USB_SendhPKvi+0x10a>
    1b32:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b36:	aa 24       	eor	r10, r10
    1b38:	a3 94       	inc	r10
    1b3a:	e1 14       	cp	r14, r1
    1b3c:	f1 04       	cpc	r15, r1
    1b3e:	41 f0       	breq	.+16     	; 0x1b50 <_Z8USB_SendhPKvi+0x116>
    1b40:	a1 2c       	mov	r10, r1
    1b42:	06 c0       	rjmp	.+12     	; 0x1b50 <_Z8USB_SendhPKvi+0x116>
    1b44:	e1 14       	cp	r14, r1
    1b46:	f1 04       	cpc	r15, r1
    1b48:	19 f4       	brne	.+6      	; 0x1b50 <_Z8USB_SendhPKvi+0x116>
    1b4a:	51 10       	cpse	r5, r1
    1b4c:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	8f bf       	out	0x3f, r24	; 63
    1b54:	a5 cf       	rjmp	.-182    	; 0x1aa0 <_Z8USB_SendhPKvi+0x66>
    1b56:	5d 98       	cbi	0x0b, 5	; 11
    1b58:	84 e6       	ldi	r24, 0x64	; 100
    1b5a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <TxLEDPulse>
    1b5e:	8b 2d       	mov	r24, r11
    1b60:	90 2f       	mov	r25, r16
    1b62:	0f 90       	pop	r0
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	ff 90       	pop	r15
    1b6e:	ef 90       	pop	r14
    1b70:	df 90       	pop	r13
    1b72:	cf 90       	pop	r12
    1b74:	bf 90       	pop	r11
    1b76:	af 90       	pop	r10
    1b78:	9f 90       	pop	r9
    1b7a:	8f 90       	pop	r8
    1b7c:	7f 90       	pop	r7
    1b7e:	6f 90       	pop	r6
    1b80:	5f 90       	pop	r5
    1b82:	08 95       	ret

00001b84 <_Z11InitControli>:
    1b84:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1b88:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <_ZL6_cmark+0x1>
    1b8c:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <_ZL6_cmark>
    1b90:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <_ZL5_cend+0x1>
    1b94:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZL5_cend>
    1b98:	08 95       	ret

00001b9a <_Z15USB_SendControlhPKvi>:
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	d8 2e       	mov	r13, r24
    1baa:	8a 01       	movw	r16, r20
    1bac:	7b 01       	movw	r14, r22
    1bae:	e4 0e       	add	r14, r20
    1bb0:	f5 1e       	adc	r15, r21
    1bb2:	eb 01       	movw	r28, r22
    1bb4:	ce 15       	cp	r28, r14
    1bb6:	df 05       	cpc	r29, r15
    1bb8:	71 f0       	breq	.+28     	; 0x1bd6 <_Z15USB_SendControlhPKvi+0x3c>
    1bba:	d7 fe       	sbrs	r13, 7
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <_Z15USB_SendControlhPKvi+0x2a>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	84 91       	lpm	r24, Z
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <_Z15USB_SendControlhPKvi+0x2c>
    1bc4:	88 81       	ld	r24, Y
    1bc6:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZL11SendControlh>
    1bca:	21 96       	adiw	r28, 0x01	; 1
    1bcc:	81 11       	cpse	r24, r1
    1bce:	f2 cf       	rjmp	.-28     	; 0x1bb4 <_Z15USB_SendControlhPKvi+0x1a>
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	9f ef       	ldi	r25, 0xFF	; 255
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <_Z15USB_SendControlhPKvi+0x3e>
    1bd6:	c8 01       	movw	r24, r16
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	ff 90       	pop	r15
    1be2:	ef 90       	pop	r14
    1be4:	df 90       	pop	r13
    1be6:	08 95       	ret

00001be8 <_Z15USB_RecvControlPvi>:
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	5c 01       	movw	r10, r24
    1bfc:	8b 01       	movw	r16, r22
    1bfe:	eb 01       	movw	r28, r22
    1c00:	9b ef       	ldi	r25, 0xFB	; 251
    1c02:	d9 2e       	mov	r13, r25
    1c04:	20 97       	sbiw	r28, 0x00	; 0
    1c06:	c1 f0       	breq	.+48     	; 0x1c38 <_Z15USB_RecvControlPvi+0x50>
    1c08:	7e 01       	movw	r14, r28
    1c0a:	c1 34       	cpi	r28, 0x41	; 65
    1c0c:	d1 05       	cpc	r29, r1
    1c0e:	1c f0       	brlt	.+6      	; 0x1c16 <_Z15USB_RecvControlPvi+0x2e>
    1c10:	80 e4       	ldi	r24, 0x40	; 64
    1c12:	e8 2e       	mov	r14, r24
    1c14:	f1 2c       	mov	r15, r1
    1c16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c1a:	82 ff       	sbrs	r24, 2
    1c1c:	fc cf       	rjmp	.-8      	; 0x1c16 <_Z15USB_RecvControlPvi+0x2e>
    1c1e:	c8 01       	movw	r24, r16
    1c20:	8c 1b       	sub	r24, r28
    1c22:	9d 0b       	sbc	r25, r29
    1c24:	6e 2d       	mov	r22, r14
    1c26:	8a 0d       	add	r24, r10
    1c28:	9b 1d       	adc	r25, r11
    1c2a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_ZL4RecvPVhh>
    1c2e:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c32:	ce 19       	sub	r28, r14
    1c34:	df 09       	sbc	r29, r15
    1c36:	e6 cf       	rjmp	.-52     	; 0x1c04 <_Z15USB_RecvControlPvi+0x1c>
    1c38:	c8 01       	movw	r24, r16
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	ff 90       	pop	r15
    1c44:	ef 90       	pop	r14
    1c46:	df 90       	pop	r13
    1c48:	bf 90       	pop	r11
    1c4a:	af 90       	pop	r10
    1c4c:	08 95       	ret

00001c4e <__vector_11>:
    1c4e:	1f 92       	push	r1
    1c50:	0f 92       	push	r0
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	0f 92       	push	r0
    1c56:	11 24       	eor	r1, r1
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	2f 93       	push	r18
    1c66:	3f 93       	push	r19
    1c68:	4f 93       	push	r20
    1c6a:	5f 93       	push	r21
    1c6c:	6f 93       	push	r22
    1c6e:	7f 93       	push	r23
    1c70:	8f 93       	push	r24
    1c72:	9f 93       	push	r25
    1c74:	af 93       	push	r26
    1c76:	bf 93       	push	r27
    1c78:	ef 93       	push	r30
    1c7a:	ff 93       	push	r31
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	6c 97       	sbiw	r28, 0x1c	; 28
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1c8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c92:	83 ff       	sbrs	r24, 3
    1c94:	17 c1       	rjmp	.+558    	; 0x1ec4 <__vector_11+0x276>
    1c96:	68 e0       	ldi	r22, 0x08	; 8
    1c98:	ce 01       	movw	r24, r28
    1c9a:	45 96       	adiw	r24, 0x15	; 21
    1c9c:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_ZL4RecvPVhh>
    1ca0:	82 ef       	ldi	r24, 0xF2	; 242
    1ca2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ca6:	8d 89       	ldd	r24, Y+21	; 0x15
    1ca8:	87 ff       	sbrs	r24, 7
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <__vector_11+0x68>
    1cac:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cb0:	90 ff       	sbrs	r25, 0
    1cb2:	fc cf       	rjmp	.-8      	; 0x1cac <__vector_11+0x5e>
    1cb4:	03 c0       	rjmp	.+6      	; 0x1cbc <__vector_11+0x6e>
    1cb6:	9e ef       	ldi	r25, 0xFE	; 254
    1cb8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cbc:	98 2f       	mov	r25, r24
    1cbe:	90 76       	andi	r25, 0x60	; 96
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <__vector_11+0x76>
    1cc2:	d8 c0       	rjmp	.+432    	; 0x1e74 <__vector_11+0x226>
    1cc4:	9e 89       	ldd	r25, Y+22	; 0x16
    1cc6:	4f 89       	ldd	r20, Y+23	; 0x17
    1cc8:	58 8d       	ldd	r21, Y+24	; 0x18
    1cca:	2f 89       	ldd	r18, Y+23	; 0x17
    1ccc:	18 8d       	ldd	r17, Y+24	; 0x18
    1cce:	91 11       	cpse	r25, r1
    1cd0:	0c c0       	rjmp	.+24     	; 0x1cea <__vector_11+0x9c>
    1cd2:	80 38       	cpi	r24, 0x80	; 128
    1cd4:	29 f4       	brne	.+10     	; 0x1ce0 <__vector_11+0x92>
    1cd6:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <_usbCurrentStatus>
    1cda:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <__vector_11+0x96>
    1ce0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1ce4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1ce8:	e6 c0       	rjmp	.+460    	; 0x1eb6 <__vector_11+0x268>
    1cea:	91 30       	cpi	r25, 0x01	; 1
    1cec:	51 f4       	brne	.+20     	; 0x1d02 <__vector_11+0xb4>
    1cee:	81 11       	cpse	r24, r1
    1cf0:	e2 c0       	rjmp	.+452    	; 0x1eb6 <__vector_11+0x268>
    1cf2:	41 30       	cpi	r20, 0x01	; 1
    1cf4:	51 05       	cpc	r21, r1
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <__vector_11+0xac>
    1cf8:	de c0       	rjmp	.+444    	; 0x1eb6 <__vector_11+0x268>
    1cfa:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <_usbCurrentStatus>
    1cfe:	8d 7f       	andi	r24, 0xFD	; 253
    1d00:	0b c0       	rjmp	.+22     	; 0x1d18 <__vector_11+0xca>
    1d02:	93 30       	cpi	r25, 0x03	; 3
    1d04:	61 f4       	brne	.+24     	; 0x1d1e <__vector_11+0xd0>
    1d06:	81 11       	cpse	r24, r1
    1d08:	d6 c0       	rjmp	.+428    	; 0x1eb6 <__vector_11+0x268>
    1d0a:	41 30       	cpi	r20, 0x01	; 1
    1d0c:	51 05       	cpc	r21, r1
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <__vector_11+0xc4>
    1d10:	d2 c0       	rjmp	.+420    	; 0x1eb6 <__vector_11+0x268>
    1d12:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <_usbCurrentStatus>
    1d16:	82 60       	ori	r24, 0x02	; 2
    1d18:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <_usbCurrentStatus>
    1d1c:	cc c0       	rjmp	.+408    	; 0x1eb6 <__vector_11+0x268>
    1d1e:	95 30       	cpi	r25, 0x05	; 5
    1d20:	49 f4       	brne	.+18     	; 0x1d34 <__vector_11+0xe6>
    1d22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d26:	80 ff       	sbrs	r24, 0
    1d28:	fc cf       	rjmp	.-8      	; 0x1d22 <__vector_11+0xd4>
    1d2a:	82 2f       	mov	r24, r18
    1d2c:	80 68       	ori	r24, 0x80	; 128
    1d2e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1d32:	c1 c0       	rjmp	.+386    	; 0x1eb6 <__vector_11+0x268>
    1d34:	96 30       	cpi	r25, 0x06	; 6
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <__vector_11+0xec>
    1d38:	70 c0       	rjmp	.+224    	; 0x1e1a <__vector_11+0x1cc>
    1d3a:	eb 8c       	ldd	r14, Y+27	; 0x1b
    1d3c:	fc 8c       	ldd	r15, Y+28	; 0x1c
    1d3e:	12 30       	cpi	r17, 0x02	; 2
    1d40:	69 f5       	brne	.+90     	; 0x1d9c <__vector_11+0x14e>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_Z11InitControli>
    1d4a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_ZL14SendInterfacesv>
    1d4e:	99 e0       	ldi	r25, 0x09	; 9
    1d50:	9e 01       	movw	r18, r28
    1d52:	2f 5f       	subi	r18, 0xFF	; 255
    1d54:	3f 4f       	sbci	r19, 0xFF	; 255
    1d56:	69 01       	movw	r12, r18
    1d58:	f9 01       	movw	r30, r18
    1d5a:	29 2f       	mov	r18, r25
    1d5c:	11 92       	st	Z+, r1
    1d5e:	2a 95       	dec	r18
    1d60:	e9 f7       	brne	.-6      	; 0x1d5c <__vector_11+0x10e>
    1d62:	99 83       	std	Y+1, r25	; 0x01
    1d64:	1a 83       	std	Y+2, r17	; 0x02
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	90 ea       	ldi	r25, 0xA0	; 160
    1d6c:	98 87       	std	Y+8, r25	; 0x08
    1d6e:	9a ef       	ldi	r25, 0xFA	; 250
    1d70:	99 87       	std	Y+9, r25	; 0x09
    1d72:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <_ZL6_cmark>
    1d76:	30 91 1c 04 	lds	r19, 0x041C	; 0x80041c <_ZL6_cmark+0x1>
    1d7a:	27 5f       	subi	r18, 0xF7	; 247
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	3c 83       	std	Y+4, r19	; 0x04
    1d80:	2b 83       	std	Y+3, r18	; 0x03
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	c7 01       	movw	r24, r14
    1d86:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_Z11InitControli>
    1d8a:	49 e0       	ldi	r20, 0x09	; 9
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	b6 01       	movw	r22, r12
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_Z15USB_SendControlhPKvi>
    1d96:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_ZL14SendInterfacesv>
    1d9a:	8d c0       	rjmp	.+282    	; 0x1eb6 <__vector_11+0x268>
    1d9c:	c7 01       	movw	r24, r14
    1d9e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_Z11InitControli>
    1da2:	0e 94 bd 14 	call	0x297a	; 0x297a <_Z12PluggableUSBv>
    1da6:	be 01       	movw	r22, r28
    1da8:	6b 5e       	subi	r22, 0xEB	; 235
    1daa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dac:	0e 94 61 14 	call	0x28c2	; 0x28c2 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	19 f0       	breq	.+6      	; 0x1dba <__vector_11+0x16c>
    1db4:	0c f0       	brlt	.+2      	; 0x1db8 <__vector_11+0x16a>
    1db6:	7f c0       	rjmp	.+254    	; 0x1eb6 <__vector_11+0x268>
    1db8:	82 c0       	rjmp	.+260    	; 0x1ebe <__vector_11+0x270>
    1dba:	11 30       	cpi	r17, 0x01	; 1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <__vector_11+0x172>
    1dbe:	70 c0       	rjmp	.+224    	; 0x1ea0 <__vector_11+0x252>
    1dc0:	13 30       	cpi	r17, 0x03	; 3
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <__vector_11+0x178>
    1dc4:	7c c0       	rjmp	.+248    	; 0x1ebe <__vector_11+0x270>
    1dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc8:	88 23       	and	r24, r24
    1dca:	09 f4       	brne	.+2      	; 0x1dce <__vector_11+0x180>
    1dcc:	6c c0       	rjmp	.+216    	; 0x1ea6 <__vector_11+0x258>
    1dce:	82 30       	cpi	r24, 0x02	; 2
    1dd0:	29 f4       	brne	.+10     	; 0x1ddc <__vector_11+0x18e>
    1dd2:	40 e8       	ldi	r20, 0x80	; 128
    1dd4:	60 e1       	ldi	r22, 0x10	; 16
    1dd6:	89 e4       	ldi	r24, 0x49	; 73
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	06 c0       	rjmp	.+12     	; 0x1de8 <__vector_11+0x19a>
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	39 f4       	brne	.+14     	; 0x1dee <__vector_11+0x1a0>
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	6b e0       	ldi	r22, 0x0B	; 11
    1de4:	8d e3       	ldi	r24, 0x3D	; 61
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZL24USB_SendStringDescriptorPKhhh>
    1dec:	56 c0       	rjmp	.+172    	; 0x1e9a <__vector_11+0x24c>
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <__vector_11+0x1a6>
    1df2:	65 c0       	rjmp	.+202    	; 0x1ebe <__vector_11+0x270>
    1df4:	0e 94 bd 14 	call	0x297a	; 0x297a <_Z12PluggableUSBv>
    1df8:	8e 01       	movw	r16, r28
    1dfa:	0f 5f       	subi	r16, 0xFF	; 255
    1dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfe:	b8 01       	movw	r22, r16
    1e00:	0e 94 80 14 	call	0x2900	; 0x2900 <_ZN13PluggableUSB_12getShortNameEPc>
    1e04:	f8 01       	movw	r30, r16
    1e06:	01 90       	ld	r0, Z+
    1e08:	00 20       	and	r0, r0
    1e0a:	e9 f7       	brne	.-6      	; 0x1e06 <__vector_11+0x1b8>
    1e0c:	31 97       	sbiw	r30, 0x01	; 1
    1e0e:	bf 01       	movw	r22, r30
    1e10:	60 1b       	sub	r22, r16
    1e12:	71 0b       	sbc	r23, r17
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	c8 01       	movw	r24, r16
    1e18:	e7 cf       	rjmp	.-50     	; 0x1de8 <__vector_11+0x19a>
    1e1a:	97 30       	cpi	r25, 0x07	; 7
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <__vector_11+0x1d2>
    1e1e:	4f c0       	rjmp	.+158    	; 0x1ebe <__vector_11+0x270>
    1e20:	98 30       	cpi	r25, 0x08	; 8
    1e22:	21 f4       	brne	.+8      	; 0x1e2c <__vector_11+0x1de>
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1e2a:	45 c0       	rjmp	.+138    	; 0x1eb6 <__vector_11+0x268>
    1e2c:	99 30       	cpi	r25, 0x09	; 9
    1e2e:	09 f0       	breq	.+2      	; 0x1e32 <__vector_11+0x1e4>
    1e30:	42 c0       	rjmp	.+132    	; 0x1eb6 <__vector_11+0x268>
    1e32:	83 70       	andi	r24, 0x03	; 3
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <__vector_11+0x1ea>
    1e36:	43 c0       	rjmp	.+134    	; 0x1ebe <__vector_11+0x270>
    1e38:	e2 e7       	ldi	r30, 0x72	; 114
    1e3a:	f1 e0       	ldi	r31, 0x01	; 1
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	31 e0       	ldi	r19, 0x01	; 1
    1e40:	96 e3       	ldi	r25, 0x36	; 54
    1e42:	20 81       	ld	r18, Z
    1e44:	21 11       	cpse	r18, r1
    1e46:	09 c0       	rjmp	.+18     	; 0x1e5a <__vector_11+0x20c>
    1e48:	8e e7       	ldi	r24, 0x7E	; 126
    1e4a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    1e4e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    1e52:	8f 89       	ldd	r24, Y+23	; 0x17
    1e54:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_usbConfiguration>
    1e58:	2e c0       	rjmp	.+92     	; 0x1eb6 <__vector_11+0x268>
    1e5a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1e5e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e62:	21 91       	ld	r18, Z+
    1e64:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1e68:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1e6c:	8f 5f       	subi	r24, 0xFF	; 255
    1e6e:	87 30       	cpi	r24, 0x07	; 7
    1e70:	41 f7       	brne	.-48     	; 0x1e42 <__vector_11+0x1f4>
    1e72:	ea cf       	rjmp	.-44     	; 0x1e48 <__vector_11+0x1fa>
    1e74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e78:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_Z11InitControli>
    1e7c:	89 8d       	ldd	r24, Y+25	; 0x19
    1e7e:	81 11       	cpse	r24, r1
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <__vector_11+0x23e>
    1e82:	ce 01       	movw	r24, r28
    1e84:	45 96       	adiw	r24, 0x15	; 21
    1e86:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_Z9CDC_SetupR8USBSetup>
    1e8a:	07 c0       	rjmp	.+14     	; 0x1e9a <__vector_11+0x24c>
    1e8c:	0e 94 bd 14 	call	0x297a	; 0x297a <_Z12PluggableUSBv>
    1e90:	be 01       	movw	r22, r28
    1e92:	6b 5e       	subi	r22, 0xEB	; 235
    1e94:	7f 4f       	sbci	r23, 0xFF	; 255
    1e96:	0e 94 9f 14 	call	0x293e	; 0x293e <_ZN13PluggableUSB_5setupER8USBSetup>
    1e9a:	88 23       	and	r24, r24
    1e9c:	81 f0       	breq	.+32     	; 0x1ebe <__vector_11+0x270>
    1e9e:	0b c0       	rjmp	.+22     	; 0x1eb6 <__vector_11+0x268>
    1ea0:	6b e2       	ldi	r22, 0x2B	; 43
    1ea2:	71 e0       	ldi	r23, 0x01	; 1
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <__vector_11+0x25c>
    1ea6:	6a e5       	ldi	r22, 0x5A	; 90
    1ea8:	71 e0       	ldi	r23, 0x01	; 1
    1eaa:	fb 01       	movw	r30, r22
    1eac:	44 91       	lpm	r20, Z
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	80 e8       	ldi	r24, 0x80	; 128
    1eb2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_Z15USB_SendControlhPKvi>
    1eb6:	8e ef       	ldi	r24, 0xFE	; 254
    1eb8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ebc:	03 c0       	rjmp	.+6      	; 0x1ec4 <__vector_11+0x276>
    1ebe:	81 e2       	ldi	r24, 0x21	; 33
    1ec0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1ec4:	6c 96       	adiw	r28, 0x1c	; 28
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	ff 91       	pop	r31
    1ed6:	ef 91       	pop	r30
    1ed8:	bf 91       	pop	r27
    1eda:	af 91       	pop	r26
    1edc:	9f 91       	pop	r25
    1ede:	8f 91       	pop	r24
    1ee0:	7f 91       	pop	r23
    1ee2:	6f 91       	pop	r22
    1ee4:	5f 91       	pop	r21
    1ee6:	4f 91       	pop	r20
    1ee8:	3f 91       	pop	r19
    1eea:	2f 91       	pop	r18
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	df 90       	pop	r13
    1ef6:	cf 90       	pop	r12
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <_Z9USB_Flushh>:
    1f02:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1f06:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	19 f0       	breq	.+6      	; 0x1f14 <_Z9USB_Flushh+0x12>
    1f0e:	8a e3       	ldi	r24, 0x3A	; 58
    1f10:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f14:	08 95       	ret

00001f16 <__vector_10>:
    1f16:	1f 92       	push	r1
    1f18:	0f 92       	push	r0
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	0f 92       	push	r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	2f 93       	push	r18
    1f22:	3f 93       	push	r19
    1f24:	4f 93       	push	r20
    1f26:	5f 93       	push	r21
    1f28:	6f 93       	push	r22
    1f2a:	7f 93       	push	r23
    1f2c:	8f 93       	push	r24
    1f2e:	9f 93       	push	r25
    1f30:	af 93       	push	r26
    1f32:	bf 93       	push	r27
    1f34:	cf 93       	push	r28
    1f36:	ef 93       	push	r30
    1f38:	ff 93       	push	r31
    1f3a:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1f3e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1f42:	83 7f       	andi	r24, 0xF3	; 243
    1f44:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1f48:	c3 ff       	sbrs	r28, 3
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <__vector_10+0x54>
    1f4c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1f56:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1f5a:	82 e3       	ldi	r24, 0x32	; 50
    1f5c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1f60:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <_usbConfiguration>
    1f64:	88 e0       	ldi	r24, 0x08	; 8
    1f66:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1f6a:	c2 ff       	sbrs	r28, 2
    1f6c:	19 c0       	rjmp	.+50     	; 0x1fa0 <__vector_10+0x8a>
    1f6e:	83 e0       	ldi	r24, 0x03	; 3
    1f70:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_Z9USB_Flushh>
    1f74:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <TxLEDPulse>
    1f78:	88 23       	and	r24, r24
    1f7a:	39 f0       	breq	.+14     	; 0x1f8a <__vector_10+0x74>
    1f7c:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <TxLEDPulse>
    1f80:	81 50       	subi	r24, 0x01	; 1
    1f82:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <TxLEDPulse>
    1f86:	88 23       	and	r24, r24
    1f88:	89 f1       	breq	.+98     	; 0x1fec <__vector_10+0xd6>
    1f8a:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <RxLEDPulse>
    1f8e:	88 23       	and	r24, r24
    1f90:	39 f0       	breq	.+14     	; 0x1fa0 <__vector_10+0x8a>
    1f92:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <RxLEDPulse>
    1f96:	81 50       	subi	r24, 0x01	; 1
    1f98:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <RxLEDPulse>
    1f9c:	88 23       	and	r24, r24
    1f9e:	41 f1       	breq	.+80     	; 0x1ff0 <__vector_10+0xda>
    1fa0:	c4 ff       	sbrs	r28, 4
    1fa2:	10 c0       	rjmp	.+32     	; 0x1fc4 <__vector_10+0xae>
    1fa4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1fa8:	8e 7e       	andi	r24, 0xEE	; 238
    1faa:	81 60       	ori	r24, 0x01	; 1
    1fac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1fb0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1fb4:	8f 7e       	andi	r24, 0xEF	; 239
    1fb6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1fba:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_usbSuspendState>
    1fbe:	8e 7e       	andi	r24, 0xEE	; 238
    1fc0:	80 61       	ori	r24, 0x10	; 16
    1fc2:	11 c0       	rjmp	.+34     	; 0x1fe6 <__vector_10+0xd0>
    1fc4:	c0 ff       	sbrs	r28, 0
    1fc6:	16 c0       	rjmp	.+44     	; 0x1ff4 <__vector_10+0xde>
    1fc8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1fcc:	8e 7e       	andi	r24, 0xEE	; 238
    1fce:	80 61       	ori	r24, 0x10	; 16
    1fd0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1fd4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1fd8:	8e 7e       	andi	r24, 0xEE	; 238
    1fda:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1fde:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_usbSuspendState>
    1fe2:	8e 7e       	andi	r24, 0xEE	; 238
    1fe4:	81 60       	ori	r24, 0x01	; 1
    1fe6:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <_usbSuspendState>
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <__vector_10+0xde>
    1fec:	5d 9a       	sbi	0x0b, 5	; 11
    1fee:	cd cf       	rjmp	.-102    	; 0x1f8a <__vector_10+0x74>
    1ff0:	28 9a       	sbi	0x05, 0	; 5
    1ff2:	d6 cf       	rjmp	.-84     	; 0x1fa0 <__vector_10+0x8a>
    1ff4:	ff 91       	pop	r31
    1ff6:	ef 91       	pop	r30
    1ff8:	cf 91       	pop	r28
    1ffa:	bf 91       	pop	r27
    1ffc:	af 91       	pop	r26
    1ffe:	9f 91       	pop	r25
    2000:	8f 91       	pop	r24
    2002:	7f 91       	pop	r23
    2004:	6f 91       	pop	r22
    2006:	5f 91       	pop	r21
    2008:	4f 91       	pop	r20
    200a:	3f 91       	pop	r19
    200c:	2f 91       	pop	r18
    200e:	0f 90       	pop	r0
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	0f 90       	pop	r0
    2014:	1f 90       	pop	r1
    2016:	18 95       	reti

00002018 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    2018:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <_usbConfiguration>
	_usbCurrentStatus = 0;
    201c:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <_usbCurrentStatus>
	_usbSuspendState = 0;
    2020:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <_usbSuspendState>
	USB_ClockEnable();
    2024:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    2028:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    202c:	8e 7e       	andi	r24, 0xEE	; 238
    202e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    2032:	8d e0       	ldi	r24, 0x0D	; 13
    2034:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    2038:	55 9a       	sbi	0x0a, 5	; 10
    203a:	20 9a       	sbi	0x04, 0	; 4

#if MAGIC_KEY_POS != (RAMEND-1)
	if (pgm_read_word(FLASHEND - 1) == NEW_LUFA_SIGNATURE) {
    203c:	ee ef       	ldi	r30, 0xFE	; 254
    203e:	ff e7       	ldi	r31, 0x7F	; 127
    2040:	85 91       	lpm	r24, Z+
    2042:	94 91       	lpm	r25, Z
    2044:	8b 3f       	cpi	r24, 0xFB	; 251
    2046:	9c 4d       	sbci	r25, 0xDC	; 220
    2048:	19 f4       	brne	.+6      	; 0x2050 <_ZN10USBDevice_6attachEv+0x38>
		_updatedLUFAbootloader = true;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <_updatedLUFAbootloader>
    2050:	08 95       	ret

00002052 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2052:	1f 92       	push	r1
    2054:	0f 92       	push	r0
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	0f 92       	push	r0
    205a:	11 24       	eor	r1, r1
    205c:	2f 93       	push	r18
    205e:	3f 93       	push	r19
    2060:	8f 93       	push	r24
    2062:	9f 93       	push	r25
    2064:	af 93       	push	r26
    2066:	bf 93       	push	r27
    2068:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <timer0_millis>
    206c:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <timer0_millis+0x1>
    2070:	a0 91 25 04 	lds	r26, 0x0425	; 0x800425 <timer0_millis+0x2>
    2074:	b0 91 26 04 	lds	r27, 0x0426	; 0x800426 <timer0_millis+0x3>
    2078:	30 91 22 04 	lds	r19, 0x0422	; 0x800422 <timer0_fract>
    207c:	23 e0       	ldi	r18, 0x03	; 3
    207e:	23 0f       	add	r18, r19
    2080:	2d 37       	cpi	r18, 0x7D	; 125
    2082:	20 f4       	brcc	.+8      	; 0x208c <__vector_23+0x3a>
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	a1 1d       	adc	r26, r1
    2088:	b1 1d       	adc	r27, r1
    208a:	05 c0       	rjmp	.+10     	; 0x2096 <__vector_23+0x44>
    208c:	26 e8       	ldi	r18, 0x86	; 134
    208e:	23 0f       	add	r18, r19
    2090:	02 96       	adiw	r24, 0x02	; 2
    2092:	a1 1d       	adc	r26, r1
    2094:	b1 1d       	adc	r27, r1
    2096:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <timer0_fract>
    209a:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <timer0_millis>
    209e:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <timer0_millis+0x1>
    20a2:	a0 93 25 04 	sts	0x0425, r26	; 0x800425 <timer0_millis+0x2>
    20a6:	b0 93 26 04 	sts	0x0426, r27	; 0x800426 <timer0_millis+0x3>
    20aa:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <timer0_overflow_count>
    20ae:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <timer0_overflow_count+0x1>
    20b2:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <timer0_overflow_count+0x2>
    20b6:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <timer0_overflow_count+0x3>
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	a1 1d       	adc	r26, r1
    20be:	b1 1d       	adc	r27, r1
    20c0:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <timer0_overflow_count>
    20c4:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <timer0_overflow_count+0x1>
    20c8:	a0 93 29 04 	sts	0x0429, r26	; 0x800429 <timer0_overflow_count+0x2>
    20cc:	b0 93 2a 04 	sts	0x042A, r27	; 0x80042a <timer0_overflow_count+0x3>
    20d0:	bf 91       	pop	r27
    20d2:	af 91       	pop	r26
    20d4:	9f 91       	pop	r25
    20d6:	8f 91       	pop	r24
    20d8:	3f 91       	pop	r19
    20da:	2f 91       	pop	r18
    20dc:	0f 90       	pop	r0
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	0f 90       	pop	r0
    20e2:	1f 90       	pop	r1
    20e4:	18 95       	reti

000020e6 <millis>:
    20e6:	2f b7       	in	r18, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <timer0_millis>
    20ee:	70 91 24 04 	lds	r23, 0x0424	; 0x800424 <timer0_millis+0x1>
    20f2:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <timer0_millis+0x2>
    20f6:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <timer0_millis+0x3>
    20fa:	2f bf       	out	0x3f, r18	; 63
    20fc:	08 95       	ret

000020fe <micros>:
    20fe:	3f b7       	in	r19, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <timer0_overflow_count>
    2106:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <timer0_overflow_count+0x1>
    210a:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <timer0_overflow_count+0x2>
    210e:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <timer0_overflow_count+0x3>
    2112:	26 b5       	in	r18, 0x26	; 38
    2114:	a8 9b       	sbis	0x15, 0	; 21
    2116:	05 c0       	rjmp	.+10     	; 0x2122 <micros+0x24>
    2118:	2f 3f       	cpi	r18, 0xFF	; 255
    211a:	19 f0       	breq	.+6      	; 0x2122 <micros+0x24>
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	a1 1d       	adc	r26, r1
    2120:	b1 1d       	adc	r27, r1
    2122:	3f bf       	out	0x3f, r19	; 63
    2124:	ba 2f       	mov	r27, r26
    2126:	a9 2f       	mov	r26, r25
    2128:	98 2f       	mov	r25, r24
    212a:	88 27       	eor	r24, r24
    212c:	82 0f       	add	r24, r18
    212e:	91 1d       	adc	r25, r1
    2130:	a1 1d       	adc	r26, r1
    2132:	b1 1d       	adc	r27, r1
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	42 e0       	ldi	r20, 0x02	; 2
    213a:	66 0f       	add	r22, r22
    213c:	77 1f       	adc	r23, r23
    213e:	88 1f       	adc	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	4a 95       	dec	r20
    2144:	d1 f7       	brne	.-12     	; 0x213a <micros+0x3c>
    2146:	08 95       	ret

00002148 <delay>:
    2148:	8f 92       	push	r8
    214a:	9f 92       	push	r9
    214c:	af 92       	push	r10
    214e:	bf 92       	push	r11
    2150:	cf 92       	push	r12
    2152:	df 92       	push	r13
    2154:	ef 92       	push	r14
    2156:	ff 92       	push	r15
    2158:	6b 01       	movw	r12, r22
    215a:	7c 01       	movw	r14, r24
    215c:	0e 94 7f 10 	call	0x20fe	; 0x20fe <micros>
    2160:	4b 01       	movw	r8, r22
    2162:	5c 01       	movw	r10, r24
    2164:	c1 14       	cp	r12, r1
    2166:	d1 04       	cpc	r13, r1
    2168:	e1 04       	cpc	r14, r1
    216a:	f1 04       	cpc	r15, r1
    216c:	01 f1       	breq	.+64     	; 0x21ae <delay+0x66>
    216e:	0e 94 37 14 	call	0x286e	; 0x286e <yield>
    2172:	0e 94 7f 10 	call	0x20fe	; 0x20fe <micros>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	88 19       	sub	r24, r8
    217c:	99 09       	sbc	r25, r9
    217e:	aa 09       	sbc	r26, r10
    2180:	bb 09       	sbc	r27, r11
    2182:	88 3e       	cpi	r24, 0xE8	; 232
    2184:	93 40       	sbci	r25, 0x03	; 3
    2186:	a1 05       	cpc	r26, r1
    2188:	b1 05       	cpc	r27, r1
    218a:	60 f3       	brcs	.-40     	; 0x2164 <delay+0x1c>
    218c:	21 e0       	ldi	r18, 0x01	; 1
    218e:	c2 1a       	sub	r12, r18
    2190:	d1 08       	sbc	r13, r1
    2192:	e1 08       	sbc	r14, r1
    2194:	f1 08       	sbc	r15, r1
    2196:	88 ee       	ldi	r24, 0xE8	; 232
    2198:	88 0e       	add	r8, r24
    219a:	83 e0       	ldi	r24, 0x03	; 3
    219c:	98 1e       	adc	r9, r24
    219e:	a1 1c       	adc	r10, r1
    21a0:	b1 1c       	adc	r11, r1
    21a2:	c1 14       	cp	r12, r1
    21a4:	d1 04       	cpc	r13, r1
    21a6:	e1 04       	cpc	r14, r1
    21a8:	f1 04       	cpc	r15, r1
    21aa:	19 f7       	brne	.-58     	; 0x2172 <delay+0x2a>
    21ac:	db cf       	rjmp	.-74     	; 0x2164 <delay+0x1c>
    21ae:	ff 90       	pop	r15
    21b0:	ef 90       	pop	r14
    21b2:	df 90       	pop	r13
    21b4:	cf 90       	pop	r12
    21b6:	bf 90       	pop	r11
    21b8:	af 90       	pop	r10
    21ba:	9f 90       	pop	r9
    21bc:	8f 90       	pop	r8
    21be:	08 95       	ret

000021c0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    21c0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    21c2:	84 b5       	in	r24, 0x24	; 36
    21c4:	82 60       	ori	r24, 0x02	; 2
    21c6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    21c8:	84 b5       	in	r24, 0x24	; 36
    21ca:	81 60       	ori	r24, 0x01	; 1
    21cc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    21ce:	85 b5       	in	r24, 0x25	; 37
    21d0:	82 60       	ori	r24, 0x02	; 2
    21d2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    21d4:	85 b5       	in	r24, 0x25	; 37
    21d6:	81 60       	ori	r24, 0x01	; 1
    21d8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    21da:	ee e6       	ldi	r30, 0x6E	; 110
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	81 60       	ori	r24, 0x01	; 1
    21e2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    21e4:	e1 e8       	ldi	r30, 0x81	; 129
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    21ea:	80 81       	ld	r24, Z
    21ec:	82 60       	ori	r24, 0x02	; 2
    21ee:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    21f0:	80 81       	ld	r24, Z
    21f2:	81 60       	ori	r24, 0x01	; 1
    21f4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    21f6:	e0 e8       	ldi	r30, 0x80	; 128
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	81 60       	ori	r24, 0x01	; 1
    21fe:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2200:	e1 e9       	ldi	r30, 0x91	; 145
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	82 60       	ori	r24, 0x02	; 2
    2208:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    220a:	80 81       	ld	r24, Z
    220c:	81 60       	ori	r24, 0x01	; 1
    220e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2210:	e0 e9       	ldi	r30, 0x90	; 144
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	81 60       	ori	r24, 0x01	; 1
    2218:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    221a:	e1 ec       	ldi	r30, 0xC1	; 193
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	84 60       	ori	r24, 0x04	; 4
    2222:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    2224:	80 81       	ld	r24, Z
    2226:	82 60       	ori	r24, 0x02	; 2
    2228:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    222a:	80 81       	ld	r24, Z
    222c:	81 60       	ori	r24, 0x01	; 1
    222e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    2230:	e3 ec       	ldi	r30, 0xC3	; 195
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	81 60       	ori	r24, 0x01	; 1
    2238:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    223a:	e0 ec       	ldi	r30, 0xC0	; 192
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	82 60       	ori	r24, 0x02	; 2
    2242:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    2244:	e2 ec       	ldi	r30, 0xC2	; 194
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	81 60       	ori	r24, 0x01	; 1
    224c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    224e:	ea e7       	ldi	r30, 0x7A	; 122
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	84 60       	ori	r24, 0x04	; 4
    2256:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2258:	80 81       	ld	r24, Z
    225a:	82 60       	ori	r24, 0x02	; 2
    225c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    225e:	80 81       	ld	r24, Z
    2260:	81 60       	ori	r24, 0x01	; 1
    2262:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2264:	80 81       	ld	r24, Z
    2266:	80 68       	ori	r24, 0x80	; 128
    2268:	80 83       	st	Z, r24
    226a:	08 95       	ret

0000226c <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    226c:	82 31       	cpi	r24, 0x12	; 18
    226e:	08 f0       	brcs	.+2      	; 0x2272 <analogRead+0x6>
    2270:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    2272:	e8 2f       	mov	r30, r24
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	e2 5a       	subi	r30, 0xA2	; 162
    2278:	fe 4f       	sbci	r31, 0xFE	; 254
    227a:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    227c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    2280:	e3 fb       	bst	r30, 3
    2282:	22 27       	eor	r18, r18
    2284:	20 f9       	bld	r18, 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	95 e0       	ldi	r25, 0x05	; 5
    228a:	22 0f       	add	r18, r18
    228c:	33 1f       	adc	r19, r19
    228e:	9a 95       	dec	r25
    2290:	e1 f7       	brne	.-8      	; 0x228a <analogRead+0x1e>
    2292:	8f 7d       	andi	r24, 0xDF	; 223
    2294:	28 2b       	or	r18, r24
    2296:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    229a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <analog_reference>
    229e:	20 e4       	ldi	r18, 0x40	; 64
    22a0:	82 9f       	mul	r24, r18
    22a2:	c0 01       	movw	r24, r0
    22a4:	11 24       	eor	r1, r1
    22a6:	e7 70       	andi	r30, 0x07	; 7
    22a8:	e8 2b       	or	r30, r24
    22aa:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    22ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    22b2:	80 64       	ori	r24, 0x40	; 64
    22b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    22b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    22bc:	86 fd       	sbrc	r24, 6
    22be:	fc cf       	rjmp	.-8      	; 0x22b8 <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    22c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    22c4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    22c8:	90 e0       	ldi	r25, 0x00	; 0
}
    22ca:	92 2b       	or	r25, r18
    22cc:	08 95       	ret

000022ce <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    22ce:	1f 93       	push	r17
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	18 2f       	mov	r17, r24
    22d6:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    22d8:	61 e0       	ldi	r22, 0x01	; 1
    22da:	0e 94 3c 12 	call	0x2478	; 0x2478 <pinMode>
	if (val == 0)
    22de:	20 97       	sbiw	r28, 0x00	; 0
    22e0:	11 f4       	brne	.+4      	; 0x22e6 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <analogWrite+0x20>
	}
	else if (val == 255)
    22e6:	cf 3f       	cpi	r28, 0xFF	; 255
    22e8:	d1 05       	cpc	r29, r1
    22ea:	39 f4       	brne	.+14     	; 0x22fa <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    22ec:	61 e0       	ldi	r22, 0x01	; 1
    22ee:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    22f6:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    22fa:	e1 2f       	mov	r30, r17
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	e6 59       	subi	r30, 0x96	; 150
    2300:	fe 4f       	sbci	r31, 0xFE	; 254
    2302:	e4 91       	lpm	r30, Z
    2304:	8e 2f       	mov	r24, r30
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	fc 01       	movw	r30, r24
    230a:	31 97       	sbiw	r30, 0x01	; 1
    230c:	ef 30       	cpi	r30, 0x0F	; 15
    230e:	f1 05       	cpc	r31, r1
    2310:	08 f0       	brcs	.+2      	; 0x2314 <analogWrite+0x46>
    2312:	6c c0       	rjmp	.+216    	; 0x23ec <analogWrite+0x11e>
    2314:	ea 5a       	subi	r30, 0xAA	; 170
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    231c:	84 b5       	in	r24, 0x24	; 36
    231e:	80 68       	ori	r24, 0x80	; 128
    2320:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2322:	c7 bd       	out	0x27, r28	; 39
				break;
    2324:	68 c0       	rjmp	.+208    	; 0x23f6 <analogWrite+0x128>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2326:	84 b5       	in	r24, 0x24	; 36
    2328:	80 62       	ori	r24, 0x20	; 32
    232a:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    232c:	c8 bd       	out	0x28, r28	; 40
				break;
    232e:	63 c0       	rjmp	.+198    	; 0x23f6 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2330:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2334:	80 68       	ori	r24, 0x80	; 128
    2336:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    233a:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    233e:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    2342:	59 c0       	rjmp	.+178    	; 0x23f6 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2344:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2348:	80 62       	ori	r24, 0x20	; 32
    234a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    234e:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    2352:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    2356:	4f c0       	rjmp	.+158    	; 0x23f6 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1C1);
    2358:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    235c:	88 60       	ori	r24, 0x08	; 8
    235e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1C = val; // set pwm duty
    2362:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7e008d>
    2366:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
				break;
    236a:	45 c0       	rjmp	.+138    	; 0x23f6 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    236c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2370:	80 68       	ori	r24, 0x80	; 128
    2372:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3A = val; // set pwm duty
    2376:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    237a:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
				break;
    237e:	3b c0       	rjmp	.+118    	; 0x23f6 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    2380:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2384:	80 62       	ori	r24, 0x20	; 32
    2386:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3B = val; // set pwm duty
    238a:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    238e:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
				break;
    2392:	31 c0       	rjmp	.+98     	; 0x23f6 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    2394:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2398:	88 60       	ori	r24, 0x08	; 8
    239a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3C = val; // set pwm duty
    239e:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    23a2:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
				break;
    23a6:	27 c0       	rjmp	.+78     	; 0x23f6 <analogWrite+0x128>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    23a8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    23ac:	80 68       	ori	r24, 0x80	; 128
    23ae:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    23b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    23b6:	8f 7b       	andi	r24, 0xBF	; 191
    23b8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#endif
				OCR4A = val;	// set pwm duty
    23bc:	c0 93 cf 00 	sts	0x00CF, r28	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7e00cf>
				break;
    23c0:	1a c0       	rjmp	.+52     	; 0x23f6 <analogWrite+0x128>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    23c2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    23c6:	80 62       	ori	r24, 0x20	; 32
    23c8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				OCR4B = val; // set pwm duty
    23cc:	c0 93 d0 00 	sts	0x00D0, r28	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
				break;
    23d0:	12 c0       	rjmp	.+36     	; 0x23f6 <analogWrite+0x128>
			#endif
				
			#if defined(TCCR4C) && defined(COM4D1)
			case TIMER4D:				
				// connect pwm to pin on timer 4, channel D
				sbi(TCCR4C, COM4D1);
    23d2:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    23d6:	88 60       	ori	r24, 0x08	; 8
    23d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#if defined(COM4D0)		// only used on 32U4
				cbi(TCCR4C, COM4D0);
    23dc:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    23e0:	8b 7f       	andi	r24, 0xFB	; 251
    23e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#endif
				OCR4D = val;	// set pwm duty
    23e6:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
				break;
    23ea:	05 c0       	rjmp	.+10     	; 0x23f6 <analogWrite+0x128>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    23ec:	c0 38       	cpi	r28, 0x80	; 128
    23ee:	d1 05       	cpc	r29, r1
    23f0:	0c f0       	brlt	.+2      	; 0x23f4 <analogWrite+0x126>
    23f2:	7c cf       	rjmp	.-264    	; 0x22ec <analogWrite+0x1e>
    23f4:	76 cf       	rjmp	.-276    	; 0x22e2 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	1f 91       	pop	r17
    23fc:	08 95       	ret

000023fe <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	fc 01       	movw	r30, r24
    2402:	31 97       	sbiw	r30, 0x01	; 1
    2404:	ef 30       	cpi	r30, 0x0F	; 15
    2406:	f1 05       	cpc	r31, r1
    2408:	b0 f5       	brcc	.+108    	; 0x2476 <turnOffPWM+0x78>
    240a:	eb 59       	subi	r30, 0x9B	; 155
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2412:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2416:	8f 77       	andi	r24, 0x7F	; 127
    2418:	03 c0       	rjmp	.+6      	; 0x2420 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    241a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    241e:	8f 7d       	andi	r24, 0xDF	; 223
    2420:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2424:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2426:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    242a:	87 7f       	andi	r24, 0xF7	; 247
    242c:	f9 cf       	rjmp	.-14     	; 0x2420 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    242e:	84 b5       	in	r24, 0x24	; 36
    2430:	8f 77       	andi	r24, 0x7F	; 127
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2434:	84 b5       	in	r24, 0x24	; 36
    2436:	8f 7d       	andi	r24, 0xDF	; 223
    2438:	84 bd       	out	0x24, r24	; 36
    243a:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    243c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2440:	8f 77       	andi	r24, 0x7F	; 127
    2442:	07 c0       	rjmp	.+14     	; 0x2452 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2444:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2448:	8f 7d       	andi	r24, 0xDF	; 223
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    244c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2450:	87 7f       	andi	r24, 0xF7	; 247
    2452:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2456:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2458:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    245c:	8f 77       	andi	r24, 0x7F	; 127
    245e:	03 c0       	rjmp	.+6      	; 0x2466 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2460:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2464:	8f 7d       	andi	r24, 0xDF	; 223
    2466:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    246a:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    246c:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2470:	87 7f       	andi	r24, 0xF7	; 247
    2472:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2476:	08 95       	ret

00002478 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	fc 01       	movw	r30, r24
    2480:	e7 57       	subi	r30, 0x77	; 119
    2482:	fe 4f       	sbci	r31, 0xFE	; 254
    2484:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2486:	fc 01       	movw	r30, r24
    2488:	e8 55       	subi	r30, 0x58	; 88
    248a:	fe 4f       	sbci	r31, 0xFE	; 254
    248c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    248e:	88 23       	and	r24, r24
    2490:	61 f1       	breq	.+88     	; 0x24ea <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	fc 01       	movw	r30, r24
    249a:	ed 51       	subi	r30, 0x1D	; 29
    249c:	fe 4f       	sbci	r31, 0xFE	; 254
    249e:	c5 91       	lpm	r28, Z+
    24a0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    24a2:	fc 01       	movw	r30, r24
    24a4:	eb 52       	subi	r30, 0x2B	; 43
    24a6:	fe 4f       	sbci	r31, 0xFE	; 254
    24a8:	a5 91       	lpm	r26, Z+
    24aa:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    24ac:	61 11       	cpse	r22, r1
    24ae:	09 c0       	rjmp	.+18     	; 0x24c2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    24b0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    24b2:	f8 94       	cli
		*reg &= ~bit;
    24b4:	88 81       	ld	r24, Y
    24b6:	20 95       	com	r18
    24b8:	82 23       	and	r24, r18
    24ba:	88 83       	st	Y, r24
		*out &= ~bit;
    24bc:	ec 91       	ld	r30, X
    24be:	2e 23       	and	r18, r30
    24c0:	0b c0       	rjmp	.+22     	; 0x24d8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    24c2:	62 30       	cpi	r22, 0x02	; 2
    24c4:	61 f4       	brne	.+24     	; 0x24de <pinMode+0x66>
		uint8_t oldSREG = SREG;
    24c6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    24c8:	f8 94       	cli
		*reg &= ~bit;
    24ca:	88 81       	ld	r24, Y
    24cc:	32 2f       	mov	r19, r18
    24ce:	30 95       	com	r19
    24d0:	83 23       	and	r24, r19
    24d2:	88 83       	st	Y, r24
		*out |= bit;
    24d4:	ec 91       	ld	r30, X
    24d6:	2e 2b       	or	r18, r30
    24d8:	2c 93       	st	X, r18
		SREG = oldSREG;
    24da:	9f bf       	out	0x3f, r25	; 63
    24dc:	06 c0       	rjmp	.+12     	; 0x24ea <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    24de:	8f b7       	in	r24, 0x3f	; 63
                cli();
    24e0:	f8 94       	cli
		*reg |= bit;
    24e2:	e8 81       	ld	r30, Y
    24e4:	2e 2b       	or	r18, r30
    24e6:	28 83       	st	Y, r18
		SREG = oldSREG;
    24e8:	8f bf       	out	0x3f, r24	; 63
	}
}
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	08 95       	ret

000024f0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    24f0:	1f 93       	push	r17
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	f9 01       	movw	r30, r18
    24fc:	e6 59       	subi	r30, 0x96	; 150
    24fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2500:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2502:	f9 01       	movw	r30, r18
    2504:	e7 57       	subi	r30, 0x77	; 119
    2506:	fe 4f       	sbci	r31, 0xFE	; 254
    2508:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    250a:	f9 01       	movw	r30, r18
    250c:	e8 55       	subi	r30, 0x58	; 88
    250e:	fe 4f       	sbci	r31, 0xFE	; 254
    2510:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2512:	cc 23       	and	r28, r28
    2514:	c1 f0       	breq	.+48     	; 0x2546 <digitalWrite+0x56>
    2516:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2518:	81 11       	cpse	r24, r1
    251a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <turnOffPWM>

	out = portOutputRegister(port);
    251e:	ec 2f       	mov	r30, r28
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	ee 0f       	add	r30, r30
    2524:	ff 1f       	adc	r31, r31
    2526:	eb 52       	subi	r30, 0x2B	; 43
    2528:	fe 4f       	sbci	r31, 0xFE	; 254
    252a:	a5 91       	lpm	r26, Z+
    252c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    252e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2530:	f8 94       	cli

	if (val == LOW) {
    2532:	11 11       	cpse	r17, r1
    2534:	04 c0       	rjmp	.+8      	; 0x253e <digitalWrite+0x4e>
		*out &= ~bit;
    2536:	8c 91       	ld	r24, X
    2538:	d0 95       	com	r29
    253a:	d8 23       	and	r29, r24
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <digitalWrite+0x52>
	} else {
		*out |= bit;
    253e:	ec 91       	ld	r30, X
    2540:	de 2b       	or	r29, r30
    2542:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2544:	9f bf       	out	0x3f, r25	; 63
}
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	1f 91       	pop	r17
    254c:	08 95       	ret

0000254e <digitalRead>:

int digitalRead(uint8_t pin)
{
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	f9 01       	movw	r30, r18
    2558:	e6 59       	subi	r30, 0x96	; 150
    255a:	fe 4f       	sbci	r31, 0xFE	; 254
    255c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    255e:	f9 01       	movw	r30, r18
    2560:	e7 57       	subi	r30, 0x77	; 119
    2562:	fe 4f       	sbci	r31, 0xFE	; 254
    2564:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2566:	f9 01       	movw	r30, r18
    2568:	e8 55       	subi	r30, 0x58	; 88
    256a:	fe 4f       	sbci	r31, 0xFE	; 254
    256c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    256e:	cc 23       	and	r28, r28
    2570:	91 f0       	breq	.+36     	; 0x2596 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2572:	81 11       	cpse	r24, r1
    2574:	0e 94 ff 11 	call	0x23fe	; 0x23fe <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2578:	ec 2f       	mov	r30, r28
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	ee 0f       	add	r30, r30
    257e:	ff 1f       	adc	r31, r31
    2580:	e9 53       	subi	r30, 0x39	; 57
    2582:	fe 4f       	sbci	r31, 0xFE	; 254
    2584:	a5 91       	lpm	r26, Z+
    2586:	b4 91       	lpm	r27, Z
    2588:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    258a:	ed 23       	and	r30, r29
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	21 f4       	brne	.+8      	; 0x259a <digitalRead+0x4c>
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	02 c0       	rjmp	.+4      	; 0x259a <digitalRead+0x4c>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	08 95       	ret

000025a0 <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    25a0:	0f 93       	push	r16
    25a2:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	fc 01       	movw	r30, r24
    25a8:	e7 57       	subi	r30, 0x77	; 119
    25aa:	fe 4f       	sbci	r31, 0xFE	; 254
    25ac:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
    25ae:	fc 01       	movw	r30, r24
    25b0:	e8 55       	subi	r30, 0x58	; 88
    25b2:	fe 4f       	sbci	r31, 0xFE	; 254
    25b4:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
    25b6:	66 23       	and	r22, r22
    25b8:	11 f0       	breq	.+4      	; 0x25be <pulseIn+0x1e>
    25ba:	67 2f       	mov	r22, r23
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <pulseIn+0x20>
    25be:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	ee 0f       	add	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	e9 53       	subi	r30, 0x39	; 57
    25c8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ca:	85 91       	lpm	r24, Z+
    25cc:	94 91       	lpm	r25, Z
    25ce:	89 01       	movw	r16, r18
    25d0:	9a 01       	movw	r18, r20
    25d2:	3f 70       	andi	r19, 0x0F	; 15
    25d4:	46 2f       	mov	r20, r22
    25d6:	67 2f       	mov	r22, r23
    25d8:	0e 94 27 01 	call	0x24e	; 0x24e <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    25dc:	61 15       	cp	r22, r1
    25de:	71 05       	cpc	r23, r1
    25e0:	81 05       	cpc	r24, r1
    25e2:	91 05       	cpc	r25, r1
    25e4:	49 f0       	breq	.+18     	; 0x25f8 <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	01 96       	adiw	r24, 0x01	; 1
    25ec:	a1 1d       	adc	r26, r1
    25ee:	b1 1d       	adc	r27, r1
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	9f 70       	andi	r25, 0x0F	; 15
    25f6:	03 c0       	rjmp	.+6      	; 0x25fe <pulseIn+0x5e>
	else
		return 0;
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	cb 01       	movw	r24, r22
}
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	08 95       	ret

00002604 <pulseInLong>:
 *
 * ATTENTION:
 * this function relies on micros() so cannot be used in noInterrupt() context
 */
unsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout)
{
    2604:	4f 92       	push	r4
    2606:	5f 92       	push	r5
    2608:	6f 92       	push	r6
    260a:	7f 92       	push	r7
    260c:	8f 92       	push	r8
    260e:	9f 92       	push	r9
    2610:	af 92       	push	r10
    2612:	bf 92       	push	r11
    2614:	cf 92       	push	r12
    2616:	df 92       	push	r13
    2618:	ef 92       	push	r14
    261a:	ff 92       	push	r15
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	49 01       	movw	r8, r18
    2626:	5a 01       	movw	r10, r20
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	fc 01       	movw	r30, r24
    262c:	e7 57       	subi	r30, 0x77	; 119
    262e:	fe 4f       	sbci	r31, 0xFE	; 254
    2630:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2632:	fc 01       	movw	r30, r24
    2634:	e8 55       	subi	r30, 0x58	; 88
    2636:	fe 4f       	sbci	r31, 0xFE	; 254
    2638:	c4 91       	lpm	r28, Z
	uint8_t stateMask = (state ? bit : 0);
    263a:	66 23       	and	r22, r22
    263c:	11 f0       	breq	.+4      	; 0x2642 <pulseInLong+0x3e>
    263e:	01 2f       	mov	r16, r17
    2640:	01 c0       	rjmp	.+2      	; 0x2644 <pulseInLong+0x40>
    2642:	00 e0       	ldi	r16, 0x00	; 0

	unsigned long startMicros = micros();
    2644:	0e 94 7f 10 	call	0x20fe	; 0x20fe <micros>
    2648:	6b 01       	movw	r12, r22
    264a:	7c 01       	movw	r14, r24

	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask) {
    264c:	d0 e0       	ldi	r29, 0x00	; 0
    264e:	cc 0f       	add	r28, r28
    2650:	dd 1f       	adc	r29, r29
    2652:	c9 53       	subi	r28, 0x39	; 57
    2654:	de 4f       	sbci	r29, 0xFE	; 254
    2656:	fe 01       	movw	r30, r28
    2658:	a5 91       	lpm	r26, Z+
    265a:	b4 91       	lpm	r27, Z
    265c:	8c 91       	ld	r24, X
    265e:	81 23       	and	r24, r17
    2660:	08 13       	cpse	r16, r24
    2662:	1e c0       	rjmp	.+60     	; 0x26a0 <pulseInLong+0x9c>
		if (micros() - startMicros > timeout)
    2664:	0e 94 7f 10 	call	0x20fe	; 0x20fe <micros>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	8c 19       	sub	r24, r12
    266e:	9d 09       	sbc	r25, r13
    2670:	ae 09       	sbc	r26, r14
    2672:	bf 09       	sbc	r27, r15
    2674:	88 16       	cp	r8, r24
    2676:	99 06       	cpc	r9, r25
    2678:	aa 06       	cpc	r10, r26
    267a:	bb 06       	cpc	r11, r27
    267c:	60 f7       	brcc	.-40     	; 0x2656 <pulseInLong+0x52>
			return 0;
    267e:	60 e0       	ldi	r22, 0x00	; 0
    2680:	70 e0       	ldi	r23, 0x00	; 0
    2682:	cb 01       	movw	r24, r22
    2684:	33 c0       	rjmp	.+102    	; 0x26ec <pulseInLong+0xe8>
	}

	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask) {
		if (micros() - startMicros > timeout)
    2686:	0e 94 7f 10 	call	0x20fe	; 0x20fe <micros>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	8c 19       	sub	r24, r12
    2690:	9d 09       	sbc	r25, r13
    2692:	ae 09       	sbc	r26, r14
    2694:	bf 09       	sbc	r27, r15
    2696:	88 16       	cp	r8, r24
    2698:	99 06       	cpc	r9, r25
    269a:	aa 06       	cpc	r10, r26
    269c:	bb 06       	cpc	r11, r27
    269e:	78 f3       	brcs	.-34     	; 0x267e <pulseInLong+0x7a>
		if (micros() - startMicros > timeout)
			return 0;
	}

	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask) {
    26a0:	fe 01       	movw	r30, r28
    26a2:	a5 91       	lpm	r26, Z+
    26a4:	b4 91       	lpm	r27, Z
    26a6:	8c 91       	ld	r24, X
    26a8:	81 23       	and	r24, r17
    26aa:	08 13       	cpse	r16, r24
    26ac:	ec cf       	rjmp	.-40     	; 0x2686 <pulseInLong+0x82>
		if (micros() - startMicros > timeout)
			return 0;
	}

	unsigned long start = micros();
    26ae:	0e 94 7f 10 	call	0x20fe	; 0x20fe <micros>
    26b2:	2b 01       	movw	r4, r22
    26b4:	3c 01       	movw	r6, r24
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    26b6:	fe 01       	movw	r30, r28
    26b8:	a5 91       	lpm	r26, Z+
    26ba:	b4 91       	lpm	r27, Z
    26bc:	8c 91       	ld	r24, X
    26be:	81 23       	and	r24, r17
    26c0:	08 13       	cpse	r16, r24
    26c2:	0e c0       	rjmp	.+28     	; 0x26e0 <pulseInLong+0xdc>
		if (micros() - startMicros > timeout)
    26c4:	0e 94 7f 10 	call	0x20fe	; 0x20fe <micros>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	8c 19       	sub	r24, r12
    26ce:	9d 09       	sbc	r25, r13
    26d0:	ae 09       	sbc	r26, r14
    26d2:	bf 09       	sbc	r27, r15
    26d4:	88 16       	cp	r8, r24
    26d6:	99 06       	cpc	r9, r25
    26d8:	aa 06       	cpc	r10, r26
    26da:	bb 06       	cpc	r11, r27
    26dc:	60 f7       	brcc	.-40     	; 0x26b6 <pulseInLong+0xb2>
    26de:	cf cf       	rjmp	.-98     	; 0x267e <pulseInLong+0x7a>
			return 0;
	}
	return micros() - start;
    26e0:	0e 94 7f 10 	call	0x20fe	; 0x20fe <micros>
    26e4:	64 19       	sub	r22, r4
    26e6:	75 09       	sbc	r23, r5
    26e8:	86 09       	sbc	r24, r6
    26ea:	97 09       	sbc	r25, r7
}
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	df 90       	pop	r13
    26fa:	cf 90       	pop	r12
    26fc:	bf 90       	pop	r11
    26fe:	af 90       	pop	r10
    2700:	9f 90       	pop	r9
    2702:	8f 90       	pop	r8
    2704:	7f 90       	pop	r7
    2706:	6f 90       	pop	r6
    2708:	5f 90       	pop	r5
    270a:	4f 90       	pop	r4
    270c:	08 95       	ret

0000270e <shiftIn>:
  Boston, MA  02111-1307  USA
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    270e:	cf 92       	push	r12
    2710:	df 92       	push	r13
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	f8 2e       	mov	r15, r24
    2720:	d6 2f       	mov	r29, r22
    2722:	e4 2e       	mov	r14, r20
    2724:	07 e0       	ldi	r16, 0x07	; 7
    2726:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t value = 0;
    2728:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    272a:	87 e0       	ldi	r24, 0x07	; 7
    272c:	c8 2e       	mov	r12, r24
    272e:	d1 2c       	mov	r13, r1
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
    2730:	61 e0       	ldi	r22, 0x01	; 1
    2732:	8d 2f       	mov	r24, r29
    2734:	0e 94 78 12 	call	0x24f0	; 0x24f0 <digitalWrite>
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    2738:	8f 2d       	mov	r24, r15
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
    273a:	e1 10       	cpse	r14, r1
    273c:	0a c0       	rjmp	.+20     	; 0x2752 <shiftIn+0x44>
			value |= digitalRead(dataPin) << i;
    273e:	0e 94 a7 12 	call	0x254e	; 0x254e <digitalRead>
    2742:	96 01       	movw	r18, r12
    2744:	20 1b       	sub	r18, r16
    2746:	31 0b       	sbc	r19, r17
    2748:	01 c0       	rjmp	.+2      	; 0x274c <shiftIn+0x3e>
    274a:	88 0f       	add	r24, r24
    274c:	2a 95       	dec	r18
    274e:	ea f7       	brpl	.-6      	; 0x274a <shiftIn+0x3c>
    2750:	07 c0       	rjmp	.+14     	; 0x2760 <shiftIn+0x52>
		else
			value |= digitalRead(dataPin) << (7 - i);
    2752:	0e 94 a7 12 	call	0x254e	; 0x254e <digitalRead>
    2756:	00 2e       	mov	r0, r16
    2758:	01 c0       	rjmp	.+2      	; 0x275c <shiftIn+0x4e>
    275a:	88 0f       	add	r24, r24
    275c:	0a 94       	dec	r0
    275e:	ea f7       	brpl	.-6      	; 0x275a <shiftIn+0x4c>
    2760:	c8 2b       	or	r28, r24
		digitalWrite(clockPin, LOW);
    2762:	60 e0       	ldi	r22, 0x00	; 0
    2764:	8d 2f       	mov	r24, r29
    2766:	0e 94 78 12 	call	0x24f0	; 0x24f0 <digitalWrite>
    276a:	01 50       	subi	r16, 0x01	; 1
    276c:	11 09       	sbc	r17, r1
    276e:	00 f7       	brcc	.-64     	; 0x2730 <shiftIn+0x22>
	}
	return value;
}
    2770:	8c 2f       	mov	r24, r28
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	1f 91       	pop	r17
    2778:	0f 91       	pop	r16
    277a:	ff 90       	pop	r15
    277c:	ef 90       	pop	r14
    277e:	df 90       	pop	r13
    2780:	cf 90       	pop	r12
    2782:	08 95       	ret

00002784 <shiftOut>:

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    2784:	bf 92       	push	r11
    2786:	cf 92       	push	r12
    2788:	df 92       	push	r13
    278a:	ef 92       	push	r14
    278c:	ff 92       	push	r15
    278e:	0f 93       	push	r16
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	c8 2e       	mov	r12, r24
    2798:	d6 2e       	mov	r13, r22
    279a:	b4 2e       	mov	r11, r20
    279c:	c7 e0       	ldi	r28, 0x07	; 7
    279e:	d0 e0       	ldi	r29, 0x00	; 0
    27a0:	02 2f       	mov	r16, r18
    27a2:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    27a4:	87 e0       	ldi	r24, 0x07	; 7
    27a6:	e8 2e       	mov	r14, r24
    27a8:	f1 2c       	mov	r15, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    27aa:	b1 10       	cpse	r11, r1
    27ac:	05 c0       	rjmp	.+10     	; 0x27b8 <shiftOut+0x34>
			digitalWrite(dataPin, !!(val & (1 << i)));
    27ae:	c7 01       	movw	r24, r14
    27b0:	8c 1b       	sub	r24, r28
    27b2:	9d 0b       	sbc	r25, r29
    27b4:	b8 01       	movw	r22, r16
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    27b8:	b8 01       	movw	r22, r16
    27ba:	8c 2f       	mov	r24, r28
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <shiftOut+0x3e>
    27be:	75 95       	asr	r23
    27c0:	67 95       	ror	r22
    27c2:	8a 95       	dec	r24
    27c4:	e2 f7       	brpl	.-8      	; 0x27be <shiftOut+0x3a>
    27c6:	61 70       	andi	r22, 0x01	; 1
    27c8:	8c 2d       	mov	r24, r12
    27ca:	0e 94 78 12 	call	0x24f0	; 0x24f0 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    27ce:	61 e0       	ldi	r22, 0x01	; 1
    27d0:	8d 2d       	mov	r24, r13
    27d2:	0e 94 78 12 	call	0x24f0	; 0x24f0 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    27d6:	60 e0       	ldi	r22, 0x00	; 0
    27d8:	8d 2d       	mov	r24, r13
    27da:	0e 94 78 12 	call	0x24f0	; 0x24f0 <digitalWrite>
    27de:	21 97       	sbiw	r28, 0x01	; 1
    27e0:	20 f7       	brcc	.-56     	; 0x27aa <shiftOut+0x26>
	}
}
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	ff 90       	pop	r15
    27ec:	ef 90       	pop	r14
    27ee:	df 90       	pop	r13
    27f0:	cf 90       	pop	r12
    27f2:	bf 90       	pop	r11
    27f4:	08 95       	ret

000027f6 <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    27f6:	cf 92       	push	r12
    27f8:	df 92       	push	r13
    27fa:	ef 92       	push	r14
    27fc:	ff 92       	push	r15
  if (howbig == 0) {
    27fe:	61 15       	cp	r22, r1
    2800:	71 05       	cpc	r23, r1
    2802:	81 05       	cpc	r24, r1
    2804:	91 05       	cpc	r25, r1
    2806:	49 f0       	breq	.+18     	; 0x281a <_Z6randoml+0x24>
    2808:	6b 01       	movw	r12, r22
    280a:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    280c:	0e 94 7d 15 	call	0x2afa	; 0x2afa <random>
    2810:	a7 01       	movw	r20, r14
    2812:	96 01       	movw	r18, r12
    2814:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    2818:	03 c0       	rjmp	.+6      	; 0x2820 <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	df 90       	pop	r13
    2826:	cf 90       	pop	r12
    2828:	08 95       	ret

0000282a <_Z6randomll>:

long random(long howsmall, long howbig)
{
    282a:	cf 92       	push	r12
    282c:	df 92       	push	r13
    282e:	ef 92       	push	r14
    2830:	ff 92       	push	r15
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
  if (howsmall >= howbig) {
    2836:	62 17       	cp	r22, r18
    2838:	73 07       	cpc	r23, r19
    283a:	84 07       	cpc	r24, r20
    283c:	95 07       	cpc	r25, r21
    283e:	84 f4       	brge	.+32     	; 0x2860 <_Z6randomll+0x36>
    2840:	89 01       	movw	r16, r18
    2842:	9a 01       	movw	r18, r20
    2844:	6b 01       	movw	r12, r22
    2846:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2848:	c9 01       	movw	r24, r18
    284a:	b8 01       	movw	r22, r16
    284c:	6c 19       	sub	r22, r12
    284e:	7d 09       	sbc	r23, r13
    2850:	8e 09       	sbc	r24, r14
    2852:	9f 09       	sbc	r25, r15
    2854:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_Z6randoml>
    2858:	6c 0d       	add	r22, r12
    285a:	7d 1d       	adc	r23, r13
    285c:	8e 1d       	adc	r24, r14
    285e:	9f 1d       	adc	r25, r15
}
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	df 90       	pop	r13
    286a:	cf 90       	pop	r12
    286c:	08 95       	ret

0000286e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    286e:	08 95       	ret

00002870 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    2870:	ef 92       	push	r14
    2872:	ff 92       	push	r15
    2874:	0f 93       	push	r16
    2876:	1f 93       	push	r17
    2878:	cf 93       	push	r28
    287a:	df 93       	push	r29
    287c:	7b 01       	movw	r14, r22
    287e:	fc 01       	movw	r30, r24
    2880:	c2 81       	ldd	r28, Z+2	; 0x02
    2882:	d3 81       	ldd	r29, Z+3	; 0x03
    2884:	00 e0       	ldi	r16, 0x00	; 0
    2886:	10 e0       	ldi	r17, 0x00	; 0
    2888:	20 97       	sbiw	r28, 0x00	; 0
    288a:	81 f0       	breq	.+32     	; 0x28ac <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    288c:	e8 81       	ld	r30, Y
    288e:	f9 81       	ldd	r31, Y+1	; 0x01
    2890:	02 80       	ldd	r0, Z+2	; 0x02
    2892:	f3 81       	ldd	r31, Z+3	; 0x03
    2894:	e0 2d       	mov	r30, r0
    2896:	b7 01       	movw	r22, r14
    2898:	ce 01       	movw	r24, r28
    289a:	09 95       	icall
    289c:	97 fd       	sbrc	r25, 7
    289e:	08 c0       	rjmp	.+16     	; 0x28b0 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    28a0:	08 0f       	add	r16, r24
    28a2:	19 1f       	adc	r17, r25
    28a4:	08 84       	ldd	r0, Y+8	; 0x08
    28a6:	d9 85       	ldd	r29, Y+9	; 0x09
    28a8:	c0 2d       	mov	r28, r0
    28aa:	ee cf       	rjmp	.-36     	; 0x2888 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    28ac:	c8 01       	movw	r24, r16
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    28b0:	8f ef       	ldi	r24, 0xFF	; 255
    28b2:	9f ef       	ldi	r25, 0xFF	; 255
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	08 95       	ret

000028c2 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	8b 01       	movw	r16, r22
    28cc:	fc 01       	movw	r30, r24
    28ce:	c2 81       	ldd	r28, Z+2	; 0x02
    28d0:	d3 81       	ldd	r29, Z+3	; 0x03
    28d2:	20 97       	sbiw	r28, 0x00	; 0
    28d4:	71 f0       	breq	.+28     	; 0x28f2 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    28d6:	e8 81       	ld	r30, Y
    28d8:	f9 81       	ldd	r31, Y+1	; 0x01
    28da:	04 80       	ldd	r0, Z+4	; 0x04
    28dc:	f5 81       	ldd	r31, Z+5	; 0x05
    28de:	e0 2d       	mov	r30, r0
    28e0:	b8 01       	movw	r22, r16
    28e2:	ce 01       	movw	r24, r28
    28e4:	09 95       	icall
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	31 f4       	brne	.+12     	; 0x28f6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    28ea:	08 84       	ldd	r0, Y+8	; 0x08
    28ec:	d9 85       	ldd	r29, Y+9	; 0x09
    28ee:	c0 2d       	mov	r28, r0
    28f0:	f0 cf       	rjmp	.-32     	; 0x28d2 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	df 91       	pop	r29
    28f8:	cf 91       	pop	r28
    28fa:	1f 91       	pop	r17
    28fc:	0f 91       	pop	r16
    28fe:	08 95       	ret

00002900 <_ZN13PluggableUSB_12getShortNameEPc>:
    2900:	0f 93       	push	r16
    2902:	1f 93       	push	r17
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	8b 01       	movw	r16, r22
    290a:	fc 01       	movw	r30, r24
    290c:	c2 81       	ldd	r28, Z+2	; 0x02
    290e:	d3 81       	ldd	r29, Z+3	; 0x03
    2910:	20 97       	sbiw	r28, 0x00	; 0
    2912:	71 f0       	breq	.+28     	; 0x2930 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    2914:	e8 81       	ld	r30, Y
    2916:	f9 81       	ldd	r31, Y+1	; 0x01
    2918:	06 80       	ldd	r0, Z+6	; 0x06
    291a:	f7 81       	ldd	r31, Z+7	; 0x07
    291c:	e0 2d       	mov	r30, r0
    291e:	b8 01       	movw	r22, r16
    2920:	ce 01       	movw	r24, r28
    2922:	09 95       	icall
    2924:	08 0f       	add	r16, r24
    2926:	11 1d       	adc	r17, r1
    2928:	08 84       	ldd	r0, Y+8	; 0x08
    292a:	d9 85       	ldd	r29, Y+9	; 0x09
    292c:	c0 2d       	mov	r28, r0
    292e:	f0 cf       	rjmp	.-32     	; 0x2910 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    2930:	f8 01       	movw	r30, r16
    2932:	10 82       	st	Z, r1
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	08 95       	ret

0000293e <_ZN13PluggableUSB_5setupER8USBSetup>:
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	8b 01       	movw	r16, r22
    2948:	fc 01       	movw	r30, r24
    294a:	c2 81       	ldd	r28, Z+2	; 0x02
    294c:	d3 81       	ldd	r29, Z+3	; 0x03
    294e:	20 97       	sbiw	r28, 0x00	; 0
    2950:	71 f0       	breq	.+28     	; 0x296e <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    2952:	e8 81       	ld	r30, Y
    2954:	f9 81       	ldd	r31, Y+1	; 0x01
    2956:	01 90       	ld	r0, Z+
    2958:	f0 81       	ld	r31, Z
    295a:	e0 2d       	mov	r30, r0
    295c:	b8 01       	movw	r22, r16
    295e:	ce 01       	movw	r24, r28
    2960:	09 95       	icall
    2962:	81 11       	cpse	r24, r1
    2964:	05 c0       	rjmp	.+10     	; 0x2970 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    2966:	08 84       	ldd	r0, Y+8	; 0x08
    2968:	d9 85       	ldd	r29, Y+9	; 0x09
    296a:	c0 2d       	mov	r28, r0
    296c:	f0 cf       	rjmp	.-32     	; 0x294e <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	08 95       	ret

0000297a <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    297a:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZGVZ12PluggableUSBvE3obj>
    297e:	81 11       	cpse	r24, r1
    2980:	0d c0       	rjmp	.+26     	; 0x299c <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    2982:	82 e0       	ldi	r24, 0x02	; 2
    2984:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <_ZZ12PluggableUSBvE3obj>
    2988:	84 e0       	ldi	r24, 0x04	; 4
    298a:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <_ZZ12PluggableUSBvE3obj+0x1>
    298e:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <_ZZ12PluggableUSBvE3obj+0x3>
    2992:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    299c:	8b e2       	ldi	r24, 0x2B	; 43
    299e:	94 e0       	ldi	r25, 0x04	; 4
    29a0:	08 95       	ret

000029a2 <__udivmodsi4>:
    29a2:	a1 e2       	ldi	r26, 0x21	; 33
    29a4:	1a 2e       	mov	r1, r26
    29a6:	aa 1b       	sub	r26, r26
    29a8:	bb 1b       	sub	r27, r27
    29aa:	fd 01       	movw	r30, r26
    29ac:	0d c0       	rjmp	.+26     	; 0x29c8 <__udivmodsi4_ep>

000029ae <__udivmodsi4_loop>:
    29ae:	aa 1f       	adc	r26, r26
    29b0:	bb 1f       	adc	r27, r27
    29b2:	ee 1f       	adc	r30, r30
    29b4:	ff 1f       	adc	r31, r31
    29b6:	a2 17       	cp	r26, r18
    29b8:	b3 07       	cpc	r27, r19
    29ba:	e4 07       	cpc	r30, r20
    29bc:	f5 07       	cpc	r31, r21
    29be:	20 f0       	brcs	.+8      	; 0x29c8 <__udivmodsi4_ep>
    29c0:	a2 1b       	sub	r26, r18
    29c2:	b3 0b       	sbc	r27, r19
    29c4:	e4 0b       	sbc	r30, r20
    29c6:	f5 0b       	sbc	r31, r21

000029c8 <__udivmodsi4_ep>:
    29c8:	66 1f       	adc	r22, r22
    29ca:	77 1f       	adc	r23, r23
    29cc:	88 1f       	adc	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	1a 94       	dec	r1
    29d2:	69 f7       	brne	.-38     	; 0x29ae <__udivmodsi4_loop>
    29d4:	60 95       	com	r22
    29d6:	70 95       	com	r23
    29d8:	80 95       	com	r24
    29da:	90 95       	com	r25
    29dc:	9b 01       	movw	r18, r22
    29de:	ac 01       	movw	r20, r24
    29e0:	bd 01       	movw	r22, r26
    29e2:	cf 01       	movw	r24, r30
    29e4:	08 95       	ret

000029e6 <__divmodsi4>:
    29e6:	05 2e       	mov	r0, r21
    29e8:	97 fb       	bst	r25, 7
    29ea:	1e f4       	brtc	.+6      	; 0x29f2 <__divmodsi4+0xc>
    29ec:	00 94       	com	r0
    29ee:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__negsi2>
    29f2:	57 fd       	sbrc	r21, 7
    29f4:	07 d0       	rcall	.+14     	; 0x2a04 <__divmodsi4_neg2>
    29f6:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodsi4>
    29fa:	07 fc       	sbrc	r0, 7
    29fc:	03 d0       	rcall	.+6      	; 0x2a04 <__divmodsi4_neg2>
    29fe:	4e f4       	brtc	.+18     	; 0x2a12 <__divmodsi4_exit>
    2a00:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__negsi2>

00002a04 <__divmodsi4_neg2>:
    2a04:	50 95       	com	r21
    2a06:	40 95       	com	r20
    2a08:	30 95       	com	r19
    2a0a:	21 95       	neg	r18
    2a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0e:	4f 4f       	sbci	r20, 0xFF	; 255
    2a10:	5f 4f       	sbci	r21, 0xFF	; 255

00002a12 <__divmodsi4_exit>:
    2a12:	08 95       	ret

00002a14 <__negsi2>:
    2a14:	90 95       	com	r25
    2a16:	80 95       	com	r24
    2a18:	70 95       	com	r23
    2a1a:	61 95       	neg	r22
    2a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a20:	9f 4f       	sbci	r25, 0xFF	; 255
    2a22:	08 95       	ret

00002a24 <__tablejump2__>:
    2a24:	ee 0f       	add	r30, r30
    2a26:	ff 1f       	adc	r31, r31
    2a28:	05 90       	lpm	r0, Z+
    2a2a:	f4 91       	lpm	r31, Z
    2a2c:	e0 2d       	mov	r30, r0
    2a2e:	09 94       	ijmp

00002a30 <__muluhisi3>:
    2a30:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__umulhisi3>
    2a34:	a5 9f       	mul	r26, r21
    2a36:	90 0d       	add	r25, r0
    2a38:	b4 9f       	mul	r27, r20
    2a3a:	90 0d       	add	r25, r0
    2a3c:	a4 9f       	mul	r26, r20
    2a3e:	80 0d       	add	r24, r0
    2a40:	91 1d       	adc	r25, r1
    2a42:	11 24       	eor	r1, r1
    2a44:	08 95       	ret

00002a46 <__umulhisi3>:
    2a46:	a2 9f       	mul	r26, r18
    2a48:	b0 01       	movw	r22, r0
    2a4a:	b3 9f       	mul	r27, r19
    2a4c:	c0 01       	movw	r24, r0
    2a4e:	a3 9f       	mul	r26, r19
    2a50:	70 0d       	add	r23, r0
    2a52:	81 1d       	adc	r24, r1
    2a54:	11 24       	eor	r1, r1
    2a56:	91 1d       	adc	r25, r1
    2a58:	b2 9f       	mul	r27, r18
    2a5a:	70 0d       	add	r23, r0
    2a5c:	81 1d       	adc	r24, r1
    2a5e:	11 24       	eor	r1, r1
    2a60:	91 1d       	adc	r25, r1
    2a62:	08 95       	ret

00002a64 <random_r>:
    2a64:	8f 92       	push	r8
    2a66:	9f 92       	push	r9
    2a68:	af 92       	push	r10
    2a6a:	bf 92       	push	r11
    2a6c:	cf 92       	push	r12
    2a6e:	df 92       	push	r13
    2a70:	ef 92       	push	r14
    2a72:	ff 92       	push	r15
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	ec 01       	movw	r28, r24
    2a7a:	68 81       	ld	r22, Y
    2a7c:	79 81       	ldd	r23, Y+1	; 0x01
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	9b 81       	ldd	r25, Y+3	; 0x03
    2a82:	61 15       	cp	r22, r1
    2a84:	71 05       	cpc	r23, r1
    2a86:	81 05       	cpc	r24, r1
    2a88:	91 05       	cpc	r25, r1
    2a8a:	21 f4       	brne	.+8      	; 0x2a94 <random_r+0x30>
    2a8c:	64 e2       	ldi	r22, 0x24	; 36
    2a8e:	79 ed       	ldi	r23, 0xD9	; 217
    2a90:	8b e5       	ldi	r24, 0x5B	; 91
    2a92:	97 e0       	ldi	r25, 0x07	; 7
    2a94:	2d e1       	ldi	r18, 0x1D	; 29
    2a96:	33 ef       	ldi	r19, 0xF3	; 243
    2a98:	41 e0       	ldi	r20, 0x01	; 1
    2a9a:	50 e0       	ldi	r21, 0x00	; 0
    2a9c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    2aa0:	49 01       	movw	r8, r18
    2aa2:	5a 01       	movw	r10, r20
    2aa4:	9b 01       	movw	r18, r22
    2aa6:	ac 01       	movw	r20, r24
    2aa8:	a7 ea       	ldi	r26, 0xA7	; 167
    2aaa:	b1 e4       	ldi	r27, 0x41	; 65
    2aac:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__muluhisi3>
    2ab0:	6b 01       	movw	r12, r22
    2ab2:	7c 01       	movw	r14, r24
    2ab4:	ac ee       	ldi	r26, 0xEC	; 236
    2ab6:	b4 ef       	ldi	r27, 0xF4	; 244
    2ab8:	a5 01       	movw	r20, r10
    2aba:	94 01       	movw	r18, r8
    2abc:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__mulohisi3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	8c 0d       	add	r24, r12
    2ac6:	9d 1d       	adc	r25, r13
    2ac8:	ae 1d       	adc	r26, r14
    2aca:	bf 1d       	adc	r27, r15
    2acc:	b7 ff       	sbrs	r27, 7
    2ace:	03 c0       	rjmp	.+6      	; 0x2ad6 <random_r+0x72>
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	a1 09       	sbc	r26, r1
    2ad4:	b0 48       	sbci	r27, 0x80	; 128
    2ad6:	88 83       	st	Y, r24
    2ad8:	99 83       	std	Y+1, r25	; 0x01
    2ada:	aa 83       	std	Y+2, r26	; 0x02
    2adc:	bb 83       	std	Y+3, r27	; 0x03
    2ade:	bc 01       	movw	r22, r24
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	9f 77       	andi	r25, 0x7F	; 127
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	ff 90       	pop	r15
    2aea:	ef 90       	pop	r14
    2aec:	df 90       	pop	r13
    2aee:	cf 90       	pop	r12
    2af0:	bf 90       	pop	r11
    2af2:	af 90       	pop	r10
    2af4:	9f 90       	pop	r9
    2af6:	8f 90       	pop	r8
    2af8:	08 95       	ret

00002afa <random>:
    2afa:	8f 92       	push	r8
    2afc:	9f 92       	push	r9
    2afe:	af 92       	push	r10
    2b00:	bf 92       	push	r11
    2b02:	cf 92       	push	r12
    2b04:	df 92       	push	r13
    2b06:	ef 92       	push	r14
    2b08:	ff 92       	push	r15
    2b0a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    2b0e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    2b12:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    2b16:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    2b1a:	61 15       	cp	r22, r1
    2b1c:	71 05       	cpc	r23, r1
    2b1e:	81 05       	cpc	r24, r1
    2b20:	91 05       	cpc	r25, r1
    2b22:	21 f4       	brne	.+8      	; 0x2b2c <random+0x32>
    2b24:	64 e2       	ldi	r22, 0x24	; 36
    2b26:	79 ed       	ldi	r23, 0xD9	; 217
    2b28:	8b e5       	ldi	r24, 0x5B	; 91
    2b2a:	97 e0       	ldi	r25, 0x07	; 7
    2b2c:	2d e1       	ldi	r18, 0x1D	; 29
    2b2e:	33 ef       	ldi	r19, 0xF3	; 243
    2b30:	41 e0       	ldi	r20, 0x01	; 1
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodsi4>
    2b38:	49 01       	movw	r8, r18
    2b3a:	5a 01       	movw	r10, r20
    2b3c:	9b 01       	movw	r18, r22
    2b3e:	ac 01       	movw	r20, r24
    2b40:	a7 ea       	ldi	r26, 0xA7	; 167
    2b42:	b1 e4       	ldi	r27, 0x41	; 65
    2b44:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__muluhisi3>
    2b48:	6b 01       	movw	r12, r22
    2b4a:	7c 01       	movw	r14, r24
    2b4c:	ac ee       	ldi	r26, 0xEC	; 236
    2b4e:	b4 ef       	ldi	r27, 0xF4	; 244
    2b50:	a5 01       	movw	r20, r10
    2b52:	94 01       	movw	r18, r8
    2b54:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__mulohisi3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	8c 0d       	add	r24, r12
    2b5e:	9d 1d       	adc	r25, r13
    2b60:	ae 1d       	adc	r26, r14
    2b62:	bf 1d       	adc	r27, r15
    2b64:	b7 ff       	sbrs	r27, 7
    2b66:	03 c0       	rjmp	.+6      	; 0x2b6e <random+0x74>
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	a1 09       	sbc	r26, r1
    2b6c:	b0 48       	sbci	r27, 0x80	; 128
    2b6e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2b72:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2b76:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2b7a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	9f 77       	andi	r25, 0x7F	; 127
    2b84:	ff 90       	pop	r15
    2b86:	ef 90       	pop	r14
    2b88:	df 90       	pop	r13
    2b8a:	cf 90       	pop	r12
    2b8c:	bf 90       	pop	r11
    2b8e:	af 90       	pop	r10
    2b90:	9f 90       	pop	r9
    2b92:	8f 90       	pop	r8
    2b94:	08 95       	ret

00002b96 <srandom>:
    2b96:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    2b9a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    2b9e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    2ba2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    2ba6:	08 95       	ret

00002ba8 <__mulshisi3>:
    2ba8:	b7 ff       	sbrs	r27, 7
    2baa:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__muluhisi3>

00002bae <__mulohisi3>:
    2bae:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__muluhisi3>
    2bb2:	82 1b       	sub	r24, r18
    2bb4:	93 0b       	sbc	r25, r19
    2bb6:	08 95       	ret

00002bb8 <_exit>:
    2bb8:	f8 94       	cli

00002bba <__stop_program>:
    2bba:	ff cf       	rjmp	.-2      	; 0x2bba <__stop_program>
